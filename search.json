[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Guy J. Abel. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Abel GJ (2025). migest: Tools estimating, measuring working migration data. R package version 2.0.5, http://guyabel.github.io/migest/.","code":"@Manual{,   title = {migest: Tools for estimating, measuring and working with migration data},   author = {Guy J. Abel},   year = {2025},   note = {R package version 2.0.5},   url = {http://guyabel.github.io/migest/}, }"},{"path":"/index.html","id":"migest","dir":"","previous_headings":"","what":"Tools for estimating, measuring and working with migration data","title":"Tools for estimating, measuring and working with migration data","text":"Tools estimating, measuring working migration data. See pkgdown site information","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools for estimating, measuring and working with migration data","text":"can install released version migest CRAN : development version GitHub :","code":"install.packages(\"migest\") # install.packages(\"devtools\") devtools::install_github(\"guyabel/migest\")"},{"path":"/reference/alabama_1970.html","id":null,"dir":"Reference","previous_headings":"","what":"Alabama population totals in 1960 and 1970 by age, sex and race — alabama_1970","title":"Alabama population totals in 1960 and 1970 by age, sex and race — alabama_1970","text":"Population data Alabama age, sex race 1960 1970 .","code":""},{"path":"/reference/alabama_1970.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Alabama population totals in 1960 and 1970 by age, sex and race — alabama_1970","text":"","code":"alabama_1970"},{"path":"/reference/alabama_1970.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Alabama population totals in 1960 and 1970 by age, sex and race — alabama_1970","text":"Data frame 68 rows 6 columns: age_1970 Age group 1970 sex Sex male female race Race white non-white pop_1960 Enumerated population 1960. Number births first second half 1960s used age groups 0-4 5-9. pop_1970 Enumerated population 1970 us_census_sr Census survival ratio based US population","code":""},{"path":"/reference/alabama_1970.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Alabama population totals in 1960 and 1970 by age, sex and race — alabama_1970","text":"Data scraped Figure 2.3 Table 1-3A Bogue, D. J., Hinze, K., & White, M. (1982). Techniques Estimating Net Migration. Community Family Study Center. University Chicago.","code":""},{"path":"/reference/birth_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate births for each element of place of birth - place of residence stock matrix — birth_mat","title":"Calculate births for each element of place of birth - place of residence stock matrix — birth_mat","text":"function predominantly intended used within ffs routines migest package.","code":""},{"path":"/reference/birth_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate births for each element of place of birth - place of residence stock matrix — birth_mat","text":"","code":"birth_mat(b_por = NULL, m2 = NULL, method = \"native\", non_negative = TRUE)"},{"path":"/reference/birth_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate births for each element of place of birth - place of residence stock matrix — birth_mat","text":"b_por Vector numeric values births place residence m2 Matrix migrant stock totals time t+1. Rows matrix correspond place birth columns place residence time t+1. method Character string either \"native\" \"proportion\" choose method distribute births. \"proportion\" method assumes rate non-migration increase place birth sub-group (native born foreign born stocks) . \"native\" method ensures births (non-migration increases) stocks belong native born population (move straight birth). non_negative Adjust birth matrix calculation ensure deductions m2 result positive population counts. rare occasions working international stock data number births can exceed increase number native born population.","code":""},{"path":"/reference/birth_mat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate births for each element of place of birth - place of residence stock matrix — birth_mat","text":"Matrix place birth place residence new-born’s","code":""},{"path":"/reference/block_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a block matrix with non-uniform block sizes. — block_matrix","title":"Create a block matrix with non-uniform block sizes. — block_matrix","text":"Creates matrix differing size blocks","code":""},{"path":"/reference/block_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a block matrix with non-uniform block sizes. — block_matrix","text":"","code":"block_matrix(x = NULL, b = NULL, byrow = FALSE, dimnames = NULL)"},{"path":"/reference/block_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a block matrix with non-uniform block sizes. — block_matrix","text":"x Vector numbers identify block. b Numeric value size blocks within matrix ordered depending byrow byrow Logical value. FALSE (default) blocks filled columns, otherwise blocks matrix filled rows. dimnames Character string name attribute basis block matrix. NULL vector length b provides basis row column names.#'","code":""},{"path":"/reference/block_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a block matrix with non-uniform block sizes. — block_matrix","text":"Returns matrix block sizes determined b argument. block filled value taken x.","code":""},{"path":[]},{"path":"/reference/block_matrix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a block matrix with non-uniform block sizes. — block_matrix","text":"Guy J. Abel","code":""},{"path":"/reference/block_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a block matrix with non-uniform block sizes. — block_matrix","text":"","code":"block_matrix(x = 1:16, b = c(2,3,4,2)) #>    A1 A2 B1 B2 B3 C1 C2 C3 C4 D1 D2 #> A1  1  1  5  5  5  9  9  9  9 13 13 #> A2  1  1  5  5  5  9  9  9  9 13 13 #> B1  2  2  6  6  6 10 10 10 10 14 14 #> B2  2  2  6  6  6 10 10 10 10 14 14 #> B3  2  2  6  6  6 10 10 10 10 14 14 #> C1  3  3  7  7  7 11 11 11 11 15 15 #> C2  3  3  7  7  7 11 11 11 11 15 15 #> C3  3  3  7  7  7 11 11 11 11 15 15 #> C4  3  3  7  7  7 11 11 11 11 15 15 #> D1  4  4  8  8  8 12 12 12 12 16 16 #> D2  4  4  8  8  8 12 12 12 12 16 16  block_matrix(x = 1:25, b = c(2,3,4,2,1)) #>    A1 A2 B1 B2 B3 C1 C2 C3 C4 D1 D2 E1 #> A1  1  1  6  6  6 11 11 11 11 16 16 21 #> A2  1  1  6  6  6 11 11 11 11 16 16 21 #> B1  2  2  7  7  7 12 12 12 12 17 17 22 #> B2  2  2  7  7  7 12 12 12 12 17 17 22 #> B3  2  2  7  7  7 12 12 12 12 17 17 22 #> C1  3  3  8  8  8 13 13 13 13 18 18 23 #> C2  3  3  8  8  8 13 13 13 13 18 18 23 #> C3  3  3  8  8  8 13 13 13 13 18 18 23 #> C4  3  3  8  8  8 13 13 13 13 18 18 23 #> D1  4  4  9  9  9 14 14 14 14 19 19 24 #> D2  4  4  9  9  9 14 14 14 14 19 19 24 #> E1  5  5 10 10 10 15 15 15 15 20 20 25"},{"path":"/reference/block_sum.html","id":null,"dir":"Reference","previous_headings":"","what":"Sum over a selected block in a block matrix — block_sum","title":"Sum over a selected block in a block matrix — block_sum","text":"Returns sum block within matrix. function predominantly intended used within ipf2_block routine.","code":""},{"path":"/reference/block_sum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sum over a selected block in a block matrix — block_sum","text":"","code":"block_sum(block = NULL, m = NULL, block_id = NULL)"},{"path":"/reference/block_sum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sum over a selected block in a block matrix — block_sum","text":"block Numeric value block summed. matched matrix block_id. m Matrix blocks combined. block_id Matrix dimensions m used identify blocks.","code":""},{"path":"/reference/block_sum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sum over a selected block in a block matrix — block_sum","text":"Returns numeric value sum single block.","code":""},{"path":[]},{"path":"/reference/block_sum.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sum over a selected block in a block matrix — block_sum","text":"Guy J. Abel","code":""},{"path":"/reference/block_sum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sum over a selected block in a block matrix — block_sum","text":"","code":"m <- matrix(data = 100:220, nrow = 11, ncol = 11) b <- block_matrix(x = 1:16, b = c(2, 3, 4, 2)) block_sum(block = 1, m = m, block_id = b) #> [1] 424 block_sum(block = 4, m = m, block_id = b) #> [1] 460 block_sum(block = 16, m = m, block_id = b) #> [1] 856"},{"path":"/reference/bombay_1951.html","id":null,"dir":"Reference","previous_headings":"","what":"Bombay population totals in 1941 and 1951 by age — bombay_1951","title":"Bombay population totals in 1941 and 1951 by age — bombay_1951","text":"Population data Bombay age 1941 1951","code":""},{"path":"/reference/bombay_1951.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bombay population totals in 1941 and 1951 by age — bombay_1951","text":"","code":"bombay_1951"},{"path":"/reference/bombay_1951.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Bombay population totals in 1941 and 1951 by age — bombay_1951","text":"Data frame 13 rows 5 columns: age_1941 Age group 1941 age_1951 Age group 1951 pop_1941 Enumerated population 1941 pop_1951 Enumerated population 1951 sr Census survival ratio derived United Nations model life table corresponding life expectancy birth of45 years males. See Manual III: Methods Population Projections Sex Age (United Nations publication, Sales .: 56.XIII.3).","code":""},{"path":"/reference/bombay_1951.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Bombay population totals in 1941 and 1951 by age — bombay_1951","text":"Indian Population Census. Published United Nations Department Economic Social Affairs Population Division. (1970). Methods measuring internal migration. United Nations Department Economic Social Affairs Population Division - 1970 - Methods measuring internal migration https://www.un.org/development/desa/pd/sites/www.un.org.development.desa.pd/files/files/documents/2020/Jan/manual_vi_methods_of_measuring_internal_migration.pdf","code":""},{"path":"/reference/cm2.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditional maximization routine for the indirect estimation of origin-destination migration flow table with known margins — cm2","title":"Conditional maximization routine for the indirect estimation of origin-destination migration flow table with known margins — cm2","text":"cm2 function finds maximum likelihood estimates parameters log-linear model: $$ \\log y_{ij} = \\log \\alpha_i + \\log \\beta_j + \\log m_{ij} $$ introduced Willekens (1999). \\(\\alpha_i\\)  \\(\\beta_j\\) represent background information related  characteristics origin destinations respectively. \\(m_{ij}\\) factor represents auxiliary information migration flows, imposes interaction structure onto estimated flow matrix.","code":""},{"path":"/reference/cm2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional maximization routine for the indirect estimation of origin-destination migration flow table with known margins — cm2","text":"","code":"cm2(   row_tot = NULL,   col_tot = NULL,   m = matrix(data = 1, nrow = length(row_tot), ncol = length(col_tot)),   tol = 1e-06,   maxit = 500,   verbose = TRUE,   rtot = row_tot,   ctot = col_tot )"},{"path":"/reference/cm2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional maximization routine for the indirect estimation of origin-destination migration flow table with known margins — cm2","text":"row_tot Vector origin totals constrain sum imputed cell rows. col_tot Vector destination totals constrain sum imputed cell columns. m Matrix auxiliary data. default set 1 origin-destination combinations. tol Numeric value tolerance level used parameter estimation. maxit Numeric value maximum number iterations used parameter estimation. verbose Logical value indicate print parameter estimates iteration. default FALSE. rtot Depreciated. Use row_tot ctot Depreciated. Use col_tot","code":""},{"path":"/reference/cm2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conditional maximization routine for the indirect estimation of origin-destination migration flow table with known margins — cm2","text":"Parameter estimates obtained using EM algorithm outlined Willekens (1999). equivalent conditional maximization likelihood, discussed Raymer et. al. (2007). also provides identical indirect estimates obtained ipf2 routine. user must ensure row column totals equal sum. Care must also taken allow dimension auxiliary matrix (m) equal provided row (row_tot) column (col_tot) arguments. Returns list object N Origin-Destination matrix indirect estimates theta Collection parameter estimates","code":""},{"path":"/reference/cm2.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Conditional maximization routine for the indirect estimation of origin-destination migration flow table with known margins — cm2","text":"Raymer, J., G. J. Abel, P. W. F. Smith (2007). Combining census registration data estimate detailed elderly migration flows England Wales. Journal Royal Statistical Society: Series (Statistics Society) 170 (4), 891–908. Willekens, F. (1999). Modelling Approaches Indirect Estimation Migration Flows: Entropy EM. Mathematical Population Studies 7 (3), 239–78.","code":""},{"path":[]},{"path":"/reference/cm2.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Conditional maximization routine for the indirect estimation of origin-destination migration flow table with known margins — cm2","text":"Guy J. Abel","code":""},{"path":"/reference/cm2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conditional maximization routine for the indirect estimation of origin-destination migration flow table with known margins — cm2","text":"","code":"## with Willekens (1999) data r <- LETTERS[1:2] y <- cm2(row_tot = c(18, 20), col_tot = c(16, 22),           m = matrix(c(5, 1, 2, 7), ncol = 2, dimnames = list(orig = r, dest = r))) #> iteration: 0  #> alpha parameters:  #> beta parameters: 1 1  #>  #> iteration: 1  #> alpha parameters: 2.571429 2.5  #> beta parameters: 1.04186 0.9716088  #> max difference: 1.571429  #>  #> iteration: 2  #> alpha parameters: 2.516596 2.550005  #> beta parameters: 1.057293 0.9614029  #> max difference: 0.05483302  #>  #> iteration: 3  #> alpha parameters: 2.496785 2.568346  #> beta parameters: 1.062963 0.9576881  #> max difference: 0.01981086  #>  #> iteration: 4  #> alpha parameters: 2.489561 2.57507  #> beta parameters: 1.065042 0.95633  #> max difference: 0.00722337  #>  #> iteration: 5  #> alpha parameters: 2.486919 2.577535  #> beta parameters: 1.065805 0.9558326  #> max difference: 0.00264242  #>  #> iteration: 6  #> alpha parameters: 2.485951 2.578438  #> beta parameters: 1.066084 0.9556504  #> max difference: 0.000967792  #>  #> iteration: 7  #> alpha parameters: 2.485597 2.578769  #> beta parameters: 1.066187 0.9555837  #> max difference: 0.0003546105  #>  #> iteration: 8  #> alpha parameters: 2.485467 2.578891  #> beta parameters: 1.066224 0.9555592  #> max difference: 0.0001299542  #>  #> iteration: 9  #> alpha parameters: 2.485419 2.578935  #> beta parameters: 1.066238 0.9555502  #> max difference: 4.762717e-05  #>  #> iteration: 10  #> alpha parameters: 2.485401 2.578951  #> beta parameters: 1.066243 0.9555469  #> max difference: 1.745534e-05  #>  #> iteration: 11  #> alpha parameters: 2.485395 2.578957  #> beta parameters: 1.066245 0.9555457  #> max difference: 6.397427e-06  #>  #> iteration: 12  #> alpha parameters: 2.485393 2.57896  #> beta parameters: 1.066246 0.9555453  #> max difference: 2.34468e-06  #>  #> iteration: 13  #> alpha parameters: 2.485392 2.57896  #> beta parameters: 1.066246 0.9555451  #> max difference: 8.593346e-07  #>  y #> $n #>     dest #> orig         A         B #>    A 13.250194  4.749808 #>    B  2.749806 17.250192 #>  #> $theta #>    alpha1    alpha2     beta1     beta2  #> 2.4853919 2.5789604 1.0662459 0.9555451  #>   ## with all elements of offset equal (independence fit) y <- cm2(row_tot = c(18, 20), col_tot = c(16, 22)) #> iteration: 0  #> alpha parameters:  #> beta parameters: 1 1  #>  #> iteration: 1  #> alpha parameters: 9 10  #> beta parameters: 0.8421053 1.157895  #> max difference: 9  #>  #> iteration: 2  #> alpha parameters: 9 10  #> beta parameters: 0.8421053 1.157895  #> max difference: 0  #>  y #> $n #>          [,1]     [,2] #> [1,] 7.578947 10.42105 #> [2,] 8.421053 11.57895 #>  #> $theta #>     alpha1     alpha2      beta1      beta2  #>  9.0000000 10.0000000  0.8421053  1.1578947  #>   ## with bigger matrix r <- LETTERS[1:4] y <- cm2(row_tot = c(250, 100, 140, 110), col_tot = c(150, 150, 180, 120),          m = matrix(data = c(0, 100, 30, 70, 50, 0, 45, 5, 60, 35, 0, 40, 20, 25, 20, 0),                     nrow = 4, ncol = 4, dimnames = list(orig = r, dest = r), byrow = TRUE)) #> iteration: 0  #> alpha parameters:  #> beta parameters: 1 1 1 1  #>  #> iteration: 1  #> alpha parameters: 1.25 1 1.037037 1.692308  #> beta parameters: 1.026916 0.7367243 1.547107 0.8956462  #> max difference: 0.6923077  #>  #> iteration: 2  #> alpha parameters: 1.367758 0.7971692 1.136122 1.573709  #> beta parameters: 1.075269 0.6948215 1.66083 0.8265955  #> max difference: 0.2028308  #>  #> iteration: 3  #> alpha parameters: 1.411084 0.7539557 1.148494 1.525817  #> beta parameters: 1.093902 0.6835234 1.685758 0.80816  #> max difference: 0.04789161  #>  #> iteration: 4  #> alpha parameters: 1.424531 0.7429695 1.148635 1.513457  #> beta parameters: 1.100226 0.6802975 1.691114 0.8033342  #> max difference: 0.01344736  #>  #> iteration: 5  #> alpha parameters: 1.428599 0.7400386 1.147943 1.510279  #> beta parameters: 1.10226 0.6793635 1.692281 0.8020325  #> max difference: 0.004067991  #>  #> iteration: 6  #> alpha parameters: 1.429821 0.7392305 1.147592 1.509436  #> beta parameters: 1.102895 0.6790904 1.692545 0.8016713  #> max difference: 0.001221511  #>  #> iteration: 7  #> alpha parameters: 1.430186 0.7390021 1.147459 1.509205  #> beta parameters: 1.103089 0.67901 1.692608 0.8015688  #> max difference: 0.0003654829  #>  #> iteration: 8  #> alpha parameters: 1.430296 0.7389364 1.147414 1.50914  #> beta parameters: 1.103148 0.6789863 1.692623 0.8015392  #> max difference: 0.0001091228  #>  #> iteration: 9  #> alpha parameters: 1.430328 0.7389173 1.1474 1.509122  #> beta parameters: 1.103166 0.6789792 1.692627 0.8015306  #> max difference: 3.253749e-05  #>  #> iteration: 10  #> alpha parameters: 1.430338 0.7389117 1.147396 1.509116  #> beta parameters: 1.103171 0.6789772 1.692628 0.8015281  #> max difference: 9.693573e-06  #>  #> iteration: 11  #> alpha parameters: 1.430341 0.73891 1.147394 1.509115  #> beta parameters: 1.103173 0.6789765 1.692629 0.8015273  #> max difference: 2.886352e-06  #>  #> iteration: 12  #> alpha parameters: 1.430342 0.7389095 1.147394 1.509114  #> beta parameters: 1.103173 0.6789764 1.692629 0.8015271  #> max difference: 8.591439e-07  #>                       # display with row and col totals round(addmargins(y$n))  #>      dest #> orig    A   B   C   D Sum #>   A     0  97  73  80 250 #>   B    41   0  56   3 100 #>   C    76  27   0  37 140 #>   D    33  26  51   0 110 #>   Sum 150 150 180 120 600"},{"path":"/reference/cm3.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditional maximization routine for the indirect estimation of origin-destination-migrant type migration flow tables with known origin and destination margins. — cm3","title":"Conditional maximization routine for the indirect estimation of origin-destination-migrant type migration flow tables with known origin and destination margins. — cm3","text":"cm3 function finds maximum likelihood estimates parameters log-linear model: $$ \\log y_{ijk} = \\log \\alpha_{} + \\log \\beta_{j} + \\log m_{ijk} $$ introduced Abel (2005). \\(\\alpha_{}\\)  \\(\\beta_{j}\\) represent background information related  characteristics origin destinations respectively. \\(m_{ijk}\\) factor represents auxiliary information origin-destination migration flows migrant characteristic (age, sex, disability, household type, economic status, etc.). method useful combining data detailed data collection processes (Census) --date information migration inflows outflows (details movements migrant characteristics known).","code":""},{"path":"/reference/cm3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional maximization routine for the indirect estimation of origin-destination-migrant type migration flow tables with known origin and destination margins. — cm3","text":"","code":"cm3(   row_tot = NULL,   col_tot = NULL,   m = NULL,   tol = 1e-06,   maxit = 500,   verbose = TRUE )"},{"path":"/reference/cm3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional maximization routine for the indirect estimation of origin-destination-migrant type migration flow tables with known origin and destination margins. — cm3","text":"row_tot Vector origin totals constrain sum imputed cell rows. col_tot Vector destination totals constrain sum imputed cell columns. m Array auxiliary data. default set 1 origin-destination-migrant typology combinations. tol Numeric value tolerance level used parameter estimation. maxit Numeric value maximum number iterations used parameter estimation. verbose Logical value indicate print parameter estimates iteration. default FALSE.","code":""},{"path":"/reference/cm3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conditional maximization routine for the indirect estimation of origin-destination-migrant type migration flow tables with known origin and destination margins. — cm3","text":"Parameter estimates obtained using conditional maximization likelihood, discussed Abel (2005) Raymer et. al. (2007). user must ensure row column totals equal sum. Care must also taken allow row column dimension auxiliary matrix (m) equal provided row column totals. Returns list object N Origin-Destination matrix indirect estimates theta Collection parameter estimates","code":""},{"path":"/reference/cm3.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Conditional maximization routine for the indirect estimation of origin-destination-migrant type migration flow tables with known origin and destination margins. — cm3","text":"Abel, G. J. (2005) Indirect Estimation Elderly Migrant Flows England Wales (MS.c. Thesis). University Southampton Raymer, J., G. J. Abel, P. W. F. Smith (2007). Combining census registration data estimate detailed elderly migration flows England Wales. Journal Royal Statistical Society: Series (Statistics Society) 170 (4), 891–908.","code":""},{"path":[]},{"path":"/reference/cm3.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Conditional maximization routine for the indirect estimation of origin-destination-migrant type migration flow tables with known origin and destination margins. — cm3","text":"Guy J. Abel","code":""},{"path":"/reference/cm3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conditional maximization routine for the indirect estimation of origin-destination-migrant type migration flow tables with known origin and destination margins. — cm3","text":"","code":"## over two tables r <- LETTERS[1:2] y <- cm3(row_tot = c(18, 20) * 2, col_tot = c(16, 22) * 2,          m = array(c(5, 1, 2, 7, 4, 2, 5, 9), dim = c(2, 2, 2),                    dimnames = list(orig = r, dest = r, type = c(\"ILL\", \"HEALTHY\")))) #> iteration: 0  #> alpha parameters:  #> beta parameters: 1 1  #>  #> iteration: 1  #> alpha parameters: 2.25 2.105263  #> beta parameters: 1.204557 0.8900719  #> max difference: 1.25  #>  #> iteration: 2  #> alpha parameters: 2.108776 2.240291  #> beta parameters: 1.245143 0.8694605  #> max difference: 0.1412239  #>  #> iteration: 3  #> alpha parameters: 2.081826 2.2667  #> beta parameters: 1.253107 0.8654605  #> max difference: 0.02694999  #>  #> iteration: 4  #> alpha parameters: 2.076582 2.271864  #> beta parameters: 1.254664 0.8646796  #> max difference: 0.005244326  #>  #> iteration: 5  #> alpha parameters: 2.075558 2.272874  #> beta parameters: 1.254969 0.864527  #> max difference: 0.001024239  #>  #> iteration: 6  #> alpha parameters: 2.075357 2.273071  #> beta parameters: 1.255028 0.8644972  #> max difference: 0.0002001792  #>  #> iteration: 7  #> alpha parameters: 2.075318 2.273109  #> beta parameters: 1.25504 0.8644914  #> max difference: 3.912878e-05  #>  #> iteration: 8  #> alpha parameters: 2.075311 2.273117  #> beta parameters: 1.255042 0.8644902  #> max difference: 7.648661e-06  #>  #> iteration: 9  #> alpha parameters: 2.075309 2.273118  #> beta parameters: 1.255043 0.86449  #> max difference: 1.495122e-06  #>  #> iteration: 10  #> alpha parameters: 2.075309 2.273119  #> beta parameters: 1.255043 0.86449  #> max difference: 2.922594e-07  #>  # display with row, col and table totals y #> $n #> , , type = ILL #>  #>     dest #> orig         A         B #>    A 13.023008  3.588167 #>    B  2.852862 13.755619 #>  #> , , type = HEALTHY #>  #>     dest #> orig         A         B #>    A 10.418407  8.970418 #>    B  5.705723 17.685795 #>  #>  #> $theta #>   alpha1   alpha2    beta1    beta2  #> 2.075309 2.273119 1.255043 0.864490  #>   ## over three tables y <- cm3(row_tot = c(170, 120, 410), col_tot = c(500, 140, 60),          m = array(c(5, 1, 2, 7,  4, 2, 5, 9,  5, 4, 3, 1), dim = c(2, 2, 3),                    dimnames = list(orig = r, dest = r, type = c(\"0--15\", \"15-60\", \">60\"))),                    verbose = FALSE) # display with row, col and table totals y #> $n #> , , type = 0--15 #>  #>     dest #> orig        A         B #>    A 116.2709  9.922764 #>    B  24.9202 37.217838 #>  #> , , type = 15-60 #>  #>     dest #> orig        A        B #>    A 93.01674 24.80691 #>    B 49.84040 47.85151 #>  #> , , type = >60 #>  #>     dest #> orig        A         B #>    A 116.2709 14.884147 #>    B  99.6808  5.316834 #>  #>  #> $theta #>        alpha1        alpha2         beta1         beta2  #> 3.798846e-171 4.071009e-171 6.121381e+171 1.306024e+171  #>"},{"path":"/reference/cm_net.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditional maximization routine for the indirect estimation of origin-destination-type migration flow tables with known net migration totals. — cm_net","title":"Conditional maximization routine for the indirect estimation of origin-destination-type migration flow tables with known net migration totals. — cm_net","text":"cm_net function finds maximum likelihood estimates fitted values log-linear model: $$\\log y_{ij} = \\log \\alpha_{} + \\log \\alpha_{}^{-1} + \\log m_{ij} $$","code":""},{"path":"/reference/cm_net.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional maximization routine for the indirect estimation of origin-destination-type migration flow tables with known net migration totals. — cm_net","text":"","code":"cm_net(   net_tot = NULL,   m = NULL,   tol = 1e-06,   maxit = 500,   verbose = TRUE,   alpha0 = rep(1, length(net_tot)) )"},{"path":"/reference/cm_net.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional maximization routine for the indirect estimation of origin-destination-type migration flow tables with known net migration totals. — cm_net","text":"net_tot Vector net migration totals constrain sum imputed cell row columns. Elements must sum zero. m Array auxiliary data. default, set 1 origin-destination-migrant typologies combinations. tol Numeric value tolerance level used parameter estimation. maxit Numeric value maximum number iterations used parameter estimation. verbose Logical value indicate print parameter estimates iteration. default FALSE. alpha0 Vector initial estimates alpha","code":""},{"path":"/reference/cm_net.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conditional maximization routine for the indirect estimation of origin-destination-type migration flow tables with known net migration totals. — cm_net","text":"Conditional maximisation routine set using partial likelihood derivatives. argument net_tot takes known net migration totals. user must ensure net migration totals sum globally zero. Returns list object mu Array indirect estimates origin-destination matrices migrant characteristic Iteration count tol Tolerance level final iteration","code":""},{"path":"/reference/cm_net.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Conditional maximization routine for the indirect estimation of origin-destination-type migration flow tables with known net migration totals. — cm_net","text":"Guy J. Abel, Peter W. F. Smith","code":""},{"path":"/reference/cm_net.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conditional maximization routine for the indirect estimation of origin-destination-type migration flow tables with known net migration totals. — cm_net","text":"","code":"m <- matrix(data = 1:16, nrow = 4) # m[lower.tri(m)] <- t(m)[lower.tri(m)] addmargins(m) #>                 Sum #>      1  5  9 13  28 #>      2  6 10 14  32 #>      3  7 11 15  36 #>      4  8 12 16  40 #> Sum 10 26 42 58 136 sum_net(m) #> [1] -18  -6   6  18  y <- cm_net(net_tot = c(30, 40, -15, -55), m = m) #> iteration: 0  #> alpha parameters: 1 1 1 1  #>  #> iteration: 1  #> alpha parameters: 0.2668645 0.4718705 1.308365 2.074099  #>  #> iteration: 2  #> alpha parameters: 0.3411136 0.5168407 1.249673 1.830115  #>  #> iteration: 3  #> alpha parameters: 0.321874 0.4988266 1.264682 1.897978  #>  #> iteration: 4  #> alpha parameters: 0.3269606 0.5034982 1.260477 1.879734  #>  #> iteration: 5  #> alpha parameters: 0.3255818 0.5022216 1.261608 1.884656  #>  #> iteration: 6  #> alpha parameters: 0.3259533 0.5025649 1.261303 1.883327  #>  #> iteration: 7  #> alpha parameters: 0.325853 0.5024722 1.261385 1.883686  #>  #> iteration: 8  #> alpha parameters: 0.3258801 0.5024972 1.261363 1.883589  #>  #> iteration: 9  #> alpha parameters: 0.3258728 0.5024905 1.261369 1.883615  #>  #> iteration: 10  #> alpha parameters: 0.3258748 0.5024923 1.261367 1.883608  #>  #> iteration: 11  #> alpha parameters: 0.3258742 0.5024918 1.261368 1.88361  #>  addmargins(y$n) #>      dest #> orig          A         B         C         D        Sum #>   A    1.000000  3.242583  2.325150  2.249068   8.816802 #>   B    3.083961  6.000000  3.983707  3.734790  16.802458 #>   C   11.612152 17.571573 11.000000 10.044818  50.228543 #>   D   23.120683 29.988296 17.919688 16.000000  87.028668 #>   Sum 38.816796 56.802453 35.228545 32.028677 162.876471 sum_net(y$n) #>         A         B         C         D  #>  29.99999  39.99999 -15.00000 -54.99999   m <- matrix(data = c(0, 100, 30, 70, 50, 0, 45, 5, 60, 35, 0, 40, 20, 25, 20, 0),             nrow = 4, ncol = 4, byrow = TRUE,             dimnames = list(orig = LETTERS[1:4], dest = LETTERS[1:4])) addmargins(m) #>      dest #> orig    A   B  C   D Sum #>   A     0 100 30  70 200 #>   B    50   0 45   5 100 #>   C    60  35  0  40 135 #>   D    20  25 20   0  65 #>   Sum 130 160 95 115 500 sum_net(m) #>   A   B   C   D  #> -70  60 -40  50   y <- cm_net(net_tot = c(-100, 125, -75, 50), m = m) #> iteration: 0  #> alpha parameters: 1 1 1 1  #>  #> iteration: 1  #> alpha parameters: 1.094097 0.7858951 1.161443 1  #>  #> iteration: 2  #> alpha parameters: 1.016884 0.8650374 1.10878 1.051379  #>  #> iteration: 3  #> alpha parameters: 1.064952 0.8226093 1.128406 1.017637  #>  #> iteration: 4  #> alpha parameters: 1.035856 0.8460655 1.11986 1.037046  #>  #> iteration: 5  #> alpha parameters: 1.052807 0.8325 1.124076 1.026025  #>  #> iteration: 6  #> alpha parameters: 1.042904 0.8402779 1.121866 1.032308  #>  #> iteration: 7  #> alpha parameters: 1.048632 0.8357758 1.123085 1.028704  #>  #> iteration: 8  #> alpha parameters: 1.045312 0.8383713 1.1224 1.030778  #>  #> iteration: 9  #> alpha parameters: 1.04723 0.8368707 1.122791 1.029582  #>  #> iteration: 10  #> alpha parameters: 1.046121 0.837737 1.122567 1.030272  #>  #> iteration: 11  #> alpha parameters: 1.046762 0.8372364 1.122696 1.029874  #>  #> iteration: 12  #> alpha parameters: 1.046392 0.8375255 1.122622 1.030104  #>  #> iteration: 13  #> alpha parameters: 1.046606 0.8373585 1.122665 1.029971  #>  #> iteration: 14  #> alpha parameters: 1.046482 0.837455 1.12264 1.030048  #>  #> iteration: 15  #> alpha parameters: 1.046554 0.8373992 1.122654 1.030003  #>  #> iteration: 16  #> alpha parameters: 1.046512 0.8374314 1.122646 1.030029  #>  #> iteration: 17  #> alpha parameters: 1.046536 0.8374128 1.122651 1.030014  #>  #> iteration: 18  #> alpha parameters: 1.046522 0.8374236 1.122648 1.030023  #>  #> iteration: 19  #> alpha parameters: 1.04653 0.8374174 1.122649 1.030018  #>  #> iteration: 20  #> alpha parameters: 1.046526 0.837421 1.122648 1.030021  #>  addmargins(y$n) #>      dest #> orig          A         B        C          D       Sum #>   A     0.00000 124.97056 27.96585  71.121910 224.05832 #>   B    40.00942   0.00000 33.56693   4.065067  77.64142 #>   C    64.36422  46.92119  0.00000  43.597199 154.88260 #>   D    19.68451  30.74980 18.34980   0.000000  68.78412 #>   Sum 124.05815 202.64155 79.88258 118.784175 525.36645 sum_net(y$n) #>          A          B          C          D  #> -100.00017  125.00013  -75.00002   50.00006"},{"path":"/reference/cm_net_tot.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditional maximization routine for the indirect estimation of origin-destination-type migration flow tables with known net migration and grand totals. — cm_net_tot","title":"Conditional maximization routine for the indirect estimation of origin-destination-type migration flow tables with known net migration and grand totals. — cm_net_tot","text":"cm_net function finds maximum likelihood estimates fitted values log-linear model: $$\\log y_{ij} = \\log \\alpha_{} + \\log \\alpha_{}^{-1} + \\log m_{ij} $$","code":""},{"path":"/reference/cm_net_tot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional maximization routine for the indirect estimation of origin-destination-type migration flow tables with known net migration and grand totals. — cm_net_tot","text":"","code":"cm_net_tot(   net_tot = NULL,   tot = NULL,   m = NULL,   tol = 1e-06,   maxit = 500,   verbose = TRUE,   alpha0 = rep(1, length(net_tot)),   lambda0 = 1,   alpha_constrained = TRUE )"},{"path":"/reference/cm_net_tot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional maximization routine for the indirect estimation of origin-destination-type migration flow tables with known net migration and grand totals. — cm_net_tot","text":"net_tot Vector net migration totals constrain sum imputed cell row columns. Elements must sum zero. tot Numeric value grand total constrain sum imputed cells. m Array auxiliary data. default, set 1 origin-destination-migrant typologies combinations. tol Numeric value tolerance level used parameter estimation. maxit Numeric value maximum number iterations used parameter estimation. verbose Logical value indicate print parameter estimates iteration. default FALSE. alpha0 Vector initial estimates alpha lambda0 Numeric value initial estimates lambda alpha_constrained Logical value indicate first alpha constrain unity. default TRUE","code":""},{"path":"/reference/cm_net_tot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conditional maximization routine for the indirect estimation of origin-destination-type migration flow tables with known net migration and grand totals. — cm_net_tot","text":"Conditional maximisation routine set using partial likelihood derivatives. argument net_tot takes known net migration totals. user must ensure net migration totals sum globally zero. Returns list object mu Array indirect estimates origin-destination matrices migrant characteristic Iteration count tol Tolerance level final iteration","code":""},{"path":"/reference/cm_net_tot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Conditional maximization routine for the indirect estimation of origin-destination-type migration flow tables with known net migration and grand totals. — cm_net_tot","text":"Guy J. Abel, Peter W. F. Smith","code":""},{"path":"/reference/cm_net_tot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conditional maximization routine for the indirect estimation of origin-destination-type migration flow tables with known net migration and grand totals. — cm_net_tot","text":"","code":"m <- matrix(data = 1:16, nrow = 4) # m[lower.tri(m)] <- t(m)[lower.tri(m)] addmargins(m) #>                 Sum #>      1  5  9 13  28 #>      2  6 10 14  32 #>      3  7 11 15  36 #>      4  8 12 16  40 #> Sum 10 26 42 58 136 sum_net(m) #> [1] -18  -6   6  18  y <- cm_net_tot(net_tot = c(30, 40, -15, -55), tot = 200, m = m) #> iteration: 0  #> alpha parameters: 1 1 1 1  #> lambda parameter: 1  #>  #> iteration: 1  #> alpha parameters: 1 0.4718705 1.308365 2.074099  #> lambda parameter: 1.470588  #>  #> iteration: 2  #> alpha parameters: 1 0.7041053 1.419844 1.963206  #> lambda parameter: 1.244108  #>  #> iteration: 3  #> alpha parameters: 1 0.7039241 1.625029 2.377481  #> lambda parameter: 1.414181  #>  #> iteration: 4  #> alpha parameters: 1 0.8390437 1.766222 2.483845  #> lambda parameter: 1.35715  #>  #> iteration: 5  #> alpha parameters: 1 0.8875586 1.930152 2.749782  #> lambda parameter: 1.402129  #>  #> iteration: 6  #> alpha parameters: 1 0.9738902 2.067601 2.913777  #> lambda parameter: 1.385633  #>  #> iteration: 7  #> alpha parameters: 1 1.030103 2.203614 3.113081  #> lambda parameter: 1.393776  #>  #> iteration: 8  #> alpha parameters: 1 1.093015 2.324243 3.27301  #> lambda parameter: 1.386325  #>  #> iteration: 9  #> alpha parameters: 1 1.143593 2.436551 3.431774  #> lambda parameter: 1.384671  #>  #> iteration: 10  #> alpha parameters: 1 1.192199 2.537068 3.569476  #> lambda parameter: 1.37922  #>  #> iteration: 11  #> alpha parameters: 1 1.233947 2.6281 3.696884  #> lambda parameter: 1.375277  #>  #> iteration: 12  #> alpha parameters: 1 1.271882 2.709221 3.809386  #> lambda parameter: 1.370603  #>  #> iteration: 13  #> alpha parameters: 1 1.305011 2.781574 3.910514  #> lambda parameter: 1.366532  #>  #> iteration: 14  #> alpha parameters: 1 1.334422 2.8456 3.999813  #> lambda parameter: 1.362544  #>  #> iteration: 15  #> alpha parameters: 1 1.360144 2.902146 4.078939  #> lambda parameter: 1.35897  #>  #> iteration: 16  #> alpha parameters: 1 1.382726 2.951859 4.148502  #> lambda parameter: 1.355681  #>  #> iteration: 17  #> alpha parameters: 1 1.402423 2.995463 4.209617  #> lambda parameter: 1.352744  #>  #> iteration: 18  #> alpha parameters: 1 1.419607 3.033593 4.263088  #> lambda parameter: 1.350111  #>  #> iteration: 19  #> alpha parameters: 1 1.434549 3.066869 4.309798  #> lambda parameter: 1.347779  #>  #> iteration: 20  #> alpha parameters: 1 1.447532 3.095847 4.350499  #> lambda parameter: 1.345718  #>  #> iteration: 30  #> alpha parameters: 1 1.511314 3.239287 4.552373  #> lambda parameter: 1.335161  #>  #> iteration: 40  #> alpha parameters: 1 1.525818 3.272159 4.598732  #> lambda parameter: 1.332664  #>  #> iteration: 50  #> alpha parameters: 1 1.529049 3.279494 4.609081  #> lambda parameter: 1.332103  #>  #> iteration: 60  #> alpha parameters: 1 1.529765 3.281121 4.611377  #> lambda parameter: 1.331979  #>  #> iteration: 70  #> alpha parameters: 1 1.529924 3.281481 4.611886  #> lambda parameter: 1.331951  #>  #> iteration: 80  #> alpha parameters: 1 1.529959 3.281561 4.611999  #> lambda parameter: 1.331945  #>  #> iteration: 90  #> alpha parameters: 1 1.529967 3.281579 4.612024  #> lambda parameter: 1.331944  #>  addmargins(y$n) #>      dest #> orig          A         B         C         D       Sum #>   A    1.331944  4.352851  3.652964  3.754375  13.09213 #>   B    4.075660  7.991663  6.209906  6.185921  24.46315 #>   C   13.112639 19.997919 14.651381 14.215708  61.97765 #>   D   24.571829 32.120731 22.463416 21.311100 100.46708 #>   Sum 43.092072 64.463165 46.977667 45.467104 200.00001 sum_net(y$n) #>         A         B         C         D  #>  29.99994  40.00002 -14.99998 -54.99997   m <- matrix(data = c(0, 100, 30, 70, 50, 0, 45, 5, 60, 35, 0, 40, 20, 25, 20, 0),             nrow = 4, ncol = 4, byrow = TRUE,             dimnames = list(orig = LETTERS[1:4], dest = LETTERS[1:4])) addmargins(m) #>      dest #> orig    A   B  C   D Sum #>   A     0 100 30  70 200 #>   B    50   0 45   5 100 #>   C    60  35  0  40 135 #>   D    20  25 20   0  65 #>   Sum 130 160 95 115 500 sum_net(m) #>   A   B   C   D  #> -70  60 -40  50   y <- cm_net_tot(net_tot = c(-100, 125, -75, 50), tot = 600, m = m) #> iteration: 0  #> alpha parameters: 1 1 1 1  #> lambda parameter: 1  #>  #> iteration: 1  #> alpha parameters: 1 0.7858951 1.161443 1  #> lambda parameter: 1.2  #>  #> iteration: 2  #> alpha parameters: 1 0.8851468 1.014562 1.052841  #> lambda parameter: 1.124338  #>  #> iteration: 3  #> alpha parameters: 1 0.8346426 1.090831 1.014231  #> lambda parameter: 1.181481  #>  #> iteration: 4  #> alpha parameters: 1 0.865191 1.044125 1.039642  #> lambda parameter: 1.153662  #>  #> iteration: 5  #> alpha parameters: 1 0.8489046 1.070983 1.02594  #> lambda parameter: 1.17151  #>  #> iteration: 6  #> alpha parameters: 1 0.8589402 1.055837 1.03464  #> lambda parameter: 1.161992  #>  #> iteration: 7  #> alpha parameters: 1 0.8535558 1.064845 1.030086  #> lambda parameter: 1.167777  #>  #> iteration: 8  #> alpha parameters: 1 0.8568633 1.059868 1.032968  #> lambda parameter: 1.164594  #>  #> iteration: 9  #> alpha parameters: 1 0.8550793 1.062853 1.031458  #> lambda parameter: 1.166491  #>  #> iteration: 10  #> alpha parameters: 1 0.8561689 1.061209 1.032408  #> lambda parameter: 1.165434  #>  #> iteration: 11  #> alpha parameters: 1 0.8555778 1.062194 1.031907  #> lambda parameter: 1.166059  #>  #> iteration: 12  #> alpha parameters: 1 0.8559368 1.061651 1.032219  #> lambda parameter: 1.165709  #>  #> iteration: 13  #> alpha parameters: 1 0.855741 1.061976 1.032053  #> lambda parameter: 1.165915  #>  #> iteration: 14  #> alpha parameters: 1 0.8558593 1.061796 1.032156  #> lambda parameter: 1.165799  #>  #> iteration: 15  #> alpha parameters: 1 0.8557944 1.061903 1.032101  #> lambda parameter: 1.165867  #>  #> iteration: 16  #> alpha parameters: 1 0.8558334 1.061843 1.032135  #> lambda parameter: 1.165828  #>  #> iteration: 17  #> alpha parameters: 1 0.8558119 1.061879 1.032117  #> lambda parameter: 1.165851  #>  #> iteration: 18  #> alpha parameters: 1 0.8558248 1.061859 1.032128  #> lambda parameter: 1.165838  #>  #> iteration: 19  #> alpha parameters: 1 0.8558177 1.061871 1.032122  #> lambda parameter: 1.165846  #>  #> iteration: 20  #> alpha parameters: 1 0.8558219 1.061864 1.032126  #> lambda parameter: 1.165841  #>  addmargins(y$n) #>      dest #> orig          A         B        C          D       Sum #>   A     0.00000 136.22513 32.93756  79.068944 248.23163 #>   B    49.88761   0.00000 42.28296   4.833488  97.00406 #>   C    74.27815  50.62851  0.00000  47.977516 172.88418 #>   D    24.06590  35.15032 22.66377   0.000000  81.87999 #>   Sum 148.23166 222.00396 97.88429 131.879947 599.99986 sum_net(y$n) #>         A         B         C         D  #> -99.99997 124.99990 -74.99989  49.99995"},{"path":"/reference/death_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate deaths for each element of place of birth - place of residence stock matrix — death_mat","title":"Calculate deaths for each element of place of birth - place of residence stock matrix — death_mat","text":"function predominantly intended used within ffs routines migest package.","code":""},{"path":"/reference/death_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate deaths for each element of place of birth - place of residence stock matrix — death_mat","text":"","code":"death_mat(   d_por = NULL,   m1 = NULL,   method = \"proportion\",   m2 = NULL,   b_por = NULL )"},{"path":"/reference/death_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate deaths for each element of place of birth - place of residence stock matrix — death_mat","text":"d_por Vector numeric values deaths place residence. m1 Matrix migrant stock totals time t. Rows matrix correspond place birth columns place residence time t. Used distribute deaths proportionally migrant stock population. method Character string either \"proportion\" \"accounting\" choose method distribute deaths. \"proportion\" method assumes mortality rate place birth sub-group (native born foreign born stocks) . \"accounting\" method ensures deaths place birth matches implied demographic accounting. Still needs explored fully. m2 Matrix migrant stock totals time t+1. Rows matrix correspond place birth columns place residence time t+1. Used distribute deaths proportionally migrant stock population. use method = \"accounting\" b_por Vector numeric values births place residence. use method = \"accounting\".","code":""},{"path":"/reference/death_mat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate deaths for each element of place of birth - place of residence stock matrix — death_mat","text":"Matrix place death place residence","code":""},{"path":"/reference/dict_ims.html","id":null,"dir":"Reference","previous_headings":"","what":"Dictionary to look up region geographies based on countries used in UN DESA International Migrant Stock. — dict_ims","title":"Dictionary to look up region geographies based on countries used in UN DESA International Migrant Stock. — dict_ims","text":"Intended use custom dictionary countrycode package, existing UN region area codes match used UN DESA WPP, see https://github.com/vincentarelbundock/countrycode/issues/253","code":""},{"path":"/reference/dict_ims.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dictionary to look up region geographies based on countries used in UN DESA International Migrant Stock. — dict_ims","text":"","code":"dict_ims"},{"path":"/reference/dict_ims.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Dictionary to look up region geographies based on countries used in UN DESA International Migrant Stock. — dict_ims","text":"Data frame 243 rows 18 columns. One first three columns intended input origin countrycode. name Country name iso3c ISO numeric code iso3n ISO 3 letter code Remaining columns intended input destination countrycode. name_short Short country name ims Country UN DESA International Migration Stock data. codes added older political geographies match World Bank data older country units IMS region Geographic region country (6) region_sub Geographic sub region country (22). Filled using region none given original data region_sdg SDG region country (8) region_sdg_sub Sub SDG region country (9). Filled using region_sdg none given original data region_wb World Bank region un_develop UN development group country (3) wb_income World Bank income group country (3) wb_income_detail Detailled World Bank income group country (4) lldc Indicator variable Land-Locked Developing Countries (32) sids Indicator variable Small Island Developing States (58) region_as2014 Region grouping used global chord diagram plots Abel Sander (2014) region_sab2014 Region grouping used global chord diagram plots Sander, Abel Bauer (2014) region_a2018 Region grouping used global chord diagram plots Abel (2018) region_ac2022 Region grouping used global chord diagram plots Abel Cohen (2022)","code":""},{"path":"/reference/dict_ims.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Dictionary to look up region geographies based on countries used in UN DESA International Migrant Stock. — dict_ims","text":"aggregates_correspondence_table_2020_1.xlsx file United Nations Department Economic Social Affairs, Population Division (2020). International Migrant Stock 2020.","code":""},{"path":"/reference/dict_ims.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dictionary to look up region geographies based on countries used in UN DESA International Migrant Stock. — dict_ims","text":"","code":"dict_ims #> # A tibble: 243 × 18 #>    name      iso3c iso3n name_short ims   region region_sub region_sdg region_wb #>    <chr>     <chr> <dbl> <chr>      <lgl> <chr>  <chr>      <chr>      <chr>     #>  1 Burundi   BDI     108 Burundi    TRUE  Africa Eastern A… Sub-Sahar… Sub-Saha… #>  2 Comoros   COM     174 Comoros    TRUE  Africa Eastern A… Sub-Sahar… Sub-Saha… #>  3 Djibouti  DJI     262 Djibouti   TRUE  Africa Eastern A… Sub-Sahar… Middle E… #>  4 Eritrea   ERI     232 Eritrea    TRUE  Africa Eastern A… Sub-Sahar… Sub-Saha… #>  5 Ethiopia  ETH     231 Ethiopia   TRUE  Africa Eastern A… Sub-Sahar… Sub-Saha… #>  6 Ethiopia… ETI     231 Ethiopia … FALSE Africa Eastern A… Sub-Sahar… Sub-Saha… #>  7 Kenya     KEN     404 Kenya      TRUE  Africa Eastern A… Sub-Sahar… Sub-Saha… #>  8 Madagasc… MDG     450 Madagascar TRUE  Africa Eastern A… Sub-Sahar… Sub-Saha… #>  9 Malawi    MWI     454 Malawi     TRUE  Africa Eastern A… Sub-Sahar… Sub-Saha… #> 10 Mauritius MUS     480 Mauritius  TRUE  Africa Eastern A… Sub-Sahar… Sub-Saha… #> # ℹ 233 more rows #> # ℹ 9 more variables: un_develop <chr>, wb_income <chr>, #> #   wb_income_detail <chr>, lldc <lgl>, sids <lgl>, region_as2014 <chr>, #> #   region_sab2014 <chr>, region_a2018 <chr>, region_ac2022 <chr> if (FALSE) { # \\dontrun{ library(tidyverse) library(countrycode) # download Abel and Cohen (2019) estimates f <- read_csv(\"https://ndownloader.figshare.com/files/38016762\", show_col_types = FALSE) f  # use dictionary to get region to region flows d <- f %>%   mutate(     orig = countrycode(       sourcevar = orig, custom_dict = dict_ims,       origin = \"iso3c\", destination = \"region\"),     dest = countrycode(       sourcevar = dest, custom_dict = dict_ims,       origin = \"iso3c\", destination = \"region\")   ) %>%   group_by(year0, orig, dest) %>%   summarise_all(sum) d } # }"},{"path":"/reference/ffs_demo.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimation of bilateral migrant flows from bilateral migrant stocks using demographic accounting approaches — ffs_demo","title":"Estimation of bilateral migrant flows from bilateral migrant stocks using demographic accounting approaches — ffs_demo","text":"Estimates migrant transitions flows two sequential migrant stock tables. Replaces old ffs.","code":""},{"path":"/reference/ffs_demo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimation of bilateral migrant flows from bilateral migrant stocks using demographic accounting approaches — ffs_demo","text":"","code":"ffs_demo(   stock_start = NULL,   stock_end = NULL,   births = NULL,   deaths = NULL,   seed = NULL,   stayer_assumption = TRUE,   match_global = \"before-demo-adjust\",   match_birthplace_tot_method = \"rescale\",   birth_method = \"native\",   birth_non_negative = TRUE,   death_method = \"proportion\",   verbose = FALSE,   return = \"flow\" )"},{"path":"/reference/ffs_demo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimation of bilateral migrant flows from bilateral migrant stocks using demographic accounting approaches — ffs_demo","text":"stock_start Matrix migrant stock totals time t. Rows matrix correspond place birth columns place residence time t. Previously argument name m1. stock_end Matrix migrant stock totals time t+1. Rows matrix correspond place birth columns place residence time t+1. Previously argument name m2. births Vector number births time t t+1 region. Previously argument name b_por. deaths Vector number deaths time t t+1 region. Previously argument name d_por. seed Matrix auxiliary data. default set 1 origin-destination combinations. Previously argument name m. stayer_assumption Logical value indicate whether use quasi-independent independent IPFP estimate flows. default uses quasi-independent, .e. set TRUE estimates minimum migration. set FALSE estimates flows independent model used part Azose Raftery (2019). match_global Character string used indicate whether balance change stocks totals changes births deaths. applied match_birthplace_tot_method either rescale rescale-adjust-zero-fb. default uses -demo-adjust rather -demo-adjust think minimises risk negative values. match_birthplace_tot_method Character string passed method argument match_birthplace_tot ensure place birth margins stock tables match. birth_method Character string passed method argument birth_mat. birth_non_negative Logical value passed non_negative argument birth_mat. death_method Character string passed method argument death_mat. verbose Logical value show progress estimation procedure. default FALSE. return Character string used indicate whether return array estimated flows set flow (default), array demographic accounts set account demographic account, list input settings origin-destination matrix set classic","code":""},{"path":"/reference/ffs_demo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimation of bilateral migrant flows from bilateral migrant stocks using demographic accounting approaches — ffs_demo","text":"Estimates migrant transitions flows two sequential migrant stock tables using various methods. See example section possible variations estimation methods. Detail returned object varies depending setting used return argument.","code":""},{"path":"/reference/ffs_demo.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimation of bilateral migrant flows from bilateral migrant stocks using demographic accounting approaches — ffs_demo","text":"Abel Cohen (2019) Bilateral international migration flow estimates 200 countries Scientific Data 6 (1), 1-13 Azose & Raftery (2019) Estimation emigration, return migration, transit migration pairs countries Proceedings National Academy Sciences 116 (1) 116-122 Abel, G. J. (2018). Estimates Global Bilateral Migration Flows Gender 1960 2015. International Migration Review 52 (3), 809–852. Abel, G. J. Sander, N. (2014). Quantifying Global International Migration Flows. Science, 343 (6178) 1520-1522 Abel, G. J. (2013). Estimating Global Migration Flow Tables Using Place Birth. Demographic Research 28, (18) 505-546","code":""},{"path":[]},{"path":"/reference/ffs_demo.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimation of bilateral migrant flows from bilateral migrant stocks using demographic accounting approaches — ffs_demo","text":"Guy J. Abel","code":""},{"path":"/reference/ffs_demo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimation of bilateral migrant flows from bilateral migrant stocks using demographic accounting approaches — ffs_demo","text":"","code":"## ## without births and deaths over period ## # data as in demographic research and science paper papers s1 <- matrix(data = c(1000, 100, 10, 0, 55, 555, 50, 5, 80, 40, 800, 40, 20, 25, 20, 200),              nrow = 4, ncol = 4, byrow = TRUE) s2 <- matrix(data = c(950, 100, 60, 0, 80, 505, 75, 5, 90, 30, 800, 40, 40, 45, 0, 180),              nrow = 4, ncol = 4, byrow = TRUE) b <- d <- rep(0, 4) r <- LETTERS[1:4] dimnames(s1) <- dimnames(s2) <- list(birth =  r, dest = r) names(b) <- names(d) <- r addmargins(s1) #>      dest #> birth    A   B   C   D  Sum #>   A   1000 100  10   0 1110 #>   B     55 555  50   5  665 #>   C     80  40 800  40  960 #>   D     20  25  20 200  265 #>   Sum 1155 720 880 245 3000 addmargins(s2) #>      dest #> birth    A   B   C   D  Sum #>   A    950 100  60   0 1110 #>   B     80 505  75   5  665 #>   C     90  30 800  40  960 #>   D     40  45   0 180  265 #>   Sum 1160 680 935 225 3000 b #> A B C D  #> 0 0 0 0  d #> A B C D  #> 0 0 0 0   # demographic research and science paper example e0 <- ffs_demo(stock_start = s1, stock_end = s2, births = b, deaths = d) e0 #> , , pob = A #>  #>     dest #> orig   A   B  C D #>    A 950   0 50 0 #>    B   0 100  0 0 #>    C   0   0 10 0 #>    D   0   0  0 0 #>  #> , , pob = B #>  #>     dest #> orig  A   B  C D #>    A 55   0  0 0 #>    B 25 505 25 0 #>    C  0   0 50 0 #>    D  0   0  0 5 #>  #> , , pob = C #>  #>     dest #> orig  A  B   C  D #>    A 80  0   0  0 #>    B 10 30   0  0 #>    C  0  0 800  0 #>    D  0  0   0 40 #>  #> , , pob = D #>  #>     dest #> orig  A  B C   D #>    A 20  0 0   0 #>    B  0 25 0   0 #>    C 10 10 0   0 #>    D 10 10 0 180 #>  sum_od(e0) #>      dest #> orig   A  B  C D Sum #>   A    0  0 50 0  50 #>   B   35  0 25 0  60 #>   C   10 10  0 0  20 #>   D   10 10  0 0  20 #>   Sum 55 20 75 0 150  # international migration review paper example s1[,] <- c(100, 20, 10, 20, 10, 55, 40, 25, 10, 25, 140, 20, 0, 10, 65, 200) s2[,] <- c(70, 25, 10, 40, 30, 60, 55, 45, 10, 10, 140, 0, 10, 15, 50, 180) addmargins(s1) #>      dest #> birth   A   B   C   D Sum #>   A   100  10  10   0 120 #>   B    20  55  25  10 110 #>   C    10  40 140  65 255 #>   D    20  25  20 200 265 #>   Sum 150 130 195 275 750 addmargins(s2) #>      dest #> birth   A   B   C   D Sum #>   A    70  30  10  10 120 #>   B    25  60  10  15 110 #>   C    10  55 140  50 255 #>   D    40  45   0 180 265 #>   Sum 145 190 160 255 750  e1 <- ffs_demo(stock_start = s1, stock_end = s2, births = b, deaths = d) sum_od(e1) #>      dest #> orig   A  B C  D Sum #>   A    0 20 0 10  30 #>   B    0  0 0  0   0 #>   C   15 15 0  5  35 #>   D   10 25 0  0  35 #>   Sum 25 60 0 15 100  # international migration review supp. material example # distance matrix dd <- matrix(data = c(0, 5, 50, 500, 5, 0, 45, 495, 50, 45, 0, 450, 500, 495, 450, 0),              nrow = 4, ncol = 4, byrow = TRUE) dimnames(dd) <- list(orig = r, dest = r) dd #>     dest #> orig   A   B   C   D #>    A   0   5  50 500 #>    B   5   0  45 495 #>    C  50  45   0 450 #>    D 500 495 450   0 e2 <- ffs_demo(stock_start = s1, stock_end = s2, births = b, deaths = d, seed = dd) sum_od(e2) #>      dest #> orig   A  B C  D Sum #>   A    0 20 0 10  30 #>   B    0  0 0  0   0 #>   C   15 15 0  5  35 #>   D   10 25 0  0  35 #>   Sum 25 60 0 15 100  ## ## with births and deaths over period ## # demographic research paper example (with births and deaths) s1[,] <- c(1000, 55, 80, 20, 100, 555, 40, 25, 10, 50, 800, 20, 0, 5, 40, 200) s2[,] <- c(1060, 45, 70, 30, 60, 540, 75, 30, 10, 40, 770, 20, 10, 0, 70, 230) b[] <- c(80, 20, 40, 60) d[] <- c(70, 30, 50, 10) e3 <- ffs_demo(stock_start = s1, stock_end = s2,                 births = b, deaths = d,                 match_birthplace_tot_method = \"open-dr\") sum_od(e3) #>      dest #> orig         A         B         C         D       Sum #>   A    0.00000  8.502866 0.0000000  3.695332  12.19820 #>   B   26.42296  0.000000 0.4234563  9.855274  36.70169 #>   C    0.00000 34.183358 0.0000000 25.077888  59.26125 #>   D   11.46761 10.933241 1.3928875  0.000000  23.79374 #>   Sum 37.89057 53.619464 1.8163437 38.628494 131.95487 # makes more sense to use this method e4 <- ffs_demo(stock_start = s1, stock_end = s2,                 births = b, deaths = d,                 match_birthplace_tot_method = \"open\") sum_od(e4) #>      dest #> orig         A         B         C         D       Sum #>   A    0.00000  8.897732 0.0000000  3.852711  12.75044 #>   B   26.81098  0.000000 0.4296748 10.000000  37.24065 #>   C    0.00000 35.677466 0.0000000 26.145924  61.82339 #>   D   11.62571 11.251175 1.4120903  0.000000  24.28898 #>   Sum 38.43669 55.826373 1.8417650 39.998635 136.10346  # science paper  supp. material example b[] <- c(80, 20, 60, 60) e5 <- ffs_demo(stock_start = s1, stock_end = s2, births = b, deaths = d) sum_od(e5) #>      dest #> orig             A         B         C         D        Sum #>   A    0.000000000  3.328563 0.0000000  3.242990   6.571552 #>   B   34.120952437  0.000000 0.5838738  9.809336  44.514162 #>   C    0.004365738 27.127753 0.0000000 25.711331  52.843450 #>   D   12.446119999  9.058478 2.2595262  0.000000  23.764124 #>   Sum 46.571438174 39.514794 2.8434001 38.763657 127.693289  # international migration review supp. material example (with births and deaths) s1[,] <- c(100, 20, 10, 20, 10, 55, 40, 25, 10, 25, 140, 20, 0, 10, 65, 200) s2[,] <- c(75, 20, 30, 30, 25, 45, 40, 30, 5, 30, 150, 20, 0, 15, 60, 230) b[] <- c(10, 50, 25, 60) d[] <- c(30, 10, 40, 10) e6 <- ffs_demo(stock_start = s1, stock_end = s2, births = b, deaths = d) #> Too many births in region B. #>  #>                        ... Subtracted births proportionally for this region. Might want to check the input data. sum_od(e6) #>      dest #> orig         A        B         C        D       Sum #>   A    0.00000 8.126216  0.000000 0.000000  8.126216 #>   B   15.45535 0.000000 18.081832 5.712864 39.250050 #>   C    0.00000 1.125679  0.000000 0.000000  1.125679 #>   D   17.66941 0.000000  8.043363 0.000000 25.712770 #>   Sum 33.12476 9.251895 26.125195 5.712864 74.214715  # scientific data 2019 paper s1[] <- c(100, 80, 30, 60, 10, 180, 10, 70, 10, 10, 140, 10, 0, 90, 40, 160) s2[] <- c(95, 75, 55, 35, 5, 225, 0, 25, 15, 5, 115, 25, 5, 55, 50, 215) b[] <- c(0, 0, 0, 0) d[] <- c(0, 0, 0, 0) e7 <- ffs_demo(stock_start = s1, stock_end = s2, births = b, deaths = d) sum_od(e7) #>      dest #> orig          A  B         C         D Sum #>   A    0.000000  5  7.857143 22.142857  35 #>   B    7.142857  0 12.142857 40.714286  60 #>   C   17.857143  5  0.000000  7.142857  30 #>   D    0.000000 35  0.000000  0.000000  35 #>   Sum 25.000000 45 20.000000 70.000000 160"},{"path":"/reference/ffs_diff.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimation of bilateral migrant flows from bilateral migrant stocks using stock differencing approaches — ffs_diff","title":"Estimation of bilateral migrant flows from bilateral migrant stocks using stock differencing approaches — ffs_diff","text":"Estimates migrant transitions flows two sequential migrant stock tables using differencing approaches commonly used economists.","code":""},{"path":"/reference/ffs_diff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimation of bilateral migrant flows from bilateral migrant stocks using stock differencing approaches — ffs_diff","text":"","code":"ffs_diff(   stock_start,   stock_end,   decrease = \"return\",   include_native_born = FALSE )"},{"path":"/reference/ffs_diff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimation of bilateral migrant flows from bilateral migrant stocks using stock differencing approaches — ffs_diff","text":"stock_start Matrix migrant stock totals time t. Rows matrix correspond place birth columns place residence time t stock_end Matrix migrant stock totals time t+1. Rows matrix correspond place birth columns place residence time t+1. decrease treat decreases bilateral stocks t t+1 period (avoid negative bilateral flow estimates). See details possible options. Default return include_native_born Logical value indicate whether include diagonal elements stock_start stock_end. Default FALSE - include.","code":""},{"path":"/reference/ffs_diff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimation of bilateral migrant flows from bilateral migrant stocks using stock differencing approaches — ffs_diff","text":"Estimates migrant transitions flows two sequential migrant stock tables. decrease = \"zero\" decreases migrant stocks period set zero, following approach Bertoli Fernandez-Huertas Moraga (2015) decrease = \"return\" decreases migrant stocks assumed correspond return flows back place birth, following approach Beine Parsons (2015)","code":""},{"path":"/reference/ffs_diff.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimation of bilateral migrant flows from bilateral migrant stocks using stock differencing approaches — ffs_diff","text":"Beine, Michel, Simone Bertoli, Jesús Fernández-Huertas Moraga. (2016). Practitioners’ Guide Gravity Models International Migration. World Economy 39(4):496–512.","code":""},{"path":[]},{"path":"/reference/ffs_diff.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimation of bilateral migrant flows from bilateral migrant stocks using stock differencing approaches — ffs_diff","text":"Guy J. Abel","code":""},{"path":"/reference/ffs_diff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimation of bilateral migrant flows from bilateral migrant stocks using stock differencing approaches — ffs_diff","text":"","code":"s1 <- matrix(data = c(100, 10, 10, 0, 20, 55, 25, 10, 10, 40, 140, 65, 20, 25, 20, 200),              nrow = 4, ncol = 4, byrow = TRUE) s2 <- matrix(data = c(75, 25, 5, 15, 20, 45, 30, 15, 30, 40, 150, 35, 10, 50, 5, 200),              nrow = 4, ncol = 4, byrow = TRUE) r <- LETTERS[1:4] dimnames(s1) <- dimnames(s2) <- list(pob = r, por = r) s1; s2 #>    por #> pob   A  B   C   D #>   A 100 10  10   0 #>   B  20 55  25  10 #>   C  10 40 140  65 #>   D  20 25  20 200 #>    por #> pob  A  B   C   D #>   A 75 25   5  15 #>   B 20 45  30  15 #>   C 30 40 150  35 #>   D 10 50   5 200  ffs_diff(stock_start = s1, stock_end = s2, decrease = \"zero\") #>     dest #> orig  A  B C  D #>    A  0 15 0 15 #>    B  0  0 5  5 #>    C 20  0 0  0 #>    D  0 25 0  0 ffs_diff(stock_start = s1, stock_end = s2, decrease = \"return\") #>     dest #> orig  A  B  C  D #>    A  0 15  0 25 #>    B  0  0  5  5 #>    C 25  0  0 15 #>    D  0 25 30  0"},{"path":"/reference/ffs_rates.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimation of bilateral migrant flows from bilateral migrant stocks using rates approaches — ffs_rates","title":"Estimation of bilateral migrant flows from bilateral migrant stocks using rates approaches — ffs_rates","text":"Estimates migrant transitions flows two sequential migrant stock tables using approached based rates.","code":""},{"path":"/reference/ffs_rates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimation of bilateral migrant flows from bilateral migrant stocks using rates approaches — ffs_rates","text":"","code":"ffs_rates(stock_start = NULL, stock_end = NULL, M = NULL, method = \"dennett\")"},{"path":"/reference/ffs_rates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimation of bilateral migrant flows from bilateral migrant stocks using rates approaches — ffs_rates","text":"stock_start Matrix migrant stock totals time t. Rows matrix correspond place birth columns place residence time t stock_end Matrix migrant stock totals time t+1. Rows matrix correspond place birth columns place residence time t+1. M Numeric value global sum migration flows, used dennett approach. method Method estimate flows. Can take values dennett rogers-von-rabenau. See details section information. Uses dennett default.","code":""},{"path":"/reference/ffs_rates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimation of bilateral migrant flows from bilateral migrant stocks using rates approaches — ffs_rates","text":"Estimates migrant transitions flows based migration rates. method = \"dennett\" migration derived matrix supplied stock_start. Dennett uses bilateral migrant stocks beginning period. Rates multiplied global migration flows supplied M. method = \"rogers-von-rabenau\" matrix growth rates derived changes initial populations stock stock_start obtain stock_end; $$P^{t+1} = g P^{t}$$ multiplied corresponding populations risk stock_start. Can result negative flows.","code":""},{"path":"/reference/ffs_rates.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimation of bilateral migrant flows from bilateral migrant stocks using rates approaches — ffs_rates","text":"Dennett, . (2015). Estimating Annual Time Series Global Migration Flows - Alternative Methodology Using Migrant Stock Data. Global Dynamics: Approaches Complexity Science, 125–142. https://doi.org/10.1002/9781118937464.ch7 Rogers, ., & Von Rabenau, B. (1971). Estimation interregional migration streams place--birth--residence data. Demography, 8(2), 185–194.","code":""},{"path":[]},{"path":"/reference/ffs_rates.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimation of bilateral migrant flows from bilateral migrant stocks using rates approaches — ffs_rates","text":"Guy J. Abel","code":""},{"path":"/reference/ffs_rates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimation of bilateral migrant flows from bilateral migrant stocks using rates approaches — ffs_rates","text":"","code":"s1 <- matrix(data = c(100, 10, 10, 0, 20, 55, 25, 10, 10, 40, 140, 65, 20, 25, 20, 200),              nrow = 4, ncol = 4, byrow = TRUE) s2 <- matrix(data = c(75, 25, 5, 15, 20, 45, 30, 15, 30, 40, 150, 35, 10, 50, 5, 200),              nrow = 4, ncol = 4, byrow = TRUE) r <- LETTERS[1:4] dimnames(s1) <- dimnames(s2) <- list(pob = r, por = r) s1; s2 #>    por #> pob   A  B   C   D #>   A 100 10  10   0 #>   B  20 55  25  10 #>   C  10 40 140  65 #>   D  20 25  20 200 #>    por #> pob  A  B   C   D #>   A 75 25   5  15 #>   B 20 45  30  15 #>   C 30 40 150  35 #>   D 10 50   5 200  # calculate total migration flows for dennett approach n <- colSums(s2) - colSums(s1)  ffs_rates(stock_start = s1, M =  sum(abs(n)), method = \"dennett\" ) #>     dest #> orig        A        B        C         D #>    A 0.000000 2.352941 2.352941  0.000000 #>    B 4.705882 0.000000 5.882353  2.352941 #>    C 2.352941 9.411765 0.000000 15.294118 #>    D 4.705882 5.882353 4.705882  0.000000 ffs_rates(stock_start = s1, stock_end = s2, method = \"rogers-von-rabenau\" ) #>     dest #> orig          A         B         C         D #>    A   0.000000 26.584620 -10.22741  24.16653 #>    B   3.474032  0.000000  11.71799  20.12425 #>    C  34.097610 -0.125662   0.00000 -51.85130 #>    D -12.047899 38.857311 -24.36993   0.00000"},{"path":"/reference/index_age.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary indices of migration age profile — index_age","title":"Summary indices of migration age profile — index_age","text":"Summary measures migration age profiles proposed Rogers (1975), Bell et. al. (2002), Bell Muhidin (2009) Bernard, Bell Charles-Edwards (2014)","code":""},{"path":"/reference/index_age.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary indices of migration age profile — index_age","text":"","code":"index_age(   d = NULL,   age,   mi,   age_min = 5,   age_max = 65,   breadth = 5,   age_col = \"age\",   mi_col = \"mi\",   long = TRUE )"},{"path":"/reference/index_age.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Summary indices of migration age profile — index_age","text":"Rogers, . (1975). Introduction Multiregional Mathematical Demography. Wiley. Bell, M., Blake, M., Boyle, P., Duke-Williams, O., Rees, P. H., Stillwell, J., & Hugo, G. J. (2002). Cross-national comparison internal migration: issues measures. Journal Royal Statistical Society: Series (Statistics Society), 165(3), 435–464. https://doi.org/10.1111/1467-985X.00247 Bell, M., & Muhidin, S. (2009). Cross-National Comparisons Internal Migration (Research Paper 2009/30; Human Development Reports). Bernard, ., Bell, M., & Charles-Edwards, E. (2014). Improved measures cross-national comparison age profiles internal migration. Population Studies, 68(2), 179–195. https://doi.org/10.1080/00324728.2014.890243","code":""},{"path":"/reference/index_age.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary indices of migration age profile — index_age","text":"d Data frame age specific migration intensities. used, ensure correct column names passed age_col mi_col. age Numeric vector ages. Used d = NULL. mi Numeric vector migration intensities corresponding value age. Used d = NULL. age_min Numeric value minimum age peak calculations. Taken 5 default. age_max Numeric value maximum age peak calculations. Taken 65 default. breadth Numeric value number age groups around peak used breadth_peak measure. Default 5. age_col Character string age column name (d provided) mi_col Character string migration intensities column name (d provided) long Logical return long data frame index values one column","code":""},{"path":"/reference/index_age.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary indices of migration age profile — index_age","text":"tibble 8 summary measures gmr Gross migraproduction rate Rogers (1975) peak_mi Peak migration intensities, Bell et. al. (2002) peak_age Corresponding age peak_mi, Bell et. al. (2002) peak_breadth Breadth peak, Bell Muhidin (2009) peak_share Percentage share peak breadth migration, Bell Muhidin (2009) murc Maximum upward rate change Bernard, Bell Charles-Edwards (2014) mdrc Maximum downward rate change Bernard, Bell Charles-Edwards (2014) asymmetry Asymmetry murc mudc, Bernard, Bell Charles-Edwards (2014)","code":""},{"path":"/reference/index_age.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary indices of migration age profile — index_age","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union ipumsi_age %>%   filter(sample == \"BRA2000\") %>%   mutate(mi = migrants/population) %>%   index_age() #> # A tibble: 8 × 2 #>   measure        value #>   <chr>          <dbl> #> 1 gmr            7.82  #> 2 peak_mi       14.3   #> 3 peak_age      24     #> 4 peak_breadth 147.    #> 5 peak_share    18.8   #> 6 murc          19     #> 7 mdrc          32     #> 8 asymmetry      0.594    ipumsi_age %>%   group_by(sample) %>%   mutate(mi = migrants/population) %>%   index_age(long = FALSE) #> # A tibble: 2 × 9 #>   sample    gmr peak_mi peak_age peak_breadth peak_share  murc  mdrc asymmetry #>   <chr>   <dbl>   <dbl>    <dbl>        <dbl>      <dbl> <dbl> <dbl>     <dbl> #> 1 BRA2000  7.82    14.3       24         147.       18.8    19    32     0.594 #> 2 FRA2006  9.55    29.5       26         295.       30.8    18    30     0.6"},{"path":"/reference/index_age_rc.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary indices of age migration profile based on parameters from a Rogers and Castro schedule — index_age_rc","title":"Summary indices of age migration profile based on parameters from a Rogers and Castro schedule — index_age_rc","text":"Summary indices age migration profile based parameters Rogers Castro schedule","code":""},{"path":"/reference/index_age_rc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary indices of age migration profile based on parameters from a Rogers and Castro schedule — index_age_rc","text":"","code":"index_age_rc(pars = NULL, long = TRUE)"},{"path":"/reference/index_age_rc.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Summary indices of age migration profile based on parameters from a Rogers and Castro schedule — index_age_rc","text":"Rogers, ., & Castro, L. J. (1981). Model Migration Schedules. IIASA Research Report (Vol. 81, Issue RR-81-30). http://webarchive.iiasa.ac./Admin/PUB/Documents/RR-81-030.pdf","code":""},{"path":"/reference/index_age_rc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary indices of age migration profile based on parameters from a Rogers and Castro schedule — index_age_rc","text":"pars Named vector parameters parameters Rogers Castro schedule long Logical return long data frame index values one column","code":""},{"path":"/reference/index_age_rc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary indices of age migration profile based on parameters from a Rogers and Castro schedule — index_age_rc","text":"tibble least five summary measures","code":""},{"path":"/reference/index_age_rc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary indices of age migration profile based on parameters from a Rogers and Castro schedule — index_age_rc","text":"","code":"library(dplyr) library(tibble) rc_model_fund %>%   deframe() %>%   index_age_rc() #> # A tibble: 5 × 2 #>   measure           value #>   <chr>             <dbl> #> 1 peaking          20     #> 2 child_dependency  0.333 #> 3 labor_dependency  3     #> 4 labor_asymmetry   4     #> 5 regularity        1"},{"path":"/reference/index_connectivity.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary indices of migration connectivity — index_connectivity","title":"Summary indices of migration connectivity — index_connectivity","text":"Summary indices migration connectivity","code":""},{"path":"/reference/index_connectivity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary indices of migration connectivity — index_connectivity","text":"","code":"index_connectivity(   m = NULL,   gini_orig_all = FALSE,   gini_dest_all = FALSE,   gini_corrected = TRUE,   orig = \"orig\",   dest = \"dest\",   flow = \"flow\",   long = TRUE )"},{"path":"/reference/index_connectivity.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Summary indices of migration connectivity — index_connectivity","text":"Bell, M., Blake, M., Boyle, P., Duke-Williams, O., Rees, P. H., Stillwell, J., & Hugo, G. J. (2002). Cross-national comparison internal migration: issues measures. Journal Royal Statistical Society: Series (Statistics Society), 165(3), 435–464. https://doi.org/10.1111/1467-985X.00247 Rogers, ., & Raymer, J. (1998). Spatial Focus US Interstate Migration Flows. International Journal Population Geography, 4(1), 63–80. https://doi.org/10.1002/(SICI)1099-1220(199803)4%3A1<63%3A%3AAID-IJPG87>3.0.CO%3B2-U Rogers, ., & Sweeney, S. (1998). Measuring Spatial Focus Migration Patterns. Professional Geographer, 50(2), 232–242. Plane, D., & Mulligan, G. F. (1997). Measuring spatial focusing migration system. Demography, 34(2), 251–262.","code":""},{"path":"/reference/index_connectivity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary indices of migration connectivity — index_connectivity","text":"m matrix data frame origin-destination flows. matrix first second dimensions correspond origin destination respectively. data frame ensure correct column names passed orig, dest flow. gini_orig_all Logical include gini index values origin regions. Default FALSE. gini_dest_all Logical include gini index values destination regions. Default FALSE. gini_corrected Logical use corrected denominator Gini index Bell (2002) original David . Plane Mulligan (1997) orig Character string origin column name (m data frame rather matrix) dest Character string destination column name (m data frame rather matrix) flow Character string flow column name (m data frame rather matrix) long Logical return long data frame index values one column","code":""},{"path":"/reference/index_connectivity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary indices of migration connectivity — index_connectivity","text":"tibble 12 summary measures: connectivity Migration connectivity index Bell et. al. (2002) share non-zero flows. value 0 means connections (zero flows) 1 shows regions connected migrants. inequality_equal Migration inequality index Bell et. al. (2002) based distributions flows compared equal distributions expected flows . value 0 shows complete equality flows 1 shows maximum inequality. inequality_sim Migration inequality index Bell et. al. (2002) based distributions flows compared distributions expected flows Poisson regression independence fit flow ~ orig +  dest. value 0 shows complete equality flows 1 shows maximum inequality. gini_total Overall concentration migration Bell (2002), corrected Plane Mulligan (1997). value 0 means spatial focusing 1 shows migrants found one single flow. Calculated using migration.indices::migration.gini.total() gini_orig_standardized Relative extent origin selections -migrations spatially focused. value 0 means spatial focusing 1 shows maximum focusing. Adapted migration.indices::migration.gini.row.standardized(). gini_dest_standardized Relative extent destination selections -migrations spatially focused. value 0 means spatial focusing 1 shows maximum focusing. Adapted migration.indices::migration.gini.col.standardized(). mwg_orig Origin spatial focusing, Bell et. al. (2002). Calculated using migration.indices::migration.weighted.gini.() mwg_dest Destination spatial focusing, Bell et. al. (2002). Calculated using migration.indices::migration.weighted.gini.() mwg_mean Mean spatial focusing, Bell et. al. (2002). Average origin destination migration weighted Gini indices (mwg_orig mwg_dest). value 0 means spatial focusing 1 shows migrants found one region. Calculated using migration.indices::migration.weighted.gini.mean() cv Coefficient variation Rogers Raymer (1998). acv Aggregated system-wide coefficient variation Rogers Sweeney (1998), using migration.indices::migration.acv()","code":""},{"path":"/reference/index_connectivity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary indices of migration connectivity — index_connectivity","text":"","code":"library(dplyr) korea_gravity %>%   filter(year == 2020) %>%   select(orig, dest, flow) %>%   index_connectivity() #> # A tibble: 11 × 2 #>    measure                  value #>    <chr>                    <dbl> #>  1 connectivity            1      #>  2 inequality_equal        0.541  #>  3 inequality_sim          0.281  #>  4 gini_total              0.709  #>  5 gini_orig_standardized  0.0493 #>  6 gini_dest_standardized  0.0517 #>  7 mwg_orig                0.0370 #>  8 mwg_dest                0.0389 #>  9 mwg_mean                0.0379 #> 10 cv                     17.9    #> 11 acv                     3.43"},{"path":"/reference/index_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary indices of migration distance — index_distance","title":"Summary indices of migration distance — index_distance","text":"Summary indices migration distance","code":""},{"path":"/reference/index_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary indices of migration distance — index_distance","text":"","code":"index_distance(   m = NULL,   d = NULL,   orig = \"orig\",   dest = \"dest\",   flow = \"flow\",   dist = \"dist\",   long = TRUE )"},{"path":"/reference/index_distance.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Summary indices of migration distance — index_distance","text":"Bell, M., Blake, M., Boyle, P., Duke-Williams, O., Rees, P. H., Stillwell, J., & Hugo, G. J. (2002). Cross-national comparison internal migration: issues measures. Journal Royal Statistical Society: Series (Statistics Society), 165(3), 435–464. https://doi.org/10.1111/1467-985X.00247","code":""},{"path":"/reference/index_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary indices of migration distance — index_distance","text":"m matrix data frame origin-destination flows. matrix first second dimensions correspond origin destination respectively. data frame ensure correct column names passed orig, dest flow. d matrix data frame origin-destination distances. matrix first second dimensions correspond origin destination respectively. data frame ensure correct column names passed orig, dest dist. Region names match m. orig Character string origin column name (m data frame rather matrix) dest Character string destination column name (m data frame rather matrix) flow Character string flow column name (m data frame rather matrix) dist Character string distance column name (dist data frame rather matrix) long Logical return long data frame index values one column","code":""},{"path":"/reference/index_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary indices of migration distance — index_distance","text":"tibble 3 summary measures mean Mean migration distance Bell et. al. (2002) - discussed text given Table 6 median Mean migration distance Bell et. al. (2002) decay Distance decay parameter obtained Poisson regression model (flow ~ orig + dest + log(dist))","code":""},{"path":"/reference/index_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary indices of migration distance — index_distance","text":"","code":"# single year index_distance(   m = subset(korea_gravity, year == 2020),   d = subset(korea_gravity, year == 2020),   dist = \"dist_cent\" ) #> # A tibble: 3 × 2 #>   measure   value #>   <chr>     <dbl> #> 1 mean    113.    #> 2 median   74.8   #> 3 decay    -0.920  # multiple years library(dplyr) library(tidyr) library(purrr)  korea_gravity %>%   select(year, orig, dest, flow, dist_cent) %>%   group_nest(year) %>%   mutate(i = map2(     .x = data, .y = data,     .f = ~index_distance(m = .x, d = .y, dist = \"dist_cent\", long = FALSE)   )) %>%   select(-data) %>%   unnest(i) #> # A tibble: 9 × 4 #>    year  mean median  decay #>   <int> <dbl>  <dbl>  <dbl> #> 1  2012  115.   90.8 -0.844 #> 2  2013  115.   90.3 -0.856 #> 3  2014  116.   90.3 -0.877 #> 4  2015  116.   90.3 -0.893 #> 5  2016  115.   78.7 -0.886 #> 6  2017  115.   79.0 -0.904 #> 7  2018  114.   77.9 -0.906 #> 8  2019  115.   79.3 -0.903 #> 9  2020  113.   74.8 -0.920"},{"path":"/reference/index_impact.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary indices of migration impact — index_impact","title":"Summary indices of migration impact — index_impact","text":"Summary indices migration impact","code":""},{"path":"/reference/index_impact.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary indices of migration impact — index_impact","text":"","code":"index_impact(   m,   p,   pop = \"pop\",   reg = \"region\",   orig = \"orig\",   dest = \"dest\",   flow = \"flow\",   long = TRUE )"},{"path":"/reference/index_impact.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Summary indices of migration impact — index_impact","text":"Bell, M., Blake, M., Boyle, P., Duke-Williams, O., Rees, P. H., Stillwell, J., & Hugo, G. J. (2002). Cross-national comparison internal migration: issues measures. Journal Royal Statistical Society: Series (Statistics Society), 165(3), 435–464. https://doi.org/10.1111/1467-985X.00247 Shryock, H. S., & Siegel, J. S. (1976). Methods Materials Demography. (E. G. Stockwell (ed.); Condensed). Academic Press. United Nations Department Economic Social Affairs Population Division. (1970). Methods measuring internal migration. United Nations Department Economic Social Affairs Population Division - 1970 - Methods measuring internal migration https://www.un.org/development/desa/pd/sites/www.un.org.development.desa.pd/files/files/documents/2020/Jan/manual_vi_methods_of_measuring_internal_migration.pdf","code":""},{"path":"/reference/index_impact.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary indices of migration impact — index_impact","text":"m matrix data frame origin-destination flows. matrix first second dimensions correspond origin destination respectively. data frame ensure correct column names passed orig, dest flow. p data frame named vector total population. data frame, column populations labelled using pop region names labelled reg. pop Character string population column name reg Character string region column name. Must match dimension names values origin destination columns m. orig Character string origin column name (m data frame rather matrix) dest Character string destination column name (m data frame rather matrix) flow Character string flow column name (m data frame rather matrix) long Logical return long data frame index values one column","code":""},{"path":"/reference/index_impact.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary indices of migration impact — index_impact","text":"tibble 4 summary measures effectivness Migration effectiveness index (MEI) Shryock et al. (1975). Values range 0 100. High values indicate migration efficient mechanism population redistribution, generating large net migration. Conversely, low values denote migration closely balanced, leading comparatively little redistribution. anmr Aggregate net migration rate Bell et. al. (2002). population weighted version mei. perference Index preference, given UN DESA (1983). Bachi (1957) Shryock et al. (1975) - measures size migration compared expected flows based unifrom migration. Can go 0 infinity velocity Index velocity, given UN DESA (1983). Bogue, Shryock, Jr. & Hoermann (1957) - measures size migration compared expected flows based population size alone. Can go 0 infinity","code":""},{"path":"/reference/index_impact.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary indices of migration impact — index_impact","text":"","code":"# single year library(dplyr) m <- korea_gravity %>%   filter(year == 2020,          orig != dest) %>%   select(orig, dest, flow) m #> # A tibble: 272 × 3 #>    orig  dest                flow #>    <chr> <chr>              <int> #>  1 Seoul Busan              20990 #>  2 Seoul Daegu              15216 #>  3 Seoul Incheon            38409 #>  4 Seoul Gwangju            11232 #>  5 Seoul Daejeon            15116 #>  6 Seoul Ulsan               7062 #>  7 Seoul Sejong              5107 #>  8 Seoul Gyeonggi-do       266375 #>  9 Seoul Gangwon-do         20048 #> 10 Seoul Chungcheongbuk-do  14574 #> # ℹ 262 more rows p <- korea_gravity %>%   filter(year == 2020) %>%   distinct(dest, dest_pop) p #> # A tibble: 17 × 2 #>    dest              dest_pop #>    <chr>                <dbl> #>  1 Seoul                9.67  #>  2 Busan                3.39  #>  3 Daegu                2.42  #>  4 Incheon              2.94  #>  5 Gwangju              1.45  #>  6 Daejeon              1.46  #>  7 Ulsan                1.14  #>  8 Sejong               0.356 #>  9 Gyeonggi-do         13.4   #> 10 Gangwon-do           1.54  #> 11 Chungcheongbuk-do    1.60  #> 12 Chungcheongnam-do    2.12  #> 13 Jeollabuk-do         1.80  #> 14 Jeollanam-do         1.85  #> 15 Gyeongsangbuk-do     2.64  #> 16 Gyeongsangnam-do     3.34  #> 17 Jeju                 0.675 index_impact(m = m, p = p, pop = \"dest_pop\", reg = \"dest\") #> # A tibble: 4 × 2 #>   measure            value #>   <chr>              <dbl> #> 1 effectivness        7.67 #> 2 anmr           375133.   #> 3 preference        375.   #> 4 velocity     18339531.    # multiple years library(tidyr) library(purrr)  korea_gravity %>%   select(year, orig, dest, flow, dest_pop) %>%   group_nest(year) %>%   mutate(m = map(.x = data, .f = ~select(.x, orig, dest, flow)),          p = map(.x = data, .f = ~distinct(.x, dest, dest_pop)),          i = map2(.x = m, .y = p,                   .f = ~index_impact(                     m = .x, p = .y, pop = \"dest_pop\", reg = \"dest\", long = FALSE                   ))) %>%   select(-data, -m, -p) %>%   unnest(i) #> # A tibble: 9 × 5 #>    year effectivness    anmr preference  velocity #>   <int>        <dbl>   <dbl>      <dbl>     <dbl> #> 1  2012         6.07 299565.       409. 20186642. #> 2  2013         5.72 270956.       371. 17602058. #> 3  2014         5.36 261867.       434. 21183582. #> 4  2015         7.73 382561.       459. 22714406. #> 5  2016         8.47 402031.       401. 19034527. #> 6  2017         7.99 371841.       417. 19398445. #> 7  2018         9.29 435327.       398. 18672576. #> 8  2019         6.94 319291.       391. 18005614. #> 9  2020         7.67 375133.       375. 18339531."},{"path":"/reference/index_intensity.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary indices of migration intensity — index_intensity","title":"Summary indices of migration intensity — index_intensity","text":"Summary indices migration intensity","code":""},{"path":"/reference/index_intensity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary indices of migration intensity — index_intensity","text":"","code":"index_intensity(mig_total = NULL, pop_total = NULL, n = NULL, long = TRUE)"},{"path":"/reference/index_intensity.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Summary indices of migration intensity — index_intensity","text":"Bell, M., Blake, M., Boyle, P., Duke-Williams, O., Rees, P. H., Stillwell, J., & Hugo, G. J. (2002). Cross-national comparison internal migration: issues measures. Journal Royal Statistical Society: Series (Statistics Society), 165(3), 435–464. https://doi.org/10.1111/1467-985X.00247 Courgeau, D. (1973). Migrants et migrations. Population, 28(1), 95–129. https://doi.org/10.2307/1530972 Bernard, ., Rowe, F., Bell, M., Ueffing, P., Charles-Edwards, E., & Zhu, Y. (2017). Comparing internal migration across countries Latin America: multidimensional approach. Plos One, 12(3), e0173895. https://doi.org/10.1371/journal.pone.0173895","code":""},{"path":"/reference/index_intensity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary indices of migration intensity — index_intensity","text":"mig_total Numeric value total number migrations. pop_total Numeric value total population. n Numeric value number regions used definition migration mig_total. long Logical return long data frame index values one column","code":""},{"path":"/reference/index_intensity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary indices of migration intensity — index_intensity","text":"tibble 2 summary measures cmp Crude migration probability Bell et. al. (2002), sometimes known crude migration intensity, e.g. Bernard (2017) courgeau_k Intensity measure Courgeau (1973)","code":""},{"path":"/reference/index_intensity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary indices of migration intensity — index_intensity","text":"","code":"# single year library(dplyr) m <- korea_gravity %>%   filter(year == 2020,          orig != dest) m #> # A tibble: 272 × 20 #>    orig  dest    year   flow dist_cent dist_min dist_pw contig orig_pop dest_pop #>    <chr> <chr>  <int>  <int>     <dbl>    <dbl>   <dbl> <lgl>     <dbl>    <dbl> #>  1 Seoul Busan   2020  20990     319.     294.    324.  FALSE      9.67    3.39  #>  2 Seoul Daegu   2020  15216     241.     209.    236.  FALSE      9.67    2.42  #>  3 Seoul Inche…  2020  38409      44.1      0      25.0 TRUE       9.67    2.94  #>  4 Seoul Gwang…  2020  11232     266.     244.    265.  FALSE      9.67    1.45  #>  5 Seoul Daeje…  2020  15116     139.     109.    138.  FALSE      9.67    1.46  #>  6 Seoul Ulsan   2020   7062     300.     263.    307.  FALSE      9.67    1.14  #>  7 Seoul Sejong  2020   5107     112.      79.6   117.  FALSE      9.67    0.356 #>  8 Seoul Gyeon…  2020 266375      17.9      0      13.2 TRUE       9.67   13.4   #>  9 Seoul Gangw…  2020  20048     116.      34.3   113.  FALSE      9.67    1.54  #> 10 Seoul Chung…  2020  14574     118.      57.4   108.  FALSE      9.67    1.60  #> # ℹ 262 more rows #> # ℹ 10 more variables: orig_area <units>, dest_area <units>, orig_gdp_pc <dbl>, #> #   orig_ginc_pc <dbl>, orig_iinc_pc <dbl>, orig_pconsum_pc <dbl>, #> #   dest_gdp_pc <dbl>, dest_ginc_pc <dbl>, dest_iinc_pc <dbl>, #> #   dest_pconsum_pc <dbl> p <- korea_gravity %>%   filter(year == 2020) %>%   distinct(dest, dest_pop) p #> # A tibble: 17 × 2 #>    dest              dest_pop #>    <chr>                <dbl> #>  1 Seoul                9.67  #>  2 Busan                3.39  #>  3 Daegu                2.42  #>  4 Incheon              2.94  #>  5 Gwangju              1.45  #>  6 Daejeon              1.46  #>  7 Ulsan                1.14  #>  8 Sejong               0.356 #>  9 Gyeonggi-do         13.4   #> 10 Gangwon-do           1.54  #> 11 Chungcheongbuk-do    1.60  #> 12 Chungcheongnam-do    2.12  #> 13 Jeollabuk-do         1.80  #> 14 Jeollanam-do         1.85  #> 15 Gyeongsangbuk-do     2.64  #> 16 Gyeongsangnam-do     3.34  #> 17 Jeju                 0.675 index_intensity(mig_total = sum(m$flow), pop_total = sum(p$dest_pop*1e6), n = nrow(p)) #> # A tibble: 2 × 2 #>   measure    value #>   <chr>      <dbl> #> 1 cmp        4.89  #> 2 courgeau_k 0.863  # multiple years library(tidyr) library(purrr)  mm <- korea_gravity  %>%  filter(orig != dest) %>%   group_by(year) %>%   summarise(m = sum(flow)) mm #> # A tibble: 9 × 2 #>    year       m #>   <int>   <int> #> 1  2012 2512740 #> 2  2013 2423429 #> 3  2014 2507796 #> 4  2015 2551424 #> 5  2016 2453342 #> 6  2017 2410930 #> 7  2018 2429184 #> 8  2019 2384948 #> 9  2020 2534114  pp <- korea_gravity %>%   group_by(year) %>%   distinct(dest, dest_pop) %>%   summarise(p = sum(dest_pop)*1e6,             n = n_distinct(dest)) pp #> # A tibble: 9 × 3 #>    year        p     n #>   <int>    <dbl> <int> #> 1  2012 50948272    17 #> 2  2013 51141463    17 #> 3  2014 51327916    17 #> 4  2015 51529338    17 #> 5  2016 51696216    17 #> 6  2017 51778544    17 #> 7  2018 51826059    17 #> 8  2019 51849861    17 #> 9  2020 51829023    17  library(purrr) library(tidyr) mm %>%   left_join(pp) %>%   mutate(i = pmap(     .l = list(m, p, n),     .f = ~index_intensity(mig_total = ..1, pop_total = ..2,n = ..3, long = FALSE)   )) %>%   unnest(cols = i) #> Joining with `by = join_by(year)` #> # A tibble: 9 × 6 #>    year       m        p     n   cmp courgeau_k #>   <int>   <int>    <dbl> <int> <dbl>      <dbl> #> 1  2012 2512740 50948272    17  4.93      0.870 #> 2  2013 2423429 51141463    17  4.74      0.836 #> 3  2014 2507796 51327916    17  4.89      0.862 #> 4  2015 2551424 51529338    17  4.95      0.874 #> 5  2016 2453342 51696216    17  4.75      0.838 #> 6  2017 2410930 51778544    17  4.66      0.822 #> 7  2018 2429184 51826059    17  4.69      0.827 #> 8  2019 2384948 51849861    17  4.60      0.812 #> 9  2020 2534114 51829023    17  4.89      0.863"},{"path":"/reference/indian_sub.html","id":null,"dir":"Reference","previous_headings":"","what":"Lifetime migration totals for states and zones in the Indian 1901 to 1931 — indian_sub","title":"Lifetime migration totals for states and zones in the Indian 1901 to 1931 — indian_sub","text":"Lifetime migration (stock) totals India","code":""},{"path":"/reference/indian_sub.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lifetime migration totals for states and zones in the Indian 1901 to 1931 — indian_sub","text":"","code":"indian_sub"},{"path":"/reference/indian_sub.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Lifetime migration totals for states and zones in the Indian 1901 to 1931 — indian_sub","text":"Data frame 164 rows 7 columns: zone Zone state. cases state zone entity state Indian state sex Migrant sex in_migrants -migrant total based birthplace out_migrants -migrant total based birthplace net_migrants Net migrant total based birthplace","code":""},{"path":"/reference/indian_sub.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Lifetime migration totals for states and zones in the Indian 1901 to 1931 — indian_sub","text":"Zachariah, K. C. (1964). Historical Study Internal Migration Indian Sub-Continent 1901-1931. (Vol. 19). Asia Publishing House. Scraped https://archive.org/details/.ernet.dli.2015.130424/page/n73/mode/2up","code":""},{"path":"/reference/ipf2.html","id":null,"dir":"Reference","previous_headings":"","what":"Iterative proportional fitting routine for the indirect estimation of origin-destination migration flow table with known margins. — ipf2","title":"Iterative proportional fitting routine for the indirect estimation of origin-destination migration flow table with known margins. — ipf2","text":"ipf2 function finds maximum likelihood estimates fitted values log-linear model: $$\\log y_{ij} = \\log \\alpha_{} + \\log \\beta_{j} + \\log m_{ij} $$ \\(m_{ij}\\) set prior estimates \\(y_{ij}\\) complex one fitted.","code":""},{"path":"/reference/ipf2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Iterative proportional fitting routine for the indirect estimation of origin-destination migration flow table with known margins. — ipf2","text":"","code":"ipf2(   row_tot = NULL,   col_tot = NULL,   m = matrix(1, length(row_tot), length(col_tot)),   tol = 1e-05,   maxit = 500,   verbose = FALSE )"},{"path":"/reference/ipf2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Iterative proportional fitting routine for the indirect estimation of origin-destination migration flow table with known margins. — ipf2","text":"row_tot Vector origin totals constrain sum imputed cell rows. col_tot Vector destination totals constrain sum imputed cell columns. m Matrix auxiliary data. default set 1 origin-destination combinations. tol Numeric value tolerance level used parameter estimation. maxit Numeric value maximum number iterations used parameter estimation. verbose Logical value indicate print parameter estimates iteration. default FALSE.","code":""},{"path":"/reference/ipf2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Iterative proportional fitting routine for the indirect estimation of origin-destination migration flow table with known margins. — ipf2","text":"Iterative Proportional Fitting routine set similar manner Agresti (2002, p.343). equivalent conditional maximization likelihood, discussed Willekens (1999), hence provides identical indirect estimates obtained cm2 routine. user must ensure row column totals equal sum. Care must also taken allow dimension auxiliary matrix (m) equal provided row column totals. one margins known, function can still run. indirect estimates correspond log-linear model without \\(\\alpha_{}\\) term (row_tot = NULL) without \\(\\beta_{j}\\) term (col_tot = NULL) Returns list object mu Origin-Destination matrix indirect estimates Iteration count tol Tolerance level final iteration","code":""},{"path":"/reference/ipf2.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Iterative proportional fitting routine for the indirect estimation of origin-destination migration flow table with known margins. — ipf2","text":"Agresti, . (2002). Categorical Data Analysis 2nd edition. Wiley. Willekens, F. (1999). Modelling Approaches Indirect Estimation Migration Flows: Entropy EM. Mathematical Population Studies 7 (3), 239–78.","code":""},{"path":[]},{"path":"/reference/ipf2.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Iterative proportional fitting routine for the indirect estimation of origin-destination migration flow table with known margins. — ipf2","text":"Guy J. Abel","code":""},{"path":"/reference/ipf2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Iterative proportional fitting routine for the indirect estimation of origin-destination migration flow table with known margins. — ipf2","text":"","code":"## with Willekens (1999) data dn <- LETTERS[1:2] y <- ipf2(row_tot = c(18, 20), col_tot = c(16, 22),            m = matrix(c(5, 1, 2, 7), ncol = 2,                       dimnames = list(orig = dn, dest = dn))) round(addmargins(y$mu),2) #>      dest #> orig      A     B Sum #>   A   13.25  4.75  18 #>   B    2.75 17.25  20 #>   Sum 16.00 22.00  38  ## with all elements of offset equal y <- ipf2(row_tot = c(18, 20), col_tot = c(16, 22)) round(addmargins(y$mu),2) #>                 Sum #>      7.58 10.42  18 #>      8.42 11.58  20 #> Sum 16.00 22.00  38  ## with bigger matrix dn <- LETTERS[1:3] y <- ipf2(row_tot = c(170, 120, 410), col_tot = c(500, 140, 60),            m = matrix(c(50, 10, 220, 120, 120, 30, 545, 0, 10), ncol = 3,                       dimnames = list(orig = dn, dest = dn))) # display with row and col totals round(addmargins(y$mu)) #>      dest #> orig    A   B  C Sum #>   A    72  40 59 170 #>   B    32  88  0 120 #>   C   396  12  1 410 #>   Sum 500 140 60 700  ## only one margin known dn <- LETTERS[1:2] y <- ipf2(row_tot = c(18, 20), col_tot = NULL,            m = matrix(c(5, 1, 2, 7), ncol = 2,                       dimnames = list(orig = dn, dest = dn))) round(addmargins(y$mu)) #>      dest #> orig   A  B Sum #>   A   13  5  18 #>   B    2 18  20 #>   Sum 15 23  38"},{"path":"/reference/ipf2_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Iterative proportional fitting routine for the indirect estimation of origin-destination-type migration flow tables with known origin and destination margins and block diagonal elements. — ipf2_block","title":"Iterative proportional fitting routine for the indirect estimation of origin-destination-type migration flow tables with known origin and destination margins and block diagonal elements. — ipf2_block","text":"ipf2.b function finds maximum likelihood estimates fitted values log-linear model: $$ \\log y_{pq} = \\log \\alpha_{p} + \\log \\beta_{q} + \\log \\lambda_{ij}(p \\, q \\j) + \\log m_{pq} $$ \\(m_{pq}\\) prior estimate \\(y_{pq}\\) complex matrices fitted. \\(\\lambda_{ij}(p \\, q \\j)\\) term ensures saturated fit block \\((,j)\\) block.","code":""},{"path":"/reference/ipf2_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Iterative proportional fitting routine for the indirect estimation of origin-destination-type migration flow tables with known origin and destination margins and block diagonal elements. — ipf2_block","text":"","code":"ipf2_block(   row_tot = NULL,   col_tot = NULL,   block_tot = NULL,   block = NULL,   m = NULL,   tol = 1e-05,   maxit = 500,   verbose = TRUE,   ... )"},{"path":"/reference/ipf2_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Iterative proportional fitting routine for the indirect estimation of origin-destination-type migration flow tables with known origin and destination margins and block diagonal elements. — ipf2_block","text":"row_tot Vector origin totals constrain sum imputed cell rows. col_tot Vector destination totals constrain sum imputed cell columns. block_tot Matrix block totals constrain sum imputed cell blocks. block Matrix block structure corresponding block_tot. m Matrix auxiliary data. default set 1 origin-destination combinations. tol Numeric value tolerance level used parameter estimation. maxit Numeric value maximum number iterations used parameter estimation. verbose Logical value indicate print parameter estimates iteration. default FALSE. ... Additional arguments passes block_matrix.","code":""},{"path":"/reference/ipf2_block.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Iterative proportional fitting routine for the indirect estimation of origin-destination-type migration flow tables with known origin and destination margins and block diagonal elements. — ipf2_block","text":"Iterative Proportional Fitting routine set using partial likelihood derivatives. arguments row_tot col_tot take row-table column-table specific known margins. block_tot take totals blocks matrix defined b. Diagonal values can added user, care must taken ensure resulting diagonals feasible given set margins. user must ensure row column totals table sum value. Care must also taken allow dimension auxiliary matrix (m) equal provided row column totals. Returns list object mu Array indirect estimates origin-destination matrices migrant characteristic Iteration count tol Tolerance level final iteration","code":""},{"path":[]},{"path":"/reference/ipf2_block.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Iterative proportional fitting routine for the indirect estimation of origin-destination-type migration flow tables with known origin and destination margins and block diagonal elements. — ipf2_block","text":"Guy J. Abel","code":""},{"path":"/reference/ipf2_block.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Iterative proportional fitting routine for the indirect estimation of origin-destination-type migration flow tables with known origin and destination margins and block diagonal elements. — ipf2_block","text":"","code":"y <- ipf2_block(row_tot= c(30,20,30,10,20,5,0,10,5,5,5,10),                 col_tot = c(45,10,10,5,5,10,50,5,10,0,0,0),                 block_tot = matrix(data = c(0,0 ,50,0, 35,0,25,0, 10,10,0,0, 10,10,0,0),                               nrow = 4, byrow = TRUE),                 block = block_matrix(x = 1:16, b = c(2,3,4,3))) #> 1 38  #> 2 3.552714e-15  addmargins(y$mu) #>            A1         A2    B1    B2    B3         C1        C2        C3 #> A1   0.000000  0.0000000  0.00 0.000 0.000  4.0000000 20.000000 2.0000000 #> A2   0.000000  0.0000000  0.00 0.000 0.000  2.6666667 13.333333 1.3333333 #> B1  14.318182  3.1818182  0.00 0.000 0.000  1.6666667  8.333333 0.8333333 #> B2   4.772727  1.0606061  0.00 0.000 0.000  0.5555556  2.777778 0.2777778 #> B3   9.545455  2.1212121  0.00 0.000 0.000  1.1111111  5.555556 0.5555556 #> C1   2.045455  0.4545455  1.25 0.625 0.625  0.0000000  0.000000 0.0000000 #> C2   0.000000  0.0000000  0.00 0.000 0.000  0.0000000  0.000000 0.0000000 #> C3   4.090909  0.9090909  2.50 1.250 1.250  0.0000000  0.000000 0.0000000 #> C4   2.045455  0.4545455  1.25 0.625 0.625  0.0000000  0.000000 0.0000000 #> D1   2.045455  0.4545455  1.25 0.625 0.625  0.0000000  0.000000 0.0000000 #> D2   2.045455  0.4545455  1.25 0.625 0.625  0.0000000  0.000000 0.0000000 #> D3   4.090909  0.9090909  2.50 1.250 1.250  0.0000000  0.000000 0.0000000 #> Sum 45.000000 10.0000000 10.00 5.000 5.000 10.0000000 50.000000 5.0000000 #>             C4 D1 D2 D3 Sum #> A1   4.0000000  0  0  0  30 #> A2   2.6666667  0  0  0  20 #> B1   1.6666667  0  0  0  30 #> B2   0.5555556  0  0  0  10 #> B3   1.1111111  0  0  0  20 #> C1   0.0000000  0  0  0   5 #> C2   0.0000000  0  0  0   0 #> C3   0.0000000  0  0  0  10 #> C4   0.0000000  0  0  0   5 #> D1   0.0000000  0  0  0   5 #> D2   0.0000000  0  0  0   5 #> D3   0.0000000  0  0  0  10 #> Sum 10.0000000  0  0  0 150"},{"path":"/reference/ipf2_stripe.html","id":null,"dir":"Reference","previous_headings":"","what":"iterative proportional fitting routine for the indirect estimation of origin-destination-type migration flow tables with known origin and destination margins and stripe elements. — ipf2_stripe","title":"iterative proportional fitting routine for the indirect estimation of origin-destination-type migration flow tables with known origin and destination margins and stripe elements. — ipf2_stripe","text":"ipf2.b function finds maximum likelihood estimates fitted values log-linear model: $$ \\log y_{pq} = \\log \\alpha_{p} + \\log \\beta_{q} + \\log \\lambda_{ij}(p \\, q \\j) + \\log m_{pq} $$ \\(m_{pq}\\) prior estimate \\(y_{pq}\\) complex matrices fitted. \\(\\lambda_{ij}(p \\, q \\j)\\) term ensures saturated fit block \\((,j)\\) block.","code":""},{"path":"/reference/ipf2_stripe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"iterative proportional fitting routine for the indirect estimation of origin-destination-type migration flow tables with known origin and destination margins and stripe elements. — ipf2_stripe","text":"","code":"ipf2_stripe(   row_tot = NULL,   col_tot = NULL,   stripe_tot = NULL,   stripe = NULL,   m = NULL,   tol = 1e-05,   maxit = 500,   verbose = TRUE,   ... )"},{"path":"/reference/ipf2_stripe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"iterative proportional fitting routine for the indirect estimation of origin-destination-type migration flow tables with known origin and destination margins and stripe elements. — ipf2_stripe","text":"row_tot Vector origin totals constrain sum imputed cell rows. col_tot Vector destination totals constrain sum imputed cell columns. stripe_tot Matrix stripe totals constrain sum imputed cell blocks. stripe Matrix stripe structure corresponding stripe_tot. m Matrix auxiliary data. default set 1 origin-destination combinations. tol Numeric value tolerance level used parameter estimation. maxit Numeric value maximum number iterations used parameter estimation. verbose Logical value indicate print parameter estimates iteration. default FALSE. ... Additional arguments passes stripe_matrix.","code":""},{"path":"/reference/ipf2_stripe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"iterative proportional fitting routine for the indirect estimation of origin-destination-type migration flow tables with known origin and destination margins and stripe elements. — ipf2_stripe","text":"Iterative Proportional Fitting routine set using partial likelihood derivatives. arguments row_tot col_tot take row-table column-table specific known margins. stripe_tot take totals stripes matrix defined b. Diagonal values can added user, care must taken ensure resulting diagonals feasible given set margins. user must ensure row column totals table sum value. Care must also taken allow dimension auxiliary matrix (m) equal provided row column totals. Returns list object mu Array indirect estimates origin-destination matrices migrant characteristic Iteration count tol Tolerance level final iteration","code":""},{"path":[]},{"path":"/reference/ipf2_stripe.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"iterative proportional fitting routine for the indirect estimation of origin-destination-type migration flow tables with known origin and destination margins and stripe elements. — ipf2_stripe","text":"Guy J. Abel","code":""},{"path":"/reference/ipf2_stripe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"iterative proportional fitting routine for the indirect estimation of origin-destination-type migration flow tables with known origin and destination margins and stripe elements. — ipf2_stripe","text":"","code":"y <- ipf2_stripe(row_tot = c(85, 70, 35, 30, 60, 55, 65),  stripe_tot = matrix(c(15,20,50,                 35,10,25,                 5 ,0 ,30,                 10,10,10,                 30,30,0,                 15,30,10,                 35,25,5 ), ncol = 3, byrow = TRUE),  stripe = stripe_matrix(x = 1:21, s = c(2,2,3), byrow = TRUE)) #> 1 78  #> 2 0   addmargins(y$mu) #>       A1   A2   B1   B2        C1        C2        C3 Sum #> A1   7.5  7.5 10.0 10.0 16.666667 16.666667 16.666667  85 #> A2  17.5 17.5  5.0  5.0  8.333333  8.333333  8.333333  70 #> B1   2.5  2.5  0.0  0.0 10.000000 10.000000 10.000000  35 #> B2   5.0  5.0  5.0  5.0  3.333333  3.333333  3.333333  30 #> C1  15.0 15.0 15.0 15.0  0.000000  0.000000  0.000000  60 #> C2   7.5  7.5 15.0 15.0  3.333333  3.333333  3.333333  55 #> C3  17.5 17.5 12.5 12.5  1.666667  1.666667  1.666667  65 #> Sum 72.5 72.5 62.5 62.5 43.333333 43.333333 43.333333 400"},{"path":"/reference/ipf3.html","id":null,"dir":"Reference","previous_headings":"","what":"Iterative proportional fitting routine for the indirect estimation of origin-destination-migrant type migration flow tables with known origin and destination margins. — ipf3","title":"Iterative proportional fitting routine for the indirect estimation of origin-destination-migrant type migration flow tables with known origin and destination margins. — ipf3","text":"ipf3 function finds maximum likelihood estimates fitted values log-linear model: $$ \\log y_{ijk} = \\log \\alpha_{} + \\log \\beta_{j} + \\log \\lambda_{k} + \\log \\gamma_{ik} + \\log \\kappa_{jk} + \\log m_{ijk} $$ \\(m_{ijk}\\) set prior estimates \\(y_{ijk}\\) complex matrices fitted.","code":""},{"path":"/reference/ipf3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Iterative proportional fitting routine for the indirect estimation of origin-destination-migrant type migration flow tables with known origin and destination margins. — ipf3","text":"","code":"ipf3(   row_tot = NULL,   col_tot = NULL,   m = NULL,   tol = 1e-05,   maxit = 500,   verbose = TRUE )"},{"path":"/reference/ipf3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Iterative proportional fitting routine for the indirect estimation of origin-destination-migrant type migration flow tables with known origin and destination margins. — ipf3","text":"row_tot Vector origin totals constrain sum imputed cell rows. col_tot Vector destination totals constrain sum imputed cell columns. m Array auxiliary data. default set 1 origin-destination-migrant typologies combinations. tol Numeric value tolerance level used parameter estimation. maxit Numeric value maximum number iterations used parameter estimation. verbose Logical value indicate print parameter estimates iteration. default FALSE.","code":""},{"path":"/reference/ipf3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Iterative proportional fitting routine for the indirect estimation of origin-destination-migrant type migration flow tables with known origin and destination margins. — ipf3","text":"Iterative Proportional Fitting routine set similar manner Agresti (2002, p.343). arguments row_tot col_tot take row-table column-table specific known margins. user must ensure row column totals table sum value. Care must also taken allow dimension auxiliary matrix (m) equal provided row column totals. Returns list object mu Array indirect estimates origin-destination matrices migrant characteristic Iteration count tol Tolerance level final iteration","code":""},{"path":"/reference/ipf3.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Iterative proportional fitting routine for the indirect estimation of origin-destination-migrant type migration flow tables with known origin and destination margins. — ipf3","text":"Abel Cohen (2019) Bilateral international migration flow estimates 200 countries Scientific Data 6 (1), 1-13 Azose & Raftery (2019) Estimation emigration, return migration, transit migration pairs countries Proceedings National Academy Sciences 116 (1) 116-122 Abel, G. J. (2013). Estimating Global Migration Flow Tables Using Place Birth. Demographic Research 28, (18) 505-546 Agresti, . (2002). Categorical Data Analysis 2nd edition. Wiley.","code":""},{"path":[]},{"path":"/reference/ipf3.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Iterative proportional fitting routine for the indirect estimation of origin-destination-migrant type migration flow tables with known origin and destination margins. — ipf3","text":"Guy J. Abel","code":""},{"path":"/reference/ipf3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Iterative proportional fitting routine for the indirect estimation of origin-destination-migrant type migration flow tables with known origin and destination margins. — ipf3","text":"","code":"## create row-table and column-table specific known margins. dn <- LETTERS[1:4] P1 <- matrix(c(1000, 100,  10,   0,                 55,   555,  50,   5,                 80,    40, 800 , 40,                 20,    25,  20, 200),               nrow = 4, ncol = 4, byrow = TRUE,               dimnames = list(pob = dn, por = dn)) P2 <- matrix(c(950, 100,  60,   0,                  80, 505,  75,   5,                  90,  30, 800,  40,                  40,  45,   0, 180),               nrow = 4, ncol = 4, byrow = TRUE,               dimnames = list(pob = dn, por = dn)) # display with row and col totals addmargins(P1) #>      por #> pob      A   B   C   D  Sum #>   A   1000 100  10   0 1110 #>   B     55 555  50   5  665 #>   C     80  40 800  40  960 #>   D     20  25  20 200  265 #>   Sum 1155 720 880 245 3000 addmargins(P2) #>      por #> pob      A   B   C   D  Sum #>   A    950 100  60   0 1110 #>   B     80 505  75   5  665 #>   C     90  30 800  40  960 #>   D     40  45   0 180  265 #>   Sum 1160 680 935 225 3000  # run ipf y <- ipf3(row_tot = t(P1), col_tot = P2) #> 1 996  #> 2 1.136868e-13  # display with row, col and table totals round(addmargins(y$mu), 1) #> , , pob = A #>  #>      dest #> orig      A     B    C D  Sum #>   A   855.9  90.1 54.1 0 1000 #>   B    85.6   9.0  5.4 0  100 #>   C     8.6   0.9  0.5 0   10 #>   D     0.0   0.0  0.0 0    0 #>   Sum 950.0 100.0 60.0 0 1110 #>  #> , , pob = B #>  #>      dest #> orig     A     B    C   D Sum #>   A    6.6  41.8  6.2 0.4  55 #>   B   66.8 421.5 62.6 4.2 555 #>   C    6.0  38.0  5.6 0.4  50 #>   D    0.6   3.8  0.6 0.0   5 #>   Sum 80.0 505.0 75.0 5.0 665 #>  #> , , pob = C #>  #>      dest #> orig     A    B     C    D Sum #>   A    7.5  2.5  66.7  3.3  80 #>   B    3.8  1.3  33.3  1.7  40 #>   C   75.0 25.0 666.7 33.3 800 #>   D    3.8  1.3  33.3  1.7  40 #>   Sum 90.0 30.0 800.0 40.0 960 #>  #> , , pob = D #>  #>      dest #> orig     A    B C     D Sum #>   A    3.0  3.4 0  13.6  20 #>   B    3.8  4.2 0  17.0  25 #>   C    3.0  3.4 0  13.6  20 #>   D   30.2 34.0 0 135.8 200 #>   Sum 40.0 45.0 0 180.0 265 #>  #> , , pob = Sum #>  #>      dest #> orig       A     B     C     D  Sum #>   A    873.0 137.8 126.9  17.3 1155 #>   B    159.9 436.0 101.3  22.8  720 #>   C     92.6  67.3 672.8  47.3  880 #>   D     34.5  39.0  33.9 137.6  245 #>   Sum 1160.0 680.0 935.0 225.0 3000 #>  # origin-destination flow table round(sum_od(y$mu), 1) #>      dest #> orig      A     B     C    D   Sum #>   A     0.0 137.8 126.9 17.3 282.0 #>   B   159.9   0.0 101.3 22.8 284.0 #>   C    92.6  67.3   0.0 47.3 207.2 #>   D    34.5  39.0  33.9  0.0 107.4 #>   Sum 287.0 244.0 262.2 87.4 880.6  ## with alternative offset term dis <- array(c(1, 2, 3, 4, 2, 1, 5, 6, 3, 4, 1, 7, 4, 6, 7, 1), c(4, 4, 4)) y <- ipf3(row_tot = t(P1), col_tot = P2, m = dis) #> 1 990  #> 2 267.9774  #> 3 13.70557  #> 4 1.609235  #> 5 0.176649  #> 6 0.01924174  #> 7 0.002094159  #> 8 0.000227895  #> 9 2.480023e-05  #> 10 2.698833e-06  # display with row, col and table totals round(addmargins(y$mu), 1) #> , , pob = A #>  #>      dest #> orig      A     B    C D  Sum #>   A   847.7  96.5 55.8 0 1000 #>   B    93.3   2.7  4.1 0  100 #>   C     9.1   0.9  0.1 0   10 #>   D     0.0   0.0  0.0 0    0 #>   Sum 950.0 100.0 60.0 0 1110 #>  #> , , pob = B #>  #>      dest #> orig     A     B    C   D Sum #>   A    2.3  49.3  3.2 0.2  55 #>   B   74.8 404.4 71.1 4.7 555 #>   C    2.6  46.9  0.4 0.1  50 #>   D    0.3   4.5  0.2 0.0   5 #>   Sum 80.0 505.0 75.0 5.0 665 #>  #> , , pob = C #>  #>      dest #> orig     A    B     C    D Sum #>   A    1.2  0.5  77.5  0.9  80 #>   B    0.9  0.1  38.6  0.5  40 #>   C   87.0 29.1 645.3 38.6 800 #>   D    1.0  0.3  38.7  0.0  40 #>   Sum 90.0 30.0 800.0 40.0 960 #>  #> , , pob = D #>  #>      dest #> orig     A    B C     D Sum #>   A    0.4  0.6 0  19.0  20 #>   B    0.7  0.2 0  24.1  25 #>   C    0.6  0.8 0  18.5  20 #>   D   38.3 43.4 0 118.3 200 #>   Sum 40.0 45.0 0 180.0 265 #>  #> , , pob = Sum #>  #>      dest #> orig       A     B     C     D  Sum #>   A    851.5 146.8 136.6  20.1 1155 #>   B    169.6 407.4 113.8  29.3  720 #>   C     99.3  77.7 645.8  57.3  880 #>   D     39.6  48.2  38.9 118.4  245 #>   Sum 1160.0 680.0 935.0 225.0 3000 #>  # origin-destination flow table round(sum_od(y$mu), 1) #>      dest #> orig      A     B     C     D   Sum #>   A     0.0 146.8 136.6  20.1 303.5 #>   B   169.6   0.0 113.8  29.3 312.6 #>   C    99.3  77.7   0.0  57.3 234.2 #>   D    39.6  48.2  38.9   0.0 126.6 #>   Sum 308.5 272.6 289.2 106.6 977.0"},{"path":"/reference/ipf3_qi.html","id":null,"dir":"Reference","previous_headings":"","what":"Iterative proportional fitting routine for the indirect estimation of origin-destination-migrant type migration flow tables with known origin and destination margins and diagonal elements. — ipf3_qi","title":"Iterative proportional fitting routine for the indirect estimation of origin-destination-migrant type migration flow tables with known origin and destination margins and diagonal elements. — ipf3_qi","text":"function predominantly intended used within ffs routine.","code":""},{"path":"/reference/ipf3_qi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Iterative proportional fitting routine for the indirect estimation of origin-destination-migrant type migration flow tables with known origin and destination margins and diagonal elements. — ipf3_qi","text":"","code":"ipf3_qi(   row_tot = NULL,   col_tot = NULL,   diag_count = NULL,   m = NULL,   speed = TRUE,   tol = 1e-05,   maxit = 500,   verbose = TRUE )"},{"path":"/reference/ipf3_qi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Iterative proportional fitting routine for the indirect estimation of origin-destination-migrant type migration flow tables with known origin and destination margins and diagonal elements. — ipf3_qi","text":"row_tot Vector origin totals constrain sum imputed cell rows. col_tot Vector destination totals constrain sum imputed cell columns. diag_count Array counts diagonal constrain diagonal elements indirect estimates . default taken maximum possible values given relevant margins totals table. user specifies array diagonal totals, values non-diagonals array can take positive number (ultimately ignored). m Array auxiliary data. default set 1 origin-destination-migrant typologies combinations. speed Speeds IPF algorithm minimizing sufficient statistics. tol Numeric value tolerance level used parameter estimation. maxit Numeric value maximum number iterations used parameter estimation. verbose Logical value indicate print parameter estimates iteration. default FALSE.","code":""},{"path":"/reference/ipf3_qi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Iterative proportional fitting routine for the indirect estimation of origin-destination-migrant type migration flow tables with known origin and destination margins and diagonal elements. — ipf3_qi","text":"Iterative Proportional Fitting routine set using partial likelihood derivatives illustrated Abel (2013). arguments row_tot col_tot take row-table column-table specific known margins. default diagonal values taken maximum possible values given relevant margins totals table. Diagonal values can added user, care must taken ensure resulting diagonals feasible given set margins. user must ensure row column totals table sum value. Care must also taken allow dimension auxiliary matrix (m) equal provided row column totals. Returns list object mu Array indirect estimates origin-destination matrices migrant characteristic Iteration count tol Tolerance level final iteration","code":""},{"path":"/reference/ipf3_qi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Iterative proportional fitting routine for the indirect estimation of origin-destination-migrant type migration flow tables with known origin and destination margins and diagonal elements. — ipf3_qi","text":"ipf3 function finds maximum likelihood estimates fitted values log-linear model: $$ \\log y_{ijk} = \\log \\alpha_{} + \\log \\beta_{j} + \\log \\lambda_{k} + \\log \\gamma_{ik} + \\log \\kappa_{jk} + \\log \\delta_{ijk}(=j) + \\log m_{ijk} $$ \\(m_{ijk}\\) set prior estimates \\(y_{ijk}\\) complex matrices fitted. \\(\\delta_{ijk}(=j)\\) term ensures saturated fit diagonal elements \\((,j)\\) matrix.","code":""},{"path":"/reference/ipf3_qi.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Iterative proportional fitting routine for the indirect estimation of origin-destination-migrant type migration flow tables with known origin and destination margins and diagonal elements. — ipf3_qi","text":"Abel, G. J. (2013). Estimating Global Migration Flow Tables Using Place Birth. Demographic Research 28, (18) 505-546","code":""},{"path":[]},{"path":"/reference/ipf3_qi.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Iterative proportional fitting routine for the indirect estimation of origin-destination-migrant type migration flow tables with known origin and destination margins and diagonal elements. — ipf3_qi","text":"Guy J. Abel","code":""},{"path":"/reference/ipf3_qi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Iterative proportional fitting routine for the indirect estimation of origin-destination-migrant type migration flow tables with known origin and destination margins and diagonal elements. — ipf3_qi","text":"","code":"# \\donttest{ ## create row-table and column-table specific known margins. dn <- LETTERS[1:4] P1 <- matrix(c(1000, 100,  10,   0,                 55,   555,  50,   5,                 80,    40, 800 , 40,                 20,    25,  20, 200),               nrow = 4, ncol = 4, byrow = TRUE,               dimnames = list(pob = dn, por = dn)) P2 <- matrix(c(950, 100,  60,   0,                  80, 505,  75,   5,                  90,  30, 800,  40,                  40,  45,   0, 180),               nrow = 4, ncol = 4, byrow = TRUE,               dimnames = list(pob = dn, por = dn)) # display with row and col totals addmargins(P1) #>      por #> pob      A   B   C   D  Sum #>   A   1000 100  10   0 1110 #>   B     55 555  50   5  665 #>   C     80  40 800  40  960 #>   D     20  25  20 200  265 #>   Sum 1155 720 880 245 3000 addmargins(P2) #>      por #> pob      A   B   C   D  Sum #>   A    950 100  60   0 1110 #>   B     80 505  75   5  665 #>   C     90  30 800  40  960 #>   D     40  45   0 180  265 #>   Sum 1160 680 935 225 3000  # # run ipf # y <- ipf3_qi(row_tot = t(P1), col_tot = P2) # # display with row, col and table totals # round(addmargins(y$mu), 1) # # origin-destination flow table # round(sum_od(y$mu), 1)  ## with alternative offset term # dis <- array(c(1, 2, 3, 4, 2, 1, 5, 6, 3, 4, 1, 7, 4, 6, 7, 1), c(4, 4, 4)) # y <- ipf3_qi(row_tot = t(P1), col_tot = P2, m = dis) # # display with row, col and table totals # round(addmargins(y$mu), 1) # # origin-destination flow table # round(sum_od(y$mu), 1) # }"},{"path":"/reference/ipf_seed.html","id":null,"dir":"Reference","previous_headings":"","what":"Quickly create IPF seed — ipf_seed","title":"Quickly create IPF seed — ipf_seed","text":"function predominantly intended used within ipf routines migest package.","code":""},{"path":"/reference/ipf_seed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quickly create IPF seed — ipf_seed","text":"","code":"ipf_seed(m = NULL, R = NULL, n_dim = NULL, dn = NULL)"},{"path":"/reference/ipf_seed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quickly create IPF seed — ipf_seed","text":"m Matrix, Array NULL build seed. NULL seed 1 elements. R Number rows, columns possibly n_dimensions seed matrix array. n_dim Numeric integer number n_dimensions - 2 matrix, 3 array dn Vector character strings n_dimension names","code":""},{"path":"/reference/ipf_seed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quickly create IPF seed — ipf_seed","text":"array matrix","code":""},{"path":"/reference/ipf_seed.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Quickly create IPF seed — ipf_seed","text":"Guy J. Abel","code":""},{"path":"/reference/ipumsi_age.html","id":null,"dir":"Reference","previous_headings":"","what":"Age specific migration and population counts from two IPUMSI samples — ipumsi_age","title":"Age specific migration and population counts from two IPUMSI samples — ipumsi_age","text":"Age specific migration population counts Brazil 2000 France 2006 IPUMS International samples. Attempt recreate unsmoothed data used appendix Bernard, Bell Charles-Edwards (2014)","code":""},{"path":"/reference/ipumsi_age.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Age specific migration and population counts from two IPUMSI samples — ipumsi_age","text":"","code":"ipumsi_age"},{"path":"/reference/ipumsi_age.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Age specific migration and population counts from two IPUMSI samples — ipumsi_age","text":"Data frame 202 rows 4 columns: sample IPUMS International sample - either BRA2000 FRA2006 age Age census data migrants Number migrants, defined changed usual place residence different minor administrative region compared usual place residence five years prior census. Obtained summing person weights migrate5 variable equal code 12, 20 30. population Population age group, obtained summing person weights perwt variable.","code":""},{"path":"/reference/ipumsi_age.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Age specific migration and population counts from two IPUMSI samples — ipumsi_age","text":"Minnesota Population Center. (2015). Integrated Public Use Microdata Series, International: Version 6.4 Machine-readable database https://international.ipums.org/international/ Bernard, ., Bell, M., & Charles-Edwards, E. (2014). Improved measures cross-national comparison age profiles internal migration. Population Studies, 68(2), 179–195.","code":""},{"path":"/reference/italy_area.html","id":null,"dir":"Reference","previous_headings":"","what":"Single year age-specific origin destination migration flows between Italian NUTS1 areas — italy_area","title":"Single year age-specific origin destination migration flows between Italian NUTS1 areas — italy_area","text":"Origin-destination migration flows 7 years 1970 2000 five-year age groups","code":""},{"path":"/reference/italy_area.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Single year age-specific origin destination migration flows between Italian NUTS1 areas — italy_area","text":"","code":"italy_area"},{"path":"/reference/italy_area.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Single year age-specific origin destination migration flows between Italian NUTS1 areas — italy_area","text":"Data frame 3500 rows 5 columns: orig Origin area (NUTS1 region) dest Destination area (NUTS1 region) year Year flow age_grp Five-year age group flow Migration flow","code":""},{"path":"/reference/italy_area.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Single year age-specific origin destination migration flows between Italian NUTS1 areas — italy_area","text":"Provided James Raymer. Originally ISTAT. 2003. Rapporto annuale: La situazione nel Paese nel 2003. ISTAT, Rome. Data used Raymer, J., Bonaguidi, ., & Valentini, . (2006). Describing projecting age spatial structures interregional migration Italy. Population, Space Place, 12(5), 371–388.","code":""},{"path":"/reference/korea_gravity.html","id":null,"dir":"Reference","previous_headings":"","what":"Annual origin destination migration flows between Korean regions alongside selected geographic, economic and demographic variables. — korea_gravity","title":"Annual origin destination migration flows between Korean regions alongside selected geographic, economic and demographic variables. — korea_gravity","text":"Origin-destination migration flows 2012 2020 based first level administrative regions.","code":""},{"path":"/reference/korea_gravity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annual origin destination migration flows between Korean regions alongside selected geographic, economic and demographic variables. — korea_gravity","text":"","code":"korea_gravity"},{"path":"/reference/korea_gravity.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Annual origin destination migration flows between Korean regions alongside selected geographic, economic and demographic variables. — korea_gravity","text":"Data frame 2,601 rows 20 columns: orig Origin region dest Destination region year Year flow flow Migration flow. Data obtained KOSIS dist_cent Distance (km) geographic centroids, calculated geosphere::distm() dist_min Minimum distance (km) regions, calculated sf::st_distance() dist_pw Distance (km) population weighted centroids, calculated geosphere::distm() using WorldPop estimates 2020 regional population centroids contig Indicate regions share border orig_pop Population (millions) origin region. Data obtained KOSIS. dest_pop Population (millions) destination region. Data obtained KOSIS. orig_area Geographic area (km^2) origin region, calculated sf::st_area() dest_area Geographic area (km^2) destination region, calculated sf::st_area() orig_gdp_pc GDP per capita origin region. Data obtained KOSIS. orig_ginc_pc Gross regional income per capita origin region. Data obtained KOSIS. orig_iinc_pc Individual income per capita origin region. Data obtained KOSIS. orig_pconsum_pc Personal consumption per capita origin region. Data obtained KOSIS. dest_gdp_pc GDP per capita destination region. Data obtained KOSIS. dest_ginc_pc Gross regional income per capita destination region. Data obtained KOSIS. dest_iinc_pc Individual income per capita destination region. Data obtained KOSIS. dest_pconsum_pc Personal consumption per capita destination region. Data obtained KOSIS.","code":""},{"path":"/reference/korea_gravity.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Annual origin destination migration flows between Korean regions alongside selected geographic, economic and demographic variables. — korea_gravity","text":"Statistics Korea, Internal Migration Statistics. Data downloaded https://kosis.kr/eng July 2021. Robin Edwards, Maksym Bondarenko, Andrew J. Tatem Alessandro Sorichetta. Unconstrained subnational Population Weighted Density 2000, 2005, 2010, 2015 2020 ( 100m resolution ). WorldPop, University Southampton, UK. Source: Statistics Korea, Population Statistics Based Resident Registration. Data downloaded https://kosis.kr/eng July 2021. Source: Statistics Korea, Regional GDP, Gross regional income Individual income. Data downloaded https://kosis.kr/eng November 2023.","code":""},{"path":"/reference/korea_gravity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Annual origin destination migration flows between Korean regions alongside selected geographic, economic and demographic variables. — korea_gravity","text":"","code":"korea_gravity #> # A tibble: 2,601 × 20 #>    orig  dest    year   flow dist_cent dist_min dist_pw contig orig_pop dest_pop #>    <chr> <chr>  <int>  <int>     <dbl>    <dbl>   <dbl> <lgl>     <dbl>    <dbl> #>  1 Seoul Seoul   2012 1.07e6       0        0       0   TRUE       10.2   10.2   #>  2 Seoul Busan   2012 2.14e4     319.     294.    324.  FALSE      10.2    3.54  #>  3 Seoul Daegu   2012 1.38e4     241.     209.    236.  FALSE      10.2    2.51  #>  4 Seoul Inche…  2012 3.22e4      44.1      0      25.0 TRUE       10.2    2.84  #>  5 Seoul Gwang…  2012 1.18e4     266.     244.    265.  FALSE      10.2    1.47  #>  6 Seoul Daeje…  2012 1.46e4     139.     109.    138.  FALSE      10.2    1.52  #>  7 Seoul Ulsan   2012 6.80e3     300.     263.    307.  FALSE      10.2    1.15  #>  8 Seoul Sejong  2012 1.02e3     112.      79.6   117.  FALSE      10.2    0.113 #>  9 Seoul Gyeon…  2012 2.54e5      17.9      0      13.2 TRUE       10.2   12.1   #> 10 Seoul Gangw…  2012 2.13e4     116.      34.3   113.  FALSE      10.2    1.54  #> # ℹ 2,591 more rows #> # ℹ 10 more variables: orig_area <units>, dest_area <units>, orig_gdp_pc <dbl>, #> #   orig_ginc_pc <dbl>, orig_iinc_pc <dbl>, orig_pconsum_pc <dbl>, #> #   dest_gdp_pc <dbl>, dest_ginc_pc <dbl>, dest_iinc_pc <dbl>, #> #   dest_pconsum_pc <dbl>"},{"path":"/reference/manila_1970.html","id":null,"dir":"Reference","previous_headings":"","what":"Manila female population 1970 by age — manila_1970","title":"Manila female population 1970 by age — manila_1970","text":"Population data Manila age 1960 1970","code":""},{"path":"/reference/manila_1970.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manila female population 1970 by age — manila_1970","text":"","code":"manila_1970"},{"path":"/reference/manila_1970.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Manila female population 1970 by age — manila_1970","text":"Data frame 13 rows 5 columns: age_1970 Age group 1970 pop_1960 Enumerated population 1960 pop_1970 Enumerated population 1970 phl_census_sr Census survival ratio derived national data.","code":""},{"path":"/reference/manila_1970.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Manila female population 1970 by age — manila_1970","text":"Scraped Table 6 United Nations Department Economic Social Affairs Population Division. (1992). Preparing Migration Data Subnational Population Projections.","code":""},{"path":"/reference/manila_1970.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Manila female population 1970 by age — manila_1970","text":"","code":"# match table 6 - perhaps small error in children net migration numbers in the published table? net_sr(manila_1970, pop0_col = \"pop_1960\", pop1_col = \"pop_1970\",         survival_ratio_col = \"phl_census_sr\", net_children = TRUE) #> # A tibble: 16 × 9 #>    age_1970 pop_1960 pop_1970 phl_census_sr net_forward net_reverse net_average #>    <fct>       <dbl>    <dbl>         <dbl>       <dbl>       <dbl>       <dbl> #>  1 0-4            NA    85870        NA           -235.       -605.       -420. #>  2 5-9            NA    83054        NA          -8935.     -10486.      -9710. #>  3 10-14       80275    79489         1.12      -10196.      -9126.      -9661. #>  4 15-19       70875   101410         0.992      31134.      31400.      31267. #>  5 20-24       63250    90410         0.973      28877.      29683.      29280. #>  6 25-29       85618    56055         0.889     -20082.     -22582.     -21332. #>  7 30-34       75793    44648         0.841     -19117.     -22723.     -20920. #>  8 35-39       60037    36963         0.957     -20497.     -21416.     -20957. #>  9 40-44       34813    28873         0.951      -4244.      -4462.      -4353. #> 10 45-49       31927    23678         0.904      -5189.      -5739.      -5464. #> 11 50-54       24297    19063         0.930      -3521.      -3788.      -3655. #> 12 55-59       20207    14484         0.797      -1613.      -2025.      -1819. #> 13 60-64       13714    10205         0.877      -1822.      -2078.      -1950. #> 14 65-69        9366     6405         0.835      -1417.      -1697.      -1557. #> 15 70-74        7921     3746         0.712      -1890.      -2657.      -2274. #> 16 75+         11114     4779         0.562      -1472.      -2617.      -2045. #> # ℹ 2 more variables: pop1_forward <dbl>, pop0_reverse <dbl>"},{"path":"/reference/match_birthplace_tot.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjust migrant stock tables to have matching place of birth (origin) totals — match_birthplace_tot","title":"Adjust migrant stock tables to have matching place of birth (origin) totals — match_birthplace_tot","text":"function predominantly intended used within ffs routines migest package.","code":""},{"path":"/reference/match_birthplace_tot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjust migrant stock tables to have matching place of birth (origin) totals — match_birthplace_tot","text":"","code":"match_birthplace_tot(m1, m2, method = \"rescale\", verbose = FALSE)"},{"path":"/reference/match_birthplace_tot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjust migrant stock tables to have matching place of birth (origin) totals — match_birthplace_tot","text":"m1 Matrix migrant stock totals time t. Rows matrix correspond place birth columns place residence time t+1. m2 Matrix migrant stock totals time t+1. Rows matrix correspond place birth columns place residence time t+1. method Character string matching either rescale, rescale-adjust-zero-fb, open open-dr. See details. verbose Logical value indicate print parameter estimates iteration rescale, used ipf2. default FALSE.","code":""},{"path":"/reference/match_birthplace_tot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjust migrant stock tables to have matching place of birth (origin) totals — match_birthplace_tot","text":"Returns list object : m1_adj Matrix adjusted m1 rows (place births) match m2_adj. m2_adj Matrix adjusted m2 rows (place births) match m1_adj. in_mat Matrix estimated inflows system. out_mat Matrix estimated outflows system.","code":""},{"path":"/reference/match_birthplace_tot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adjust migrant stock tables to have matching place of birth (origin) totals — match_birthplace_tot","text":"rescale rescale-adjust-zero-fb method ensure flow estimates closely match net migration totals implied changes population totals, births deaths - introduced Science paper. rescale-adjust-zero-fb can adjust rare cases row total margins smaller native born totals countries foreign born populations (e.g. South Sudan 1990-1995). open-dr method allows moves global system - introduced Demographic Research paper. open method slight improvement open-dr - calculation moves using sensible weights.","code":""},{"path":"/reference/match_birthplace_tot.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Adjust migrant stock tables to have matching place of birth (origin) totals — match_birthplace_tot","text":"Abel Cohen (2019) Bilateral international migration flow estimates 200 countries Scientific Data 6 (1), 1-13 Azose & Raftery (2019) Estimation emigration, return migration, transit migration pairs countries Proceedings National Academy Sciences 116 (1) 116-122 Abel, G. J. (2018). Estimates Global Bilateral Migration Flows Gender 1960 2015. International Migration Review 52 (3), 809–852. Abel, G. J. Sander, N. (2014). Quantifying Global International Migration Flows. Science, 343 (6178) 1520-1522","code":""},{"path":[]},{"path":"/reference/match_birthplace_tot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Adjust migrant stock tables to have matching place of birth (origin) totals — match_birthplace_tot","text":"Guy J. Abel","code":""},{"path":"/reference/mig_chord.html","id":null,"dir":"Reference","previous_headings":"","what":"Chord diagram for directional origin-destination data — mig_chord","title":"Chord diagram for directional origin-destination data — mig_chord","text":"Adaption circlize::chordDiagramFromDataFrame() defaults set allow effective visualisation directional origin-destination data","code":""},{"path":"/reference/mig_chord.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chord diagram for directional origin-destination data — mig_chord","text":"","code":"mig_chord(   x,   lab = NULL,   lab_bend1 = NULL,   lab_bend2 = NULL,   label_size = 1,   label_nudge = 0,   label_squeeze = 0,   axis_size = 0.8,   axis_breaks = NULL,   ...,   no_labels = FALSE,   no_axis = FALSE,   clear_circos_par = TRUE,   zero_margin = TRUE,   start.degree = 90,   gap.degree = 4,   track.margin = c(-0.1, 0.1),   points.overflow.warning = FALSE )"},{"path":"/reference/mig_chord.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chord diagram for directional origin-destination data — mig_chord","text":"x Data frame origin first column, destination second column bilateral measure third column lab Named vector labels plot. NULL use names d lab_bend1 Named vector bending labels plot. Note line breaks work facing = \"bending\" circlize. lab_bend2 Named vector second row bending labels plot. label_size Font size label text. label_nudge Numeric value nudge labels towards (negative number) away (positive number) sector axis. label_squeeze Numeric value nudge lab_bend1 lab_bend2 labels apart (negative number) together (positive number). axis_size Font size axis labels. axis_breaks Numeric value often add axis label breaks. Default activated, uses default circlize::circos.axis() ... Arguments circlize::chordDiagramFromDataFrame(). no_labels Logical indicate include plot labels. Set FALSE default. no_axis Logical indicate include plot axis. Set FALSE default. clear_circos_par Logical run circlize::circos.clear(). Set TRUE default. Set FALSE wish add plot. zero_margin Set margins plotting graphics device zero. Set TRUE default. start.degree Argument circlize::circos.par(). gap.degree Argument circlize::chordDiagramFromDataFrame(). track.margin Argument circlize::chordDiagramFromDataFrame(). points.overflow.warning Argument circlize::chordDiagramFromDataFrame().","code":""},{"path":"/reference/mig_chord.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Chord diagram for directional origin-destination data — mig_chord","text":"Chord diagram based first three columns x. function tweaks defaults circlize::chordDiagramFromDataFrame() easier plotting directional origin-destination data. Users can override defaults pass additional tweaks using circlize::chordDiagramFromDataFrame() arguments. layout plots designed specifically work plotting images PDF devices widths heights 7 inches (default dimension using pdf function). See end examples converting PDF PNG images R. Fitting sector labels page usually time consuming task. Use different label options, including line breaks, label_nudge, track height preAllocateTracks font sizes label_size axis_size find best fit. none label options produce desirable results, plot using circlize::circos.text set no_labels = TRUE clear_circos_par = FALSE.","code":""},{"path":"/reference/mig_chord.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Chord diagram for directional origin-destination data — mig_chord","text":"","code":"library(dplyr) library(tidyr) library(tibble) library(countrycode) #' # download Abel and Cohen (2019) estimates f <- url(\"https://ndownloader.figshare.com/files/38016762\") %>%   read.csv() %>%   as_tibble() f #> # A tibble: 307,833 × 9 #>    year0 orig  dest  sd_drop_neg sd_rev_neg mig_rate da_min_open da_min_closed #>    <int> <chr> <chr>       <int>      <int>    <dbl>       <dbl>         <dbl> #>  1  1990 BDI   BDI             0          0      0          0               0  #>  2  1990 COM   BDI             0          0      0          0               0  #>  3  1990 DJI   BDI             0          0      0          0               0  #>  4  1990 ERI   BDI             0          0      0          0               0  #>  5  1990 ETH   BDI             0          0      0          0               0  #>  6  1990 KEN   BDI            30         30     75.7       51.3           207. #>  7  1990 MDG   BDI             0          0      0          0.03            0  #>  8  1990 MWI   BDI             0          0      0          0               0  #>  9  1990 MUS   BDI             0          0      0          0.06            0  #> 10  1990 MYT   BDI             0          0      0          0               0  #> # ℹ 307,823 more rows #> # ℹ 1 more variable: da_pb_closed <dbl>  # use dictionary to get region to region flows d <- f %>%   mutate(     orig = countrycode(sourcevar = orig, custom_dict = dict_ims,                        origin = \"iso3c\", destination = \"region\"),     dest = countrycode(sourcevar = dest, custom_dict = dict_ims,                        origin = \"iso3c\", destination = \"region\")   ) %>%   group_by(year0, orig, dest) %>%   summarise_all(sum) %>%   ungroup() d #> # A tibble: 216 × 9 #>    year0 orig   dest   sd_drop_neg sd_rev_neg mig_rate da_min_open da_min_closed #>    <int> <chr>  <chr>        <int>      <int>    <dbl>       <dbl>         <dbl> #>  1  1990 Africa Africa     4297155    7845806   5.47e6    6872677.      7728373. #>  2  1990 Africa Asia        240464     258816   7.24e5     283708.       554047. #>  3  1990 Africa Europe      555826     664496   1.91e6     830461.      2190967. #>  4  1990 Africa Latin…        1505       2709   7.81e3       9043.        56747. #>  5  1990 Africa North…      289058     301706   2.23e5     321650.       783334. #>  6  1990 Africa Ocean…       21550      23570   6.59e4      30186.       165598. #>  7  1990 Asia   Africa       94088     158903   2.00e5     102036.        93577. #>  8  1990 Asia   Asia       3616112    8617460   1.44e7    6969956.     10337980. #>  9  1990 Asia   Europe     1496141    2322839   5.48e6    2851352.      4214903. #> 10  1990 Asia   Latin…       14316      14343   1.07e5      20177.       136270. #> # ℹ 206 more rows #> # ℹ 1 more variable: da_pb_closed <dbl>  # 2015-2020 pseudo-Bayesian estimates for plotting pb <- d %>%     filter(year0 == 2015) %>%     mutate(flow = da_pb_closed/1e6) %>%     select(orig, dest, flow) pb #> # A tibble: 36 × 3 #>    orig   dest                               flow #>    <chr>  <chr>                             <dbl> #>  1 Africa Africa                           8.69   #>  2 Africa Asia                             0.896  #>  3 Africa Europe                           3.31   #>  4 Africa Latin America and the Caribbean  0.0361 #>  5 Africa Northern America                 1.59   #>  6 Africa Oceania                          0.264  #>  7 Asia   Africa                           0.907  #>  8 Asia   Asia                            23.8    #>  9 Asia   Europe                           9.14   #> 10 Asia   Latin America and the Caribbean  0.233  #> # ℹ 26 more rows  # pdf(file = \"chord.pdf\") mig_chord(x = pb)  # dev.off() # file.show(\"chord.pdf\")  # pass arguments to circlize::chordDiagramFromDataFrame # pdf(file = \"chord.pdf\") mig_chord(x = pb,           # order of regions           order = unique(pb$orig)[c(1, 3, 2, 6, 4, 5)],           # spacing for labels           preAllocateTracks = list(track.height = 0.3),           # colours           grid.col = c(\"blue\", \"royalblue\", \"navyblue\", \"skyblue\", \"cadetblue\", \"darkblue\")           )  # dev.off() # file.show(\"chord.pdf\")  # multiple line labels to fit on longer labels r <- pb %>%   sum_region() %>%   mutate(lab = str_wrap_n(string = region, n = 2)) %>%   separate(col = lab, into = c(\"lab1\", \"lab2\"), sep = \"\\n\", remove = FALSE, fill = \"right\") #> Asking for more lines than words #> Asking for more lines than words #> Asking for more lines than words #> Asking for more lines than words r #> # A tibble: 6 × 8 #>   region                          out_mig in_mig  turn    net lab    lab1  lab2  #>   <chr>                             <dbl>  <dbl> <dbl>  <dbl> <chr>  <chr> <chr> #> 1 Africa                             6.10   2.52  8.62  -3.58 \"Afri… Afri… NA    #> 2 Asia                              18.7    6.93 25.6  -11.7  \"Asia\" Asia  NA    #> 3 Europe                             8.11  15.7  23.8    7.59 \"Euro… Euro… NA    #> 4 Latin America and the Caribbean    5.90   4.39 10.3   -1.51 \"Lati… Lati… and … #> 5 Northern America                   6.96  14.8  21.7    7.83 \"Nort… Nort… Amer… #> 6 Oceania                            1.26   2.67  3.92   1.41 \"Ocea… Ocea… NA     # pdf(file = \"chord.pdf\") mig_chord(x = pb,           lab = r %>%             select(region, lab) %>%             deframe(),           preAllocateTracks = list(track.height = 0.25),           label_size = 0.8,           axis_size = 0.7           )  # dev.off() # file.show(\"chord.pdf\")  # bending labels # pdf(file = \"chord.pdf\") mig_chord(x = pb,           lab_bend1 = r %>%             select(region, lab1) %>%             deframe(),           lab_bend2 = r %>%             select(region, lab2) %>%             deframe()           )  # dev.off() # file.show(\"chord.pdf\")   # convert pdf to image file # library(magick) # p <- image_read_pdf(\"chord.pdf\") # image_write(image = p, path = \"chord.png\") # file.show(\"chord.png\")"},{"path":"/reference/mig_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to format migration input — mig_matrix","title":"Helper function to format migration input — mig_matrix","text":"Helper function format migration input","code":""},{"path":"/reference/mig_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to format migration input — mig_matrix","text":"","code":"mig_matrix(m, array = TRUE, orig = \"orig\", dest = \"dest\", flow = \"flow\")"},{"path":"/reference/mig_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to format migration input — mig_matrix","text":"m matrix data frame origin-destination flows. matrix first second dimensions correspond origin destination respectively. data frame ensure correct column names passed orig, dest flow. array Logical return array dimensions origin-destination matrix (summed dimensions) orig Character string origin column name (m data frame rather matrix) dest Character string destination column name (m data frame rather matrix) flow Character string flow column name (m data frame rather matrix)","code":""},{"path":"/reference/mig_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to format migration input — mig_matrix","text":"Formatted matrix","code":""},{"path":"/reference/mig_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to format migration input — mig_tibble","title":"Helper function to format migration input — mig_tibble","text":"Helper function format migration input","code":""},{"path":"/reference/mig_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to format migration input — mig_tibble","text":"","code":"mig_tibble(m, orig = \"orig\", dest = \"dest\", flow = \"flow\")"},{"path":"/reference/mig_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to format migration input — mig_tibble","text":"m matrix data frame origin-destination flows. matrix first second dimensions correspond origin destination respectively. data frame ensure correct column names passed orig, dest flow. orig Character string origin column name (m data frame rather matrix) dest Character string destination column name (m data frame rather matrix) flow Character string flow column name (m data frame rather matrix)","code":""},{"path":"/reference/mig_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to format migration input — mig_tibble","text":"Formatted tibble","code":""},{"path":"/reference/migest-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods for the Indirect Estimation of Bilateral Migration — migest-package","title":"Methods for the Indirect Estimation of Bilateral Migration — migest-package","text":"migest package contains collection R functions indirect methods estimate bilateral migration flows presence partial missing data. Methods might relevant categorical data situations non-migration data, example, marginal totals known auxiliary bilateral data available.","code":""},{"path":"/reference/migest-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Methods for the Indirect Estimation of Bilateral Migration — migest-package","text":"estimation methods package can grouped 1) functions origin-destination matrices (cm2 ipf2) 2) functions origin-destination matrices categorized set characteristics, ethnicity, employment health status (cm3, ipf3 ipf3_qi). routines based indirect estimation methods marginal totals known, Poisson regression (log-linear) model assumed. ffs_diff, ffs_rates ffs_demo functions provide different methods estimate migration bilateral flows changes stocks, see Abel Cohen (2019) review different methods. demo files, demo(cfplot_reg2), demo(cfplot_reg) demo(cfplot_nat), produce circular migration flow plots migration estimates Abel(2018) Abel Sander (2014), derived using ffs_demo function. Github repo: https://github.com/guyabel/migest","code":""},{"path":"/reference/migest-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Methods for the Indirect Estimation of Bilateral Migration — migest-package","text":"Guy J. Abel","code":""},{"path":"/reference/migest-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Methods for the Indirect Estimation of Bilateral Migration — migest-package","text":"Abel Cohen (2019) Bilateral international migration flow estimates 200 countries Scientific Data 6 (1), 1-13 Abel, G. J. (2018). Estimates Global Bilateral Migration Flows Gender 1960 2015. International Migration Review 52 (3), 809–852. Abel, G. J. (2013). Estimating Global Migration Flow Tables Using Place Birth. Demographic Research 28, (18) 505-546 Abel, G. J. (2005) Indirect Estimation Elderly Migrant Flows England Wales (MS.c. Thesis). University Southampton Abel, G. J. Sander, N. (2014). Quantifying Global International Migration Flows. Science, 343 (6178) 1520-1522 Raymer, J., G. J. Abel, P. W. F. Smith (2007). Combining census registration data estimate detailed elderly migration flows England Wales. Journal Royal Statistical Society: Series (Statistics Society) 170 (4), 891–908. Willekens, F. (1999). Modelling Approaches Indirect Estimation Migration Flows: Entropy EM. Mathematical Population Studies 7 (3), 239–78.","code":""},{"path":"/reference/multi_comp.html","id":null,"dir":"Reference","previous_headings":"","what":"Multiplicative component description of origin-destination migration flow tables — multi_comp","title":"Multiplicative component description of origin-destination migration flow tables — multi_comp","text":"Multiplicative component descriptions n-dimension flow tables based total reference coding system.","code":""},{"path":"/reference/multi_comp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multiplicative component description of origin-destination migration flow tables — multi_comp","text":"","code":"multi_comp(m)"},{"path":"/reference/multi_comp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multiplicative component description of origin-destination migration flow tables — multi_comp","text":"m matrix array migration flows","code":""},{"path":"/reference/multi_comp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multiplicative component description of origin-destination migration flow tables — multi_comp","text":"matrix array multiplicative components m. output array total table origin-destination flows used.","code":""},{"path":"/reference/multi_comp.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Multiplicative component description of origin-destination migration flow tables — multi_comp","text":"Rogers, ., Willekens, F., Little, J., & Raymer, J. (2002). Describing migration spatial structure. Papers Regional Science, 81(1), 29–48. https://doi.org/10.1007/s101100100090 Raymer, J., Bonaguidi, ., & Valentini, . (2006). Describing projecting age spatial structures interregional migration Italy. Population, Space Place, 12(5), 371–388. https://doi.org/10.1002/psp.414","code":""},{"path":"/reference/multi_comp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multiplicative component description of origin-destination migration flow tables — multi_comp","text":"","code":"r <- LETTERS[1:4] m0 <- matrix(data = c(0, 100, 30, 70, 50, 0, 45, 5, 60, 35, 0, 40, 20, 25, 20, 0),               nrow = 4, ncol = 4, byrow = TRUE, dimnames = list(orig = r, dest = r)) addmargins(m0) #>      dest #> orig    A   B  C   D Sum #>   A     0 100 30  70 200 #>   B    50   0 45   5 100 #>   C    60  35  0  40 135 #>   D    20  25 20   0  65 #>   Sum 130 160 95 115 500 multi_comp(m = m0) #>      dest #> orig            A           B           C           D         Sum #>   A     0.0000000   1.5625000   0.7894737   1.5217391   0.4000000 #>   B     1.9230769   0.0000000   2.3684211   0.2173913   0.2000000 #>   C     1.7094017   0.8101852   0.0000000   1.2882448   0.2700000 #>   D     1.1834320   1.2019231   1.6194332   0.0000000   0.1300000 #>   Sum   0.2600000   0.3200000   0.1900000   0.2300000 500.0000000  # data frame library(dplyr) italy_area %>%   filter(year == 2000) %>%   multi_comp() %>%   round(digits = 3) #> , , age_grp = 0-4 #>  #>             dest #> orig             Center    Islands North-East North-West      South        Sum #>   Center          0.000      1.401      0.859      0.909      2.370      0.010 #>   Islands         0.970      0.000      1.181      1.513      0.681      0.012 #>   North-East      1.053      1.916      0.000      1.179      2.501      0.010 #>   North-West      0.877      2.490      0.887      0.000      2.023      0.014 #>   South           1.409      0.531      1.184      1.102      0.000      0.025 #>   Sum             0.016      0.007      0.017      0.018      0.014      0.072 #>  #> , , age_grp = 5-9 #>  #>             dest #> orig             Center    Islands North-East North-West      South        Sum #>   Center          0.000      1.589      0.779      0.762      2.243      0.007 #>   Islands         1.166      0.000      1.393      1.707      0.562      0.010 #>   North-East      0.840      1.932      0.000      0.936      2.085      0.006 #>   North-West      0.877      2.714      0.844      0.000      1.963      0.010 #>   South           1.387      0.507      1.283      1.151      0.000      0.018 #>   Sum             0.011      0.005      0.012      0.012      0.009      0.050 #>  #> , , age_grp = 10-14 #>  #>             dest #> orig             Center    Islands North-East North-West      South        Sum #>   Center          0.000      1.570      0.738      0.667      1.978      0.005 #>   Islands         1.333      0.000      1.572      1.791      0.463      0.008 #>   North-East      0.861      1.834      0.000      0.840      1.805      0.004 #>   North-West      0.793      2.694      0.826      0.000      1.959      0.007 #>   South           1.424      0.411      1.332      1.226      0.000      0.014 #>   Sum             0.009      0.004      0.010      0.009      0.006      0.037 #>  #> , , age_grp = 15-19 #>  #>             dest #> orig             Center    Islands North-East North-West      South        Sum #>   Center          0.000      1.358      0.732      0.668      1.673      0.005 #>   Islands         1.261      0.000      1.617      2.109      0.417      0.009 #>   North-East      0.677      1.769      0.000      0.847      1.697      0.004 #>   North-West      0.629      2.606      0.818      0.000      1.803      0.007 #>   South           1.449      0.347      1.449      1.340      0.000      0.016 #>   Sum             0.009      0.004      0.011      0.011      0.006      0.041 #>  #> , , age_grp = 20-24 #>  #>             dest #> orig             Center    Islands North-East North-West      South        Sum #>   Center          0.000      1.044      0.852      0.759      1.552      0.014 #>   Islands         0.983      0.000      1.490      1.948      0.436      0.025 #>   North-East      0.593      1.530      0.000      0.852      1.808      0.012 #>   North-West      0.533      1.880      0.726      0.000      1.449      0.018 #>   South           1.419      0.425      1.788      1.624      0.000      0.055 #>   Sum             0.025      0.009      0.036      0.037      0.017      0.124 #>  #> , , age_grp = 25-29 #>  #>             dest #> orig             Center    Islands North-East North-West      South        Sum #>   Center          0.000      1.092      0.992      0.939      2.093      0.027 #>   Islands         0.915      0.000      1.221      1.599      0.544      0.034 #>   North-East      0.910      1.420      0.000      1.161      1.829      0.023 #>   North-West      0.795      1.652      0.947      0.000      1.719      0.034 #>   South           1.473      0.482      1.457      1.373      0.000      0.079 #>   Sum             0.044      0.014      0.053      0.054      0.032      0.197 #>  #> , , age_grp = 30-34 #>  #>             dest #> orig             Center    Islands North-East North-West      South        Sum #>   Center          0.000      1.211      1.088      1.159      2.136      0.025 #>   Islands         0.915      0.000      1.053      1.390      0.526      0.025 #>   North-East      1.143      1.384      0.000      1.362      1.837      0.021 #>   North-West      0.945      1.857      1.091      0.000      1.756      0.031 #>   South           1.544      0.445      1.205      1.244      0.000      0.059 #>   Sum             0.039      0.012      0.040      0.043      0.027      0.160 #>  #> , , age_grp = 35-39 #>  #>             dest #> orig             Center    Islands North-East North-West      South        Sum #>   Center          0.000      1.439      1.175      1.245      2.126      0.016 #>   Islands         0.956      0.000      1.073      1.372      0.407      0.015 #>   North-East      1.278      1.396      0.000      1.484      1.719      0.013 #>   North-West      1.158      2.026      1.229      0.000      1.753      0.020 #>   South           1.465      0.424      1.089      1.085      0.000      0.032 #>   Sum             0.024      0.008      0.024      0.025      0.015      0.096 #>  #> , , age_grp = 40-44 #>  #>             dest #> orig             Center    Islands North-East North-West      South        Sum #>   Center          0.000      1.547      1.283      1.266      2.200      0.009 #>   Islands         1.001      0.000      1.090      1.445      0.367      0.008 #>   North-East      1.322      1.563      0.000      1.417      1.626      0.007 #>   North-West      1.234      2.353      1.261      0.000      1.885      0.012 #>   South           1.317      0.354      1.044      1.001      0.000      0.017 #>   Sum             0.013      0.005      0.014      0.014      0.009      0.054 #>  #> , , age_grp = 45-49 #>  #>             dest #> orig             Center    Islands North-East North-West      South        Sum #>   Center          0.000      1.638      1.130      1.204      2.331      0.005 #>   Islands         1.076      0.000      1.100      1.372      0.400      0.005 #>   North-East      1.406      1.701      0.000      1.501      1.607      0.005 #>   North-West      1.320      2.600      1.354      0.000      2.007      0.008 #>   South           1.286      0.408      0.919      0.912      0.000      0.010 #>   Sum             0.008      0.003      0.008      0.008      0.006      0.033 #>  #> , , age_grp = 50-54 #>  #>             dest #> orig             Center    Islands North-East North-West      South        Sum #>   Center          0.000      1.887      1.064      1.110      2.579      0.005 #>   Islands         0.997      0.000      0.861      1.226      0.361      0.004 #>   North-East      1.449      1.709      0.000      1.505      1.541      0.004 #>   North-West      1.519      3.174      1.595      0.000      2.391      0.008 #>   South           1.267      0.366      0.738      0.831      0.000      0.007 #>   Sum             0.007      0.003      0.006      0.006      0.005      0.028 #>  #> , , age_grp = 55-59 #>  #>             dest #> orig             Center    Islands North-East North-West      South        Sum #>   Center          0.000      2.263      1.084      1.029      2.894      0.004 #>   Islands         0.845      0.000      0.643      1.027      0.343      0.003 #>   North-East      1.448      1.641      0.000      1.455      1.391      0.003 #>   North-West      1.724      3.929      1.892      0.000      2.921      0.008 #>   South           1.160      0.398      0.544      0.722      0.000      0.005 #>   Sum             0.006      0.003      0.005      0.005      0.005      0.023 #>  #> , , age_grp = 60-64 #>  #>             dest #> orig             Center    Islands North-East North-West      South        Sum #>   Center          0.000      2.271      1.067      1.084      3.282      0.004 #>   Islands         0.767      0.000      0.397      0.933      0.414      0.002 #>   North-East      1.331      1.473      0.000      1.578      1.500      0.003 #>   North-West      1.633      4.038      1.938      0.000      3.047      0.008 #>   South           1.245      0.395      0.444      0.734      0.000      0.005 #>   Sum             0.005      0.003      0.004      0.004      0.005      0.022 #>  #> , , age_grp = 65-69 #>  #>             dest #> orig             Center    Islands North-East North-West      South        Sum #>   Center          0.000      2.383      1.159      1.030      3.451      0.003 #>   Islands         0.827      0.000      0.435      0.876      0.385      0.002 #>   North-East      1.222      1.237      0.000      1.629      1.439      0.002 #>   North-West      1.518      3.324      1.891      0.000      2.933      0.005 #>   South           1.340      0.479      0.419      0.874      0.000      0.004 #>   Sum             0.004      0.002      0.003      0.004      0.004      0.017 #>  #> , , age_grp = 70-74 #>  #>             dest #> orig             Center    Islands North-East North-West      South        Sum #>   Center          0.000      2.409      0.999      1.353      3.269      0.003 #>   Islands         0.723      0.000      0.381      1.253      0.385      0.002 #>   North-East      1.301      1.200      0.000      1.765      1.113      0.002 #>   North-West      1.421      2.608      1.719      0.000      2.445      0.004 #>   South           1.451      0.432      0.460      1.065      0.000      0.004 #>   Sum             0.004      0.001      0.003      0.004      0.003      0.014 #>  #> , , age_grp = 75-79 #>  #>             dest #> orig             Center    Islands North-East North-West      South        Sum #>   Center          0.000      1.926      1.174      1.311      2.957      0.003 #>   Islands         0.819      0.000      0.352      1.352      0.431      0.002 #>   North-East      1.395      0.840      0.000      2.114      0.929      0.002 #>   North-West      1.327      2.463      1.810      0.000      1.963      0.003 #>   South           1.450      0.437      0.488      1.173      0.000      0.004 #>   Sum             0.003      0.001      0.003      0.004      0.002      0.013 #>  #> , , age_grp = 80-84 #>  #>             dest #> orig             Center    Islands North-East North-West      South        Sum #>   Center          0.000      1.846      1.070      1.503      2.636      0.002 #>   Islands         0.804      0.000      0.428      1.295      0.519      0.001 #>   North-East      1.466      0.631      0.000      2.117      0.986      0.001 #>   North-West      1.232      2.001      1.825      0.000      1.826      0.002 #>   South           1.571      0.408      0.493      1.258      0.000      0.003 #>   Sum             0.002      0.001      0.002      0.002      0.001      0.008 #>  #> , , age_grp = 85-89 #>  #>             dest #> orig             Center    Islands North-East North-West      South        Sum #>   Center          0.000      1.545      1.509      1.606      2.575      0.001 #>   Islands         0.739      0.000      0.383      1.345      0.414      0.001 #>   North-East      1.766      1.254      0.000      2.809      0.913      0.001 #>   North-West      1.090      1.667      1.944      0.000      1.395      0.002 #>   South           1.410      0.301      0.415      1.240      0.000      0.002 #>   Sum             0.002      0.000      0.001      0.002      0.001      0.007 #>  #> , , age_grp = 90-94 #>  #>             dest #> orig             Center    Islands North-East North-West      South        Sum #>   Center          0.000      1.319      1.211      1.906      2.277      0.001 #>   Islands         0.809      0.000      0.418      1.033      0.359      0.000 #>   North-East      1.469      1.083      0.000      2.835      0.660      0.000 #>   North-West      1.494      1.635      2.216      0.000      1.778      0.001 #>   South           1.452      0.250      0.387      1.142      0.000      0.001 #>   Sum             0.001      0.000      0.001      0.001      0.000      0.003 #>  #> , , age_grp = 95+ #>  #>             dest #> orig             Center    Islands North-East North-West      South        Sum #>   Center          0.000      0.886      1.076      1.504      2.207      0.000 #>   Islands         0.847      0.000      0.521      0.835      0.523      0.000 #>   North-East      1.383      1.750      0.000      2.340      0.698      0.000 #>   North-West      1.707      2.593      2.149      0.000      2.263      0.000 #>   South           1.394      0.485      0.523      0.965      0.000      0.000 #>   Sum             0.000      0.000      0.000      0.000      0.000      0.001 #>  #> , , age_grp = Sum #>  #>             dest #> orig             Center    Islands North-East North-West      South        Sum #>   Center          0.000      0.017      0.037      0.039      0.054      0.148 #>   Islands         0.038      0.000      0.048      0.067      0.013      0.166 #>   North-East      0.030      0.016      0.000      0.041      0.037      0.125 #>   North-West      0.045      0.037      0.056      0.000      0.063      0.202 #>   South           0.120      0.013      0.111      0.115      0.000      0.360 #>   Sum             0.233      0.084      0.253      0.263      0.168 277436.000 #>"},{"path":"/reference/multi_comp2.html","id":null,"dir":"Reference","previous_headings":"","what":"Multiplicative component descriptions of origin-destination flow tables based on total reference coding system. — multi_comp2","title":"Multiplicative component descriptions of origin-destination flow tables based on total reference coding system. — multi_comp2","text":"Multiplicative component descriptions origin-destination flow tables based total reference coding system.","code":""},{"path":"/reference/multi_comp2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multiplicative component descriptions of origin-destination flow tables based on total reference coding system. — multi_comp2","text":"","code":"multi_comp2(m)"},{"path":"/reference/multi_comp2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multiplicative component descriptions of origin-destination flow tables based on total reference coding system. — multi_comp2","text":"m matrix migration flows","code":""},{"path":"/reference/multi_comp2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multiplicative component descriptions of origin-destination flow tables based on total reference coding system. — multi_comp2","text":"matrix multiplicative components m. output array total table origin-destination flows used.","code":""},{"path":"/reference/multi_comp2.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Multiplicative component descriptions of origin-destination flow tables based on total reference coding system. — multi_comp2","text":"Rogers, ., Willekens, F., Little, J., & Raymer, J. (2002). Describing migration spatial structure. Papers Regional Science, 81(1), 29–48. https://doi.org/10.1007/s101100100090 Raymer, J., Bonaguidi, ., & Valentini, . (2006). Describing projecting age spatial structures interregional migration Italy. Population, Space Place, 12(5), 371–388. https://doi.org/10.1002/psp.414","code":""},{"path":"/reference/multi_comp2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multiplicative component descriptions of origin-destination flow tables based on total reference coding system. — multi_comp2","text":"","code":"r <- LETTERS[1:2] m0 <- array(c(5, 1, 2, 7, 4, 2, 5, 9), dim = c(2, 2, 2),             dimnames = list(orig = r, dest = r, type = c(\"ILL\", \"HEALTHY\"))) addmargins(m0) #> , , type = ILL #>  #>      dest #> orig  A B Sum #>   A   5 2   7 #>   B   1 7   8 #>   Sum 6 9  15 #>  #> , , type = HEALTHY #>  #>      dest #> orig  A  B Sum #>   A   4  5   9 #>   B   2  9  11 #>   Sum 6 14  20 #>  #> , , type = Sum #>  #>      dest #> orig   A  B Sum #>   A    9  7  16 #>   B    3 16  19 #>   Sum 12 23  35 #>  multi_comp2(m = m0) #> , , type = ILL #>  #>      dest #> orig           A          B        Sum #>   A    1.7857143  0.4761905  0.4666667 #>   B    0.3125000  1.4583333  0.5333333 #>   Sum  0.4000000  0.6000000 15.0000000 #>  #> , , type = HEALTHY #>  #>      dest #> orig           A          B        Sum #>   A    1.4814815  0.7936508  0.4500000 #>   B    0.6060606  1.1688312  0.5500000 #>   Sum  0.3000000  0.7000000 20.0000000 #>"},{"path":"/reference/nb_non_zero.html","id":null,"dir":"Reference","previous_headings":"","what":"Handle negative native born populations — nb_non_zero","title":"Handle negative native born populations — nb_non_zero","text":"function predominantly intended used within ffs routines migest package. Adjustment ensure positive population counts elements stock matrix. rare occasions working international stock data foreign born population can exceed total population due conflicting data sources.","code":""},{"path":"/reference/nb_non_zero.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handle negative native born populations — nb_non_zero","text":"","code":"nb_non_zero(m, verbose = FALSE)"},{"path":"/reference/nb_non_zero.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handle negative native born populations — nb_non_zero","text":"m Matrix migrant stock totals. Rows matrix correspond place birth columns place residence time t verbose Logical value indicate print parameter estimates iteration. default FALSE.","code":""},{"path":"/reference/nb_non_zero.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Handle negative native born populations — nb_non_zero","text":"matrix scales elements columns (places residence) negative population match overall population (column total). Negative values replaced zero. Positive values scaled ensure column total matches original m.","code":""},{"path":[]},{"path":"/reference/nb_non_zero.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Handle negative native born populations — nb_non_zero","text":"Guy J. Abel","code":""},{"path":"/reference/nb_non_zero.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Handle negative native born populations — nb_non_zero","text":"","code":"# \\donttest{ ## cant have examples if function not in namespace - i.e. without export  ## so comment all out for own use # dn <- LETTERS[1:4] # P <- matrix(data = c(1000, 100, 10, 0, 55, 555, 50, 5, 80, 40, 800, 40, 20, 25, 20, 200), #             nrow = 4, ncol = 4, dimnames = list(pob = dn, por = dn), byrow = TRUE) # # display with row and col totals # addmargins(A = P) #  # # no change # y <- nb_non_zero(m = P) # addmargins(A = y) #  # # adjust a native born population to negative # P[4, 4] <- -20 # # display with row and col totals # addmargins(A = P) #  # y <- nb_non_zero(m = P) # addmargins(A = y) # }"},{"path":"/reference/nb_scale_global.html","id":null,"dir":"Reference","previous_headings":"","what":"Scale native born populations to match global differences in births and deaths over period — nb_scale_global","title":"Scale native born populations to match global differences in births and deaths over period — nb_scale_global","text":"function predominantly intended used within ffs routines migest package. Adjustment ensure global differences stocks match global demographic changes births deaths.","code":""},{"path":"/reference/nb_scale_global.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scale native born populations to match global differences in births and deaths over period — nb_scale_global","text":"","code":"nb_scale_global(m1, m2, b, d, verbose = FALSE)"},{"path":"/reference/nb_scale_global.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scale native born populations to match global differences in births and deaths over period — nb_scale_global","text":"m1 Matrix migrant stock totals time t. Rows matrix correspond place birth columns place residence time t m2 Matrix migrant stock totals time t+1. Rows matrix correspond place birth columns place residence time t+1. b Vector number births time t t+1 region. d Vector number deaths time t t+1 region. verbose Logical value indicate print parameter estimates iteration. default FALSE.","code":""},{"path":"/reference/nb_scale_global.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scale native born populations to match global differences in births and deaths over period — nb_scale_global","text":"List adjusted m1 m2.","code":""},{"path":[]},{"path":"/reference/nb_scale_global.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Scale native born populations to match global differences in births and deaths over period — nb_scale_global","text":"Guy J. Abel","code":""},{"path":"/reference/nb_scale_global.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scale native born populations to match global differences in births and deaths over period — nb_scale_global","text":"","code":"# \\donttest{ ## cant have examples if function not in namespace - i.e. without export  ## so comment all out for own use # r <- LETTERS[1:4] # P1 <- matrix(data = c(1000, 100, 10, 0, 55, 555, 50, 5, 80, 40, 800, 40, 20, 25, 20, 200), #              nrow = 4, ncol = 4, dimnames = list(birth = r, dest = r), byrow = TRUE) # P2 <- matrix(data = c(950, 100, 60, 0, 80, 505, 75, 5, 90, 30, 800, 40, 40, 45, 0, 180), #              nrow = 4, ncol = 4, dimnames = list(birth = r, dest = r), byrow = TRUE) # # display with row and col totals # addmargins(A = P1) # addmargins(A = P2) #  # # births and deaths # b <- rep(x = 10, 4) # d <- rep(x = 5, 4) # # no change in stocks, but 20 more births than deaths... # sum(P2) - sum(P1) + sum(d) - sum(b) # # scale # y <- nb_scale_global (m1 = P1, m2 = P2, b = b, d = d) # y # sum(y$m2_adj) - sum(y$m1_adj) + sum(d) - sum(b) #  # # check for when extra is positive and odd # d[1] <- 32 # d # sum(P2 - P1) - sum(b - d) # # scale # y <- nb_scale_global(m1 = P1, m2 = P2, b = b, d = d) # sum(y$m2_adj) - sum(y$m1_adj) + sum(d) - sum(b) # }"},{"path":"/reference/nchars_wrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Count the number of characters per line — nchars_wrap","title":"Count the number of characters per line — nchars_wrap","text":"Count number characters per line","code":""},{"path":"/reference/nchars_wrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count the number of characters per line — nchars_wrap","text":"","code":"nchars_wrap(b, w)"},{"path":"/reference/nchars_wrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count the number of characters per line — nchars_wrap","text":"b Numeric vector position line breaks words w w Character string vector words","code":""},{"path":"/reference/nchars_wrap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count the number of characters per line — nchars_wrap","text":"List vectors number characters per line number words per line","code":""},{"path":"/reference/net_matrix_entropy.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Migration Flows to Match Net Totals via Entropy Minimization — net_matrix_entropy","title":"Estimate Migration Flows to Match Net Totals via Entropy Minimization — net_matrix_entropy","text":"Solves origin–destination flow matrix satisfies directional net migration constraints minimizing Kullback–Leibler (KL) divergence prior matrix. yields smooth, information-theoretically regularized solution balances fidelity prior patterns net flow requirements.","code":""},{"path":"/reference/net_matrix_entropy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Migration Flows to Match Net Totals via Entropy Minimization — net_matrix_entropy","text":"","code":"net_matrix_entropy(net_tot, m, zero_mask = NULL, tol = 1e-06, verbose = FALSE)"},{"path":"/reference/net_matrix_entropy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Migration Flows to Match Net Totals via Entropy Minimization — net_matrix_entropy","text":"net_tot numeric vector net migration totals region. Must sum zero. m square numeric matrix providing prior flow estimates. Must dimensions length(net_tot) × length(net_tot). zero_mask logical matrix dimensions m, TRUE indicates forbidden (structurally zero) flows. Defaults disallowing diagonal flows. tol Numeric tolerance checking whether sum(net_tot) == 0. Default 1e-6. verbose Logical flag print solver diagnostics CVXR. Default FALSE.","code":""},{"path":"/reference/net_matrix_entropy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Migration Flows to Match Net Totals via Entropy Minimization — net_matrix_entropy","text":"named list components: n Estimated matrix flows satisfying net constraints. Number iterations (always 1 solver). tol Tolerance used net flow balance check. value Sum squared deviation target net flows. convergence Logical indicating successful optimization. message Solver message returned CVXR.","code":""},{"path":"/reference/net_matrix_entropy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate Migration Flows to Match Net Totals via Entropy Minimization — net_matrix_entropy","text":"function minimizes KL divergence estimated matrix \\(y_{ij}\\) prior matrix \\(m_{ij}\\): $$\\sum_{,j} \\left[y_{ij} \\log\\left(\\frac{y_{ij}}{m_{ij}}\\right) - y_{ij} + m_{ij}\\right]$$ subject directional net flow constraints: $$\\sum_j y_{ji} - \\sum_j y_{ij} = \\text{net}_i$$ flows constrained non-negative. Structural zeros enforced via zero_mask. Internally uses CVXR::kl_div() DCP-compliant KL minimization.","code":""},{"path":[]},{"path":"/reference/net_matrix_entropy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Migration Flows to Match Net Totals via Entropy Minimization — net_matrix_entropy","text":"","code":"m <- matrix(c(0, 100, 30, 70,               50,   0, 45,  5,               60,  35,  0, 40,               20,  25, 20,  0),             nrow = 4, byrow = TRUE,             dimnames = list(orig = LETTERS[1:4], dest = LETTERS[1:4])) addmargins(m) #>      dest #> orig    A   B  C   D Sum #>   A     0 100 30  70 200 #>   B    50   0 45   5 100 #>   C    60  35  0  40 135 #>   D    20  25 20   0  65 #>   Sum 130 160 95 115 500 sum_region(m) #> # A tibble: 4 × 5 #>   region out_mig in_mig  turn   net #>   <chr>    <dbl>  <dbl> <dbl> <dbl> #> 1 A          200    130   330   -70 #> 2 B          100    160   260    60 #> 3 C          135     95   230   -40 #> 4 D           65    115   180    50  net <- c(30, 40, -15, -55) result <- net_matrix_entropy(net_tot = net, m = m) result$n |>   addmargins() |>   round(2) #>      dest #> orig       A      B      C     D    Sum #>   A     0.00  80.58  26.05 34.78 141.41 #>   B    62.05   0.00  48.48  3.08 113.62 #>   C    69.11  32.48   0.00 22.89 124.48 #>   D    40.25  40.55  34.95  0.00 115.75 #>   Sum 171.41 153.62 109.48 60.75 495.26 sum_region(result$n) #> # A tibble: 4 × 5 #>   region out_mig in_mig  turn   net #>   <chr>    <dbl>  <dbl> <dbl> <dbl> #> 1 A         141.  171.   313.  30.0 #> 2 B         114.  154.   267.  40.0 #> 3 C         124.  109.   234. -15.0 #> 4 D         116.   60.8  177. -55.0"},{"path":"/reference/net_matrix_ipf.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Migration Flows to Match Net Totals via Iterative Proportional Fitting — net_matrix_ipf","title":"Estimate Migration Flows to Match Net Totals via Iterative Proportional Fitting — net_matrix_ipf","text":"net_matrix_ipf function finds maximum likelihood estimates flow matrix multiplicative log-linear model: $$\\log y_{ij} = \\log \\alpha_i + \\log \\alpha_j^{-1} + \\log m_{ij}$$ \\(y_{ij}\\) estimated migration flow origin \\(\\) destination \\(j\\), \\(m_{ij}\\) prior flow. function iteratively adjusts origin destination scaling factors (\\(\\alpha\\)) match directional net migration totals.","code":""},{"path":"/reference/net_matrix_ipf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Migration Flows to Match Net Totals via Iterative Proportional Fitting — net_matrix_ipf","text":"","code":"net_matrix_ipf(   net_tot,   m,   zero_mask = NULL,   maxit = 500,   tol = 1e-06,   verbose = FALSE )"},{"path":"/reference/net_matrix_ipf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Migration Flows to Match Net Totals via Iterative Proportional Fitting — net_matrix_ipf","text":"net_tot numeric vector net migration totals region. Must sum zero. m square numeric matrix providing prior flow estimates. Must dimensions length(net_tot) × length(net_tot). zero_mask logical matrix dimensions m, TRUE indicates forbidden (structurally zero) flows. Defaults disallowing diagonal flows. maxit Maximum number iterations perform. Default 500. tol Convergence tolerance based maximum change \\(\\alpha\\) iterations. Default 1e-6. verbose Logical flag print progress \\(\\alpha\\) updates iterations. Default FALSE.","code":""},{"path":"/reference/net_matrix_ipf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Migration Flows to Match Net Totals via Iterative Proportional Fitting — net_matrix_ipf","text":"named list components: n Estimated matrix flows satisfying net constraints. Number iterations used. tol Convergence tolerance used. value Sum squared residuals actual target net flows. convergence Logical indicator convergence within tolerance. message Text description convergence result.","code":""},{"path":"/reference/net_matrix_ipf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate Migration Flows to Match Net Totals via Iterative Proportional Fitting — net_matrix_ipf","text":"function avoids matrix inversion updating \\(\\alpha\\) using closed-form solution quadratic equation step. directional net flows (column sums minus row sums) matched, marginal totals. Flows constrained non-negative. multiple positive roots available solving quadratic, smaller root selected improved stability.","code":""},{"path":[]},{"path":"/reference/net_matrix_ipf.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimate Migration Flows to Match Net Totals via Iterative Proportional Fitting — net_matrix_ipf","text":"Guy J. Abel, Peter W. F. Smith","code":""},{"path":"/reference/net_matrix_ipf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Migration Flows to Match Net Totals via Iterative Proportional Fitting — net_matrix_ipf","text":"","code":"m <- matrix(c(0, 100, 30, 70,               50,   0, 45,  5,               60,  35,  0, 40,               20,  25, 20,  0),             nrow = 4, byrow = TRUE,             dimnames = list(orig = LETTERS[1:4], dest = LETTERS[1:4])) addmargins(m) #>      dest #> orig    A   B  C   D Sum #>   A     0 100 30  70 200 #>   B    50   0 45   5 100 #>   C    60  35  0  40 135 #>   D    20  25 20   0  65 #>   Sum 130 160 95 115 500 sum_region(m) #> # A tibble: 4 × 5 #>   region out_mig in_mig  turn   net #>   <chr>    <dbl>  <dbl> <dbl> <dbl> #> 1 A          200    130   330   -70 #> 2 B          100    160   260    60 #> 3 C          135     95   230   -40 #> 4 D           65    115   180    50  net <- c(30, 40, -15, -55) result <- net_matrix_ipf(net_tot = net, m = m) result$n |>   addmargins() |>   round(2) #>      dest #> orig       A      B      C     D    Sum #>   A     0.00  80.58  26.05 34.78 141.41 #>   B    62.05   0.00  48.48  3.08 113.62 #>   C    69.11  32.48   0.00 22.89 124.48 #>   D    40.25  40.55  34.95  0.00 115.75 #>   Sum 171.41 153.62 109.48 60.75 495.26 sum_region(result$n) #> # A tibble: 4 × 5 #>   region out_mig in_mig  turn   net #>   <chr>    <dbl>  <dbl> <dbl> <dbl> #> 1 A         141.  171.   313.  30.0 #> 2 B         114.  154.   267.  40.0 #> 3 C         124.  109.   234. -15.0 #> 4 D         116.   60.8  177. -55.0"},{"path":"/reference/net_matrix_lp.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Migration Flows to Match Net Totals via Linear Programming — net_matrix_lp","title":"Estimate Migration Flows to Match Net Totals via Linear Programming — net_matrix_lp","text":"Solves origin-destination flow matrix satisfies directional net migration constraints minimizing total absolute deviation prior matrix. method uses linear programming split variables minimize L1 error, optionally respecting structural zero mask.","code":""},{"path":"/reference/net_matrix_lp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Migration Flows to Match Net Totals via Linear Programming — net_matrix_lp","text":"","code":"net_matrix_lp(net_tot, m, zero_mask = NULL, tol = 1e-06)"},{"path":"/reference/net_matrix_lp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Migration Flows to Match Net Totals via Linear Programming — net_matrix_lp","text":"net_tot numeric vector net migration totals region. Must sum zero. m square numeric matrix providing prior flow estimates. Must dimensions length(net_tot) × length(net_tot). zero_mask logical matrix dimensions m, TRUE indicates forbidden (structurally zero) flows. Defaults disallowing diagonal flows. tol numeric tolerance checking sum(net_tot) == 0. Default 1e-6.","code":""},{"path":"/reference/net_matrix_lp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Migration Flows to Match Net Totals via Linear Programming — net_matrix_lp","text":"named list components: n Estimated matrix flows satisfying net constraints. Number iterations (always 1 LP method). tol Tolerance used checking net flow balance. value Total L1 deviation prior matrix m. convergence Logical indicator successful solve. message Text summary convergence status.","code":""},{"path":"/reference/net_matrix_lp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate Migration Flows to Match Net Totals via Linear Programming — net_matrix_lp","text":"function uses lpSolve::lp() solve linear program. estimated matrix minimizes sum absolute deviations prior matrix m, subject directional net flow constraints: $$\\sum_j x_{ji} - \\sum_j x_{ij} = \\text{net}_i$$ Structural zeros enforced zero_mask. flows constrained non-negative.","code":""},{"path":[]},{"path":"/reference/net_matrix_lp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Migration Flows to Match Net Totals via Linear Programming — net_matrix_lp","text":"","code":"m <- matrix(c(0, 100, 30, 70,               50,   0, 45,  5,               60,  35,  0, 40,               20,  25, 20,  0),             nrow = 4, byrow = TRUE,             dimnames = list(orig = LETTERS[1:4], dest = LETTERS[1:4])) addmargins(m) #>      dest #> orig    A   B  C   D Sum #>   A     0 100 30  70 200 #>   B    50   0 45   5 100 #>   C    60  35  0  40 135 #>   D    20  25 20   0  65 #>   Sum 130 160 95 115 500 sum_region(m) #> # A tibble: 4 × 5 #>   region out_mig in_mig  turn   net #>   <chr>    <dbl>  <dbl> <dbl> <dbl> #> 1 A          200    130   330   -70 #> 2 B          100    160   260    60 #> 3 C          135     95   230   -40 #> 4 D           65    115   180    50  net <- c(30, 40, -15, -55) result <- net_matrix_lp(net_tot = net, m = m) result$n |>   addmargins() |>   round(2) #>      dest #> orig   A  B C D Sum #>   A    0  0 0 0   0 #>   B    0  0 0 0   0 #>   C    0 15 0 0  15 #>   D   30 25 0 0  55 #>   Sum 30 40 0 0  70 sum_region(result$n) #> # A tibble: 4 × 5 #>   region out_mig in_mig  turn   net #>   <chr>    <dbl>  <dbl> <dbl> <dbl> #> 1 A            0     30    30    30 #> 2 B            0     40    40    40 #> 3 C           15      0    15   -15 #> 4 D           55      0    55   -55"},{"path":"/reference/net_matrix_optim.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Migration Flows to Match Net Totals via Quadratic Optimization — net_matrix_optim","title":"Estimate Migration Flows to Match Net Totals via Quadratic Optimization — net_matrix_optim","text":"Solves origin–destination flow matrix satisfies directional net migration constraints minimizing squared deviation prior matrix.","code":""},{"path":"/reference/net_matrix_optim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Migration Flows to Match Net Totals via Quadratic Optimization — net_matrix_optim","text":"","code":"net_matrix_optim(net_tot, m, zero_mask = NULL, maxit = 500, tol = 1e-06)"},{"path":"/reference/net_matrix_optim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Migration Flows to Match Net Totals via Quadratic Optimization — net_matrix_optim","text":"net_tot numeric vector net migration totals region. Must sum zero. m square numeric matrix providing prior flow estimates. Must dimensions length(net_tot) × length(net_tot). zero_mask logical matrix dimensions m, TRUE indicates forbidden (structurally zero) flows. Defaults disallowing diagonal flows. maxit Maximum number iterations perform. Default 500. tol Numeric tolerance checking whether sum(net_tot) == 0. Default 1e-6.","code":""},{"path":"/reference/net_matrix_optim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Migration Flows to Match Net Totals via Quadratic Optimization — net_matrix_optim","text":"named list components: n Estimated matrix flows satisfying net constraints. Number optimization iterations (available). tol Tolerance used net flow balance check. value Objective function value (sum squared deviations). convergence Logical indicating successful convergence. message Solver message status.","code":""},{"path":"/reference/net_matrix_optim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate Migration Flows to Match Net Totals via Quadratic Optimization — net_matrix_optim","text":"function minimizes: $$\\sum_{,j} (y_{ij} - m_{ij})^2$$ subject directional net flow constraints: $$\\sum_j y_{ji} - \\sum_j y_{ij} = \\text{net}_i$$ non-negativity constraints flows. Structural zeros enforced using zero_mask. Internally uses optim() constrained quadratic programming solver.","code":""},{"path":[]},{"path":"/reference/net_matrix_optim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Migration Flows to Match Net Totals via Quadratic Optimization — net_matrix_optim","text":"","code":"m <- matrix(c(0, 100, 30, 70,               50,   0, 45,  5,               60,  35,  0, 40,               20,  25, 20,  0),             nrow = 4, byrow = TRUE,             dimnames = list(orig = LETTERS[1:4], dest = LETTERS[1:4])) addmargins(m) #>      dest #> orig    A   B  C   D Sum #>   A     0 100 30  70 200 #>   B    50   0 45   5 100 #>   C    60  35  0  40 135 #>   D    20  25 20   0  65 #>   Sum 130 160 95 115 500 sum_region(m) #> # A tibble: 4 × 5 #>   region out_mig in_mig  turn   net #>   <chr>    <dbl>  <dbl> <dbl> <dbl> #> 1 A          200    130   330   -70 #> 2 B          100    160   260    60 #> 3 C          135     95   230   -40 #> 4 D           65    115   180    50  net <- c(30, 40, -15, -55) result <- net_matrix_optim(net_tot = net, m = m) result$n |>   addmargins() |>   round(2) #>      dest #> orig       A      B      C     D    Sum #>   A     0.00  90.97  27.22 62.55 180.74 #>   B    73.37   0.00  53.30  0.56 127.23 #>   C    75.07  32.34   0.00 35.32 142.74 #>   D    62.29  43.92  47.22  0.00 153.43 #>   Sum 210.74 167.23 127.74 98.43 604.13 sum_region(result$n) #> # A tibble: 4 × 5 #>   region out_mig in_mig  turn   net #>   <chr>    <dbl>  <dbl> <dbl> <dbl> #> 1 A         181.  211.   391.  30.0 #> 2 B         127.  167.   294.  40.0 #> 3 C         143.  128.   270. -15.0 #> 4 D         153.   98.4  252. -55.0"},{"path":"/reference/net_sr.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate net migration from survival ratios applied to lifetime migration data — net_sr","title":"Estimate net migration from survival ratios applied to lifetime migration data — net_sr","text":"Using survival ratios estimate net migration lifetime migration data","code":""},{"path":"/reference/net_sr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate net migration from survival ratios applied to lifetime migration data — net_sr","text":"","code":"net_sr(   .data,   pop0_col = \"pop0\",   pop1_col = \"pop1\",   survival_ratio_col = \"sr\",   net_children = FALSE,   maternal_exposure = c(0.25, 0.75),   maternal_age_id = 4:9,   maternal_col = pop1_col )"},{"path":"/reference/net_sr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate net migration from survival ratios applied to lifetime migration data — net_sr","text":".data data frame two rows total number lifetime - -migrants separate columns. first row contains totals first time point second row second time point. pop0_col Character string name column containing name initial populations. Default \"pop0\". pop1_col Character string name column containing name end populations. Default \"pop1\". survival_ratio_col Character string name column containing survivor ratios. Default \"sr\". net_children Logical indicate estimate net migration survival ratio exists. Default FALSE. maternal_exposure Vector maternal exposures interval used estimate net migration unknown children age groups. Length correspond number children age groups net migration estimates required. maternal_age_id Row numbers indicate rows correspond maternal age groups end period. maternal_col Name maternal population column, required estimation net migration children.","code":""},{"path":"/reference/net_sr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate net migration from survival ratios applied to lifetime migration data — net_sr","text":"Data frame estimates net migration","code":""},{"path":"/reference/net_sr.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate net migration from survival ratios applied to lifetime migration data — net_sr","text":"Bogue, D. J., Hinze, K., & White, M. (1982). Techniques Estimating Net Migration. Community Family Study Center. University Chicago.","code":""},{"path":"/reference/net_sr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate net migration from survival ratios applied to lifetime migration data — net_sr","text":"","code":"# results to match un manual 1984 (table 24) net_sr(bombay_1951, pop0_col = \"pop_1941\", pop1_col = \"pop_1951\") #> # A tibble: 13 × 10 #>    age_1941 age_1951 pop_1941 pop_1951    sr net_forward net_reverse net_average #>    <fct>    <fct>       <dbl>    <dbl> <dbl>       <dbl>       <dbl>       <dbl> #>  1 0-4      10-14       77135   132870 0.909      62777.      69085.      65931. #>  2 5-9      15-19       85434   170227 0.957      88441.      92386.      90413. #>  3 10-14    20-24       79185   263971 0.947     188975.     199530.     194252. #>  4 15-19    25-29       82603   253964 0.931     177077.     190242.     183659. #>  5 20-24    30-34      126247   195373 0.922      78935.      85585.      82260. #>  6 25-29    35-39      155344   151259 0.916       8948.       9768.       9358. #>  7 30-34    40-44      138843   118383 0.905      -7228.      -7990.      -7609. #>  8 35-39    45-49      109356    76421 0.885     -20359.     -23005.     -21682. #>  9 40-44    50-54       81626    65897 0.855      -3877.      -4535.      -4206. #> 10 45-49    55-59       47062    32265 0.812      -5959.      -7337.      -6648. #> 11 50-54    60-64       36908    22248 0.754      -5562.      -7382.      -6472. #> 12 55-59    65-69       15134     9655 0.673       -524.       -779.       -652. #> 13 60+      70+         25094    10100 0.387        399.       1031.        715. #> # ℹ 2 more variables: pop1_forward <dbl>, pop0_reverse <dbl>    # results to match Bogue, Hinze and White (1982) library(dplyr) alabama_1970 %>%   filter(race == \"white\", sex == \"male\") %>%   select(-race, -sex) %>%   group_by(age_1970) %>%   net_sr(pop0_col = \"pop_1960\", pop1_col = \"pop_1970\",           survival_ratio_col = \"us_census_sr\") #> # A tibble: 17 × 9 #>    age_1970 pop_1960 pop_1970 us_census_sr net_forward net_reverse net_average #>    <fct>       <dbl>    <dbl>        <dbl>       <dbl>       <dbl>       <dbl> #>  1 0-4        110365   105503        0.955        57.0        59.6        58.3 #>  2 5-9        126116   120884        0.947      1481.       1564.       1523.  #>  3 10-14      126346   128656        1.00       2063.       2059.       2061.  #>  4 15-19      119571   118485        1.01      -1704.      -1696.      -1700.  #>  5 20-24      117525   102296        0.989    -13929.     -14085.     -14007.  #>  6 25-29       94148    85778        0.973     -5846.      -6007.      -5926.  #>  7 30-34       72012    74046        0.985      3138.       3187.       3162.  #>  8 35-39       70867    71636        0.980      2176.       2220.       2198.  #>  9 40-44       75168    75179        0.972      2127.       2189.       2158.  #> 10 45-49       76872    73602        0.948       708.        746.        727.  #> 11 50-54       72068    67679        0.933       466.        499.        482.  #> 12 55-59       69002    60807        0.885      -273.       -308.       -291.  #> 13 60-64       60654    52073        0.845       791.        936.        863.  #> 14 65-69       49127    38786        0.750      1917.       2555.       2236.  #> 15 70-74       37344    26632        0.675      1436.       2129.       1783.  #> 16 75-79       32063    17418        0.537       214.        399.        306.  #> 17 80+         51294    16029        0.296       860.       2908.       1884.  #> # ℹ 2 more variables: pop1_forward <dbl>, pop0_reverse <dbl>           # results to match UN manual 1992 (table 6) net_sr(manila_1970, pop0_col = \"pop_1960\", pop1_col = \"pop_1970\",         survival_ratio_col = \"phl_census_sr\") #> # A tibble: 16 × 9 #>    age_1970 pop_1960 pop_1970 phl_census_sr net_forward net_reverse net_average #>    <fct>       <dbl>    <dbl>         <dbl>       <dbl>       <dbl>       <dbl> #>  1 0-4            NA    85870        NA              0           0           0  #>  2 5-9            NA    83054        NA              0           0           0  #>  3 10-14       80275    79489         1.12      -10196.      -9126.      -9661. #>  4 15-19       70875   101410         0.992      31134.      31400.      31267. #>  5 20-24       63250    90410         0.973      28877.      29683.      29280. #>  6 25-29       85618    56055         0.889     -20082.     -22582.     -21332. #>  7 30-34       75793    44648         0.841     -19117.     -22723.     -20920. #>  8 35-39       60037    36963         0.957     -20497.     -21416.     -20957. #>  9 40-44       34813    28873         0.951      -4244.      -4462.      -4353. #> 10 45-49       31927    23678         0.904      -5189.      -5739.      -5464. #> 11 50-54       24297    19063         0.930      -3521.      -3788.      -3655. #> 12 55-59       20207    14484         0.797      -1613.      -2025.      -1819. #> 13 60-64       13714    10205         0.877      -1822.      -2078.      -1950. #> 14 65-69        9366     6405         0.835      -1417.      -1697.      -1557. #> 15 70-74        7921     3746         0.712      -1890.      -2657.      -2274. #> 16 75+         11114     4779         0.562      -1472.      -2617.      -2045. #> # ℹ 2 more variables: pop1_forward <dbl>, pop0_reverse <dbl>         # with children net migration estimate net_sr(manila_1970, pop0_col = \"pop_1960\", pop1_col = \"pop_1970\",         survival_ratio_col = \"phl_census_sr\", net_children = TRUE) #> # A tibble: 16 × 9 #>    age_1970 pop_1960 pop_1970 phl_census_sr net_forward net_reverse net_average #>    <fct>       <dbl>    <dbl>         <dbl>       <dbl>       <dbl>       <dbl> #>  1 0-4            NA    85870        NA           -235.       -605.       -420. #>  2 5-9            NA    83054        NA          -8935.     -10486.      -9710. #>  3 10-14       80275    79489         1.12      -10196.      -9126.      -9661. #>  4 15-19       70875   101410         0.992      31134.      31400.      31267. #>  5 20-24       63250    90410         0.973      28877.      29683.      29280. #>  6 25-29       85618    56055         0.889     -20082.     -22582.     -21332. #>  7 30-34       75793    44648         0.841     -19117.     -22723.     -20920. #>  8 35-39       60037    36963         0.957     -20497.     -21416.     -20957. #>  9 40-44       34813    28873         0.951      -4244.      -4462.      -4353. #> 10 45-49       31927    23678         0.904      -5189.      -5739.      -5464. #> 11 50-54       24297    19063         0.930      -3521.      -3788.      -3655. #> 12 55-59       20207    14484         0.797      -1613.      -2025.      -1819. #> 13 60-64       13714    10205         0.877      -1822.      -2078.      -1950. #> 14 65-69        9366     6405         0.835      -1417.      -1697.      -1557. #> 15 70-74        7921     3746         0.712      -1890.      -2657.      -2274. #> 16 75+         11114     4779         0.562      -1472.      -2617.      -2045. #> # ℹ 2 more variables: pop1_forward <dbl>, pop0_reverse <dbl>"},{"path":"/reference/net_vs.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate net migration from vital statistics — net_vs","title":"Estimate net migration from vital statistics — net_vs","text":"Estimate net migration vital statistics","code":""},{"path":"/reference/net_vs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate net migration from vital statistics — net_vs","text":"","code":"net_vs(   .data,   pop0_col = NULL,   pop1_col = NULL,   births_col = \"births\",   deaths_col = \"deaths\" )"},{"path":"/reference/net_vs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate net migration from vital statistics — net_vs","text":".data data frame two rows total number lifetime - -migrants separate columns. first row contains totals first time point second row second time point. pop0_col Character string name column containing name initial populations. Default \"pop0\". pop1_col Character string name column containing name end populations. Default \"pop1\". births_col Character string name column containing name births period. Default \"births\". deaths_col Character string name column containing name deaths period. Default \"deaths\".","code":""},{"path":"/reference/net_vs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate net migration from vital statistics — net_vs","text":"tibble additional columns population change (pop_change), natural population increase (natural_inc) net migration (net) period.","code":""},{"path":"/reference/net_vs.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate net migration from vital statistics — net_vs","text":"Bogue, D. J., Hinze, K., & White, M. (1982). Techniques Estimating Net Migration. Community Family Study Center. University Chicago.","code":""},{"path":"/reference/net_vs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate net migration from vital statistics — net_vs","text":"","code":"library(dplyr) d <- alabama_1970 %>%   group_by(race, sex) %>%   summarise(births = sum(pop_1960[1:2]),             pop_1960 = sum(pop_1960) - births,             pop_1970 = sum(pop_1970)) %>%   ungroup() #> `summarise()` has grouped output by 'race'. You can override using the #> `.groups` argument. d #> # A tibble: 4 × 5 #>   race      sex    births pop_1960 pop_1970 #>   <chr>     <chr>   <dbl>    <dbl>    <dbl> #> 1 non-white female 126886   515483   483882 #> 2 non-white male   131767   467648   426452 #> 3 white     female 224034  1159548  1298342 #> 4 white     male   236481  1124061  1235489  d %>%   mutate(deaths = c(51449, 58845, 86880, 123220)) %>%   net_vs(pop0_col = \"pop_1960\", pop1_col = \"pop_1970\") #> # A tibble: 4 × 9 #>   race      sex   births pop_1960 pop_1970 deaths pop_change natural_inc     net #>   <chr>     <chr>  <dbl>    <dbl>    <dbl>  <dbl>      <dbl>       <dbl>   <dbl> #> 1 non-white fema… 126886   515483   483882  51449     -31601       75437 -107038 #> 2 non-white male  131767   467648   426452  58845     -41196       72922 -114118 #> 3 white     fema… 224034  1159548  1298342  86880     138794      137154    1640 #> 4 white     male  236481  1124061  1235489 123220     111428      113261   -1833"},{"path":"/reference/new_england_1960.html","id":null,"dir":"Reference","previous_headings":"","what":"New England male white-native population totals in 1950 and 1960 by place of birth and age — new_england_1960","title":"New England male white-native population totals in 1950 and 1960 by place of birth and age — new_england_1960","text":"New England population data place birth age 1950 1960 male white native born.","code":""},{"path":"/reference/new_england_1960.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"New England male white-native population totals in 1950 and 1960 by place of birth and age — new_england_1960","text":"","code":"new_england_1960"},{"path":"/reference/new_england_1960.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"New England male white-native population totals in 1950 and 1960 by place of birth and age — new_england_1960","text":"Data frame 72 rows 4 columns: birthplace Place birth (US Census area) year Year age_1960 Age group 1960 pop_1950 Enumerated population 1950 pop_1960 Enumerated population 1960","code":""},{"path":"/reference/new_england_1960.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"New England male white-native population totals in 1950 and 1960 by place of birth and age — new_england_1960","text":"United States Bureau Census, United States Census Population: 1960..Subject Reports..\"State birth\" (Washington, D.C.), table 25, pp. 61-62. Persons place birth reported distributed pro rata among place birth reported. Published United Nations Department Economic Social Affairs Population Division. (1970). Methods measuring internal migration. United Nations Department Economic Social Affairs Population Division - 1970 - Methods measuring internal migration https://www.un.org/development/desa/pd/sites/www.un.org.development.desa.pd/files/files/documents/2020/Jan/manual_vi_methods_of_measuring_internal_migration.pdf","code":""},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"/reference/quadratic_eqn.html","id":null,"dir":"Reference","previous_headings":"","what":"Solutions from the quadratic equation — quadratic_eqn","title":"Solutions from the quadratic equation — quadratic_eqn","text":"General function solve classic quadratic equation: $$ x^2 + b x + c = 0 $$","code":""},{"path":"/reference/quadratic_eqn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Solutions from the quadratic equation — quadratic_eqn","text":"","code":"quadratic_eqn(a, b, c)"},{"path":"/reference/quadratic_eqn.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Solutions from the quadratic equation — quadratic_eqn","text":"Adapted https://rpubs.com/kikihatzistavrou/80124","code":""},{"path":"/reference/quadratic_eqn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Solutions from the quadratic equation — quadratic_eqn","text":"Numeric value quadratic term x. b Numeric value multiplicative term x. c Numeric value constant term.","code":""},{"path":"/reference/quadratic_eqn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Solutions from the quadratic equation — quadratic_eqn","text":"Vector two values corresponding roots quadratic equation.","code":""},{"path":"/reference/quadratic_eqn.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Solutions from the quadratic equation — quadratic_eqn","text":"Guy J. Abel","code":""},{"path":"/reference/quadratic_eqn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Solutions from the quadratic equation — quadratic_eqn","text":"","code":"quadratic_eqn(a = 2, b = 4, c = -6) #> [1]  1 -3"},{"path":"/reference/rc_model_fund.html","id":null,"dir":"Reference","previous_headings":"","what":"Fundamental parameters for Rogers-Castro migration schedule — rc_model_fund","title":"Fundamental parameters for Rogers-Castro migration schedule — rc_model_fund","text":"Set fundamental parameters Rogers-Castro migration age schedule, suggested Rogers Castro (1981).","code":""},{"path":"/reference/rc_model_fund.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fundamental parameters for Rogers-Castro migration schedule — rc_model_fund","text":"","code":"rc_model_fund"},{"path":"/reference/rc_model_fund.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Fundamental parameters for Rogers-Castro migration schedule — rc_model_fund","text":"tibble two columns seven rows: param Character string seven parameters value Parameter values","code":""},{"path":"/reference/rc_model_fund.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Fundamental parameters for Rogers-Castro migration schedule — rc_model_fund","text":"Rogers, ., L. J. Castro. (1981). Model Migration Schedules. IIASA Research Report 81 RR-81-30","code":""},{"path":"/reference/rc_model_un.html","id":null,"dir":"Reference","previous_headings":"","what":"Model parameters for six Rogers-Castro migration schedules proposed by UN DESA — rc_model_un","title":"Model parameters for six Rogers-Castro migration schedules proposed by UN DESA — rc_model_un","text":"Sets parameters Rogers-Castro migration age schedule proposed UN DESA","code":""},{"path":"/reference/rc_model_un.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model parameters for six Rogers-Castro migration schedules proposed by UN DESA — rc_model_un","text":"","code":"rc_model_un"},{"path":"/reference/rc_model_un.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Model parameters for six Rogers-Castro migration schedules proposed by UN DESA — rc_model_un","text":"tibble five columns 84 rows: schedule Character string full name schedule value Character string abbreviated name schedule param Character string sex schedule param Character string seven parameters value Parameter values","code":""},{"path":"/reference/rc_model_un.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Model parameters for six Rogers-Castro migration schedules proposed by UN DESA — rc_model_un","text":"United Nations Department Economic Social Affairs Population Division. (1992). Preparing Migration Data Subnational Population Projections. http://www.un.org/esa/population/techcoop/IntMig/migdata_popproj/migdata_popproj.html","code":""},{"path":"/reference/rescale_integer_sum.html","id":null,"dir":"Reference","previous_headings":"","what":"Rescale integer vector to a set sum — rescale_integer_sum","title":"Rescale integer vector to a set sum — rescale_integer_sum","text":"want rescale set numbers sum given value want rescaled values integers.","code":""},{"path":"/reference/rescale_integer_sum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rescale integer vector to a set sum — rescale_integer_sum","text":"","code":"rescale_integer_sum(x, tot)"},{"path":"/reference/rescale_integer_sum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rescale integer vector to a set sum — rescale_integer_sum","text":"x Vector numeric values tot Numeric integer value rescale sum .","code":""},{"path":"/reference/rescale_integer_sum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rescale integer vector to a set sum — rescale_integer_sum","text":"Vector integer values sum tot","code":""},{"path":[]},{"path":"/reference/rescale_integer_sum.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Rescale integer vector to a set sum — rescale_integer_sum","text":"Guy J. Abel","code":""},{"path":"/reference/rescale_integer_sum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rescale integer vector to a set sum — rescale_integer_sum","text":"","code":"x <- rnorm(n = 10, mean = 5, sd = 20) y <- rescale_integer_sum(x, tot = 10) y #>  [1]  0 -1  2  2  0  0  1  4  4 -2 sum(y) #> [1] 10  for(i in 1:10){   y <- rescale_integer_sum(x = rpois(n = 10, lambda = 10), tot = 1000)   print(sum(y)) } #> [1] 1000 #> [1] 1000 #> [1] 1000 #> [1] 1000 #> [1] 1000 #> [1] 1000 #> [1] 1000 #> [1] 1000 #> [1] 1000 #> [1] 1000"},{"path":"/reference/rescale_net.html","id":null,"dir":"Reference","previous_headings":"","what":"Rescale net migration total to a global zero sum — rescale_net","title":"Rescale net migration total to a global zero sum — rescale_net","text":"Modify set net migration (numbers) sum zero.","code":""},{"path":"/reference/rescale_net.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rescale net migration total to a global zero sum — rescale_net","text":"","code":"rescale_net(   x,   method = \"no-switches\",   w = rep(1, length(x)),   integer_result = TRUE )"},{"path":"/reference/rescale_net.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rescale net migration total to a global zero sum — rescale_net","text":"x Vector net migration values method Method used adjust net migration values x obtain global zero sum. default method=\"-switches\". Can also take values method=\"switches\". See details explanation method. w Weights used rescaling method integer_result Logical operator indicate output integers, default TRUE.","code":""},{"path":"/reference/rescale_net.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rescale net migration total to a global zero sum — rescale_net","text":"Rescales net migration number regions vector x sum zero.  method=\"-switches\" rescaling values done positive negative values separately, ensure final global sum zero. method=\"switches\" mean unscaled net migration subtracted value.","code":""},{"path":"/reference/rescale_net.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Rescale net migration total to a global zero sum — rescale_net","text":"Abel, G. J. (2018). Non-zero trajectories long-run net migration assumptions global population projection models. Demographic Research 38, (54) 1635–1662","code":""},{"path":"/reference/rescale_net.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Rescale net migration total to a global zero sum — rescale_net","text":"Guy J. Abel","code":""},{"path":"/reference/rescale_net.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rescale net migration total to a global zero sum — rescale_net","text":"","code":"# net migration in regions countries (does not add up to zero) x <- c(-200, -30, -5, 0, 10, 20, 60, 80) x #> [1] -200  -30   -5    0   10   20   60   80 sum(x) #> [1] -65 # rescale  y1 <- rescale_net(x) y1 #> [1] -172  -26   -4    0   12   24   71   95 sum(y1) #> [1] 0 # rescale without integer restriction y2 <- rescale_net(x, integer_result = FALSE) y2 #> [1] -172.340426  -25.851064   -4.308511    0.000000   11.911765   23.823529 #> [7]   71.470588   95.294118 sum(y2) #> [1] 7.993606e-15 # rescale allowing switching of signs (small negative value becomes positive) y3 <- rescale_net(x, method = \"switches\") y3 #> [1] -191  -22    3    8   18   28   68   88 sum(y3) #> [1] 0"},{"path":"/reference/str_wrap_n.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrap character string to fit a target number of lines — str_wrap_n","title":"Wrap character string to fit a target number of lines — str_wrap_n","text":"Inserts line breaks spaces, position line breaks chosen provide balanced length line.","code":""},{"path":"/reference/str_wrap_n.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrap character string to fit a target number of lines — str_wrap_n","text":"","code":"str_wrap_n(string = NULL, n = 2)"},{"path":"/reference/str_wrap_n.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrap character string to fit a target number of lines — str_wrap_n","text":"string Character string broken n Number lines break string ","code":""},{"path":"/reference/str_wrap_n.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrap character string to fit a target number of lines — str_wrap_n","text":"original string line breaks inserted optimal positions.","code":""},{"path":"/reference/str_wrap_n.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Wrap character string to fit a target number of lines — str_wrap_n","text":"Function intended small number line breaks. n argument allowed greater 8 combinations possible line breaks explored. number possible solutions provide equally balanced number characters line, function returns character string number spaces distributed evenly.","code":""},{"path":"/reference/str_wrap_n.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrap character string to fit a target number of lines — str_wrap_n","text":"","code":"str_wrap_n(string = \"a bb ccc dddd eeee ffffff\", n = 2) #> [1] \"a bb ccc dddd\\neeee ffffff\" str_wrap_n(string = \"a bb ccc dddd eeee ffffff\", n = 4) #> [1] \"a bb\\nccc dddd\\neeee\\nffffff\" str_wrap_n(string = \"a bb ccc dddd eeee ffffff\", n = 8) #> Asking for more lines than words #> [1] \"a\\nbb\\nccc\\ndddd\\neeee\\nffffff\" str_wrap_n(string = c(\"a bb\", \"a bb ccc\"), n = 2) #> [1] \"a\\nbb\"     \"a bb\\nccc\""},{"path":"/reference/str_wrap_n_single.html","id":null,"dir":"Reference","previous_headings":"","what":"Single line wrap for string — str_wrap_n_single","title":"Single line wrap for string — str_wrap_n_single","text":"Single line wrap string","code":""},{"path":"/reference/str_wrap_n_single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Single line wrap for string — str_wrap_n_single","text":"","code":"str_wrap_n_single(string = NULL, n = 2)"},{"path":"/reference/str_wrap_n_single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Single line wrap for string — str_wrap_n_single","text":"string string str_wrap_n n n str_wrap_n","code":""},{"path":"/reference/str_wrap_n_single.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Single line wrap for string — str_wrap_n_single","text":"String line breaks","code":""},{"path":"/reference/stripe_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a stripped matrix with non-uniform block sizes. — stripe_matrix","title":"Create a stripped matrix with non-uniform block sizes. — stripe_matrix","text":"Create stripped matrix non-uniform block sizes.","code":""},{"path":"/reference/stripe_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a stripped matrix with non-uniform block sizes. — stripe_matrix","text":"","code":"stripe_matrix(x = NULL, s = NULL, byrow = FALSE, dimnames = NULL)"},{"path":"/reference/stripe_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a stripped matrix with non-uniform block sizes. — stripe_matrix","text":"x Vector numbers identify stripe. s Vector values size stripes, order depending byrow byrow Logical value. FALSE (default) stripes filled columns, otherwise stripes matrix filled rows. dimnames Character string name attribute basis stripped matrix. NULL vector length s provides basis row column names.","code":""},{"path":"/reference/stripe_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a stripped matrix with non-uniform block sizes. — stripe_matrix","text":"Returns matrix stripe sizes determined s argument. stripe filled value taken x.","code":""},{"path":[]},{"path":"/reference/stripe_matrix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a stripped matrix with non-uniform block sizes. — stripe_matrix","text":"Guy J. Abel","code":""},{"path":"/reference/stripe_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a stripped matrix with non-uniform block sizes. — stripe_matrix","text":"","code":"stripe_matrix(x = 1:44, s = c(2,3,4,2), dimnames = LETTERS[1:4], byrow = TRUE) #>    A1 A2 B1 B2 B3 C1 C2 C3 C4 D1 D2 #> A1  1  1  2  2  2  3  3  3  3  4  4 #> A2  5  5  6  6  6  7  7  7  7  8  8 #> B1  9  9 10 10 10 11 11 11 11 12 12 #> B2 13 13 14 14 14 15 15 15 15 16 16 #> B3 17 17 18 18 18 19 19 19 19 20 20 #> C1 21 21 22 22 22 23 23 23 23 24 24 #> C2 25 25 26 26 26 27 27 27 27 28 28 #> C3 29 29 30 30 30 31 31 31 31 32 32 #> C4 33 33 34 34 34 35 35 35 35 36 36 #> D1 37 37 38 38 38 39 39 39 39 40 40 #> D2 41 41 42 42 42 43 43 43 43 44 44"},{"path":"/reference/sum_bilat.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of bilateral flows, counter-flow and net migration flow — sum_bilat","title":"Summary of bilateral flows, counter-flow and net migration flow — sum_bilat","text":"Summary bilateral flows, counter-flow net migration flow","code":""},{"path":"/reference/sum_bilat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of bilateral flows, counter-flow and net migration flow — sum_bilat","text":"","code":"sum_bilat(m, label = \"flow\", orig = \"orig\", dest = \"dest\", flow = \"flow\")"},{"path":"/reference/sum_bilat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of bilateral flows, counter-flow and net migration flow — sum_bilat","text":"m matrix data frame origin-destination flows. matrix first second dimensions correspond origin destination respectively. data frame ensure correct column names passed orig, dest flow. label Character string prefix calculated columns. Can take values flow stream orig Character string origin column name (m data frame rather matrix) dest Character string destination column name (m data frame rather matrix) flow Character string flow column name (m data frame rather matrix)","code":""},{"path":"/reference/sum_bilat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary of bilateral flows, counter-flow and net migration flow — sum_bilat","text":"tibble columns orig, destination, corridor, flow, counter-flow net flow bilateral pair.","code":""},{"path":"/reference/sum_bilat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary of bilateral flows, counter-flow and net migration flow — sum_bilat","text":"","code":"# using matrix r <- LETTERS[1:4] m <- matrix(data = c(0, 100, 30, 70, 50, 0, 45, 5, 60, 35, 0, 40, 20, 25, 20, 0),             nrow = 4, ncol = 4, dimnames = list(orig = r, dest = r), byrow = TRUE) m #>     dest #> orig  A   B  C  D #>    A  0 100 30 70 #>    B 50   0 45  5 #>    C 60  35  0 40 #>    D 20  25 20  0 sum_bilat(m) #> # A tibble: 12 × 8 #>    orig  dest  corridor pair   flow counter_flow net_flow interchange #>    <chr> <chr> <chr>    <chr> <dbl>        <dbl>    <dbl>       <dbl> #>  1 B     A     B -> A   A - B    50          100      -50         150 #>  2 C     A     C -> A   A - C    60           30       30          90 #>  3 D     A     D -> A   A - D    20           70      -50          90 #>  4 A     B     A -> B   A - B   100           50       50         150 #>  5 C     B     C -> B   B - C    35           45      -10          80 #>  6 D     B     D -> B   B - D    25            5       20          30 #>  7 A     C     A -> C   A - C    30           60      -30          90 #>  8 B     C     B -> C   B - C    45           35       10          80 #>  9 D     C     D -> C   C - D    20           40      -20          60 #> 10 A     D     A -> D   A - D    70           20       50          90 #> 11 B     D     B -> D   B - D     5           25      -20          30 #> 12 C     D     C -> D   C - D    40           20       20          60  # using data frame library(dplyr) library(tidyr) d <- expand_grid(orig = r, dest = r, sex = c(\"female\", \"male\")) %>%   mutate(flow = sample(x = 1:100, size = 32)) d #> # A tibble: 32 × 4 #>    orig  dest  sex     flow #>    <chr> <chr> <chr>  <int> #>  1 A     A     female    48 #>  2 A     A     male      56 #>  3 A     B     female    82 #>  4 A     B     male      17 #>  5 A     C     female    83 #>  6 A     C     male      24 #>  7 A     D     female    22 #>  8 A     D     male      89 #>  9 B     A     female    90 #> 10 B     A     male      73 #> # ℹ 22 more rows  # orig-dest summary of sex-specific flows d %>%   group_by(sex) %>%   sum_bilat() #> # A tibble: 24 × 9 #> # Groups:   sex [2] #>    orig  dest  corridor pair  sex     flow counter_flow net_flow interchange #>    <chr> <chr> <chr>    <chr> <chr>  <int>        <int>    <int>       <int> #>  1 A     B     A -> B   A - B female    82           90       -8         172 #>  2 A     B     A -> B   A - B male      17           73      -56          90 #>  3 A     C     A -> C   A - C female    83           72       11         155 #>  4 A     C     A -> C   A - C male      24           96      -72         120 #>  5 A     D     A -> D   A - D female    22           78      -56         100 #>  6 A     D     A -> D   A - D male      89           15       74         104 #>  7 B     A     B -> A   A - B female    90           82        8         172 #>  8 B     A     B -> A   A - B male      73           17       56          90 #>  9 B     C     B -> C   B - C female    60           63       -3         123 #> 10 B     C     B -> C   B - C male      94           10       84         104 #> # ℹ 14 more rows  # use group_by to distinguish orig-dest tables d %>%   group_by(sex) %>%   sum_bilat() #> # A tibble: 24 × 9 #> # Groups:   sex [2] #>    orig  dest  corridor pair  sex     flow counter_flow net_flow interchange #>    <chr> <chr> <chr>    <chr> <chr>  <int>        <int>    <int>       <int> #>  1 A     B     A -> B   A - B female    82           90       -8         172 #>  2 A     B     A -> B   A - B male      17           73      -56          90 #>  3 A     C     A -> C   A - C female    83           72       11         155 #>  4 A     C     A -> C   A - C male      24           96      -72         120 #>  5 A     D     A -> D   A - D female    22           78      -56         100 #>  6 A     D     A -> D   A - D male      89           15       74         104 #>  7 B     A     B -> A   A - B female    90           82        8         172 #>  8 B     A     B -> A   A - B male      73           17       56          90 #>  9 B     C     B -> C   B - C female    60           63       -3         123 #> 10 B     C     B -> C   B - C male      94           10       84         104 #> # ℹ 14 more rows"},{"path":"/reference/sum_expand.html","id":null,"dir":"Reference","previous_headings":"","what":"Sum bilateral data to include aggregate bilateral totals for origin and destination meta areas — sum_expand","title":"Sum bilateral data to include aggregate bilateral totals for origin and destination meta areas — sum_expand","text":"Expand matrix data frame migration data include aggregate sums corresponding origin destination meta regions.","code":""},{"path":"/reference/sum_expand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sum bilateral data to include aggregate bilateral totals for origin and destination meta areas — sum_expand","text":"","code":"sum_expand(   m,   return_matrix = FALSE,   guess_order = TRUE,   area_first = TRUE,   orig = \"orig\",   dest = \"dest\",   flow = \"flow\",   orig_area = \"orig_area\",   dest_area = \"dest_area\" )"},{"path":"/reference/sum_expand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sum bilateral data to include aggregate bilateral totals for origin and destination meta areas — sum_expand","text":"m matrix data frame origin-destination flows. matrix first second dimensions correspond origin destination respectively. data frame ensure correct column names passed orig, dest flow. return_matrix Logical return matrix. Default FALSE. guess_order Logical return matrix data frame ordered origin destination area names end block. Default TRUE. FALSE returns matrix data frame based alphabetical order origin destinations. area_first Order area sums placed origin destination values. Default TRUE orig Character string origin column name (m data frame rather matrix) dest Character string destination column name (m data frame rather matrix) flow Character string flow column name (m data frame rather matrix) orig_area Vector labels origin areas row m. dest_area Vector labels destination areas row m.","code":""},{"path":"/reference/sum_expand.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sum bilateral data to include aggregate bilateral totals for origin and destination meta areas — sum_expand","text":"tibble matrix additional row columns (matrices) aggregate sums origin destination meta-regions","code":""},{"path":"/reference/sum_expand.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sum bilateral data to include aggregate bilateral totals for origin and destination meta areas — sum_expand","text":"","code":"## ## from matrix ## m <- block_matrix(x = 1:16, b = c(2,3,4,2)) m #>    A1 A2 B1 B2 B3 C1 C2 C3 C4 D1 D2 #> A1  1  1  5  5  5  9  9  9  9 13 13 #> A2  1  1  5  5  5  9  9  9  9 13 13 #> B1  2  2  6  6  6 10 10 10 10 14 14 #> B2  2  2  6  6  6 10 10 10 10 14 14 #> B3  2  2  6  6  6 10 10 10 10 14 14 #> C1  3  3  7  7  7 11 11 11 11 15 15 #> C2  3  3  7  7  7 11 11 11 11 15 15 #> C3  3  3  7  7  7 11 11 11 11 15 15 #> C4  3  3  7  7  7 11 11 11 11 15 15 #> D1  4  4  8  8  8 12 12 12 12 16 16 #> D2  4  4  8  8  8 12 12 12 12 16 16  # requires a vector of origin and destination areas a <- rep(LETTERS[1:4], times = c(2,3,4,2)) a #>  [1] \"A\" \"A\" \"B\" \"B\" \"B\" \"C\" \"C\" \"C\" \"C\" \"D\" \"D\" sum_expand(m = m, orig_area = a, dest_area = a) #> # A tibble: 225 × 3 #>    orig  dest   flow #>    <chr> <chr> <int> #>  1 A     A         4 #>  2 A     A1        2 #>  3 A     A2        2 #>  4 A     B        30 #>  5 A     B1       10 #>  6 A     B2       10 #>  7 A     B3       10 #>  8 A     C        72 #>  9 A     C1       18 #> 10 A     C2       18 #> # ℹ 215 more rows  # place area sums after regions sum_expand(m = m, orig_area = a, dest_area = a, area_first = FALSE) #> # A tibble: 225 × 3 #>    orig  dest   flow #>    <chr> <chr> <int> #>  1 A1    A1        1 #>  2 A1    A2        1 #>  3 A1    A         2 #>  4 A1    B1        5 #>  5 A1    B2        5 #>  6 A1    B3        5 #>  7 A1    B        15 #>  8 A1    C1        9 #>  9 A1    C2        9 #> 10 A1    C3        9 #> # ℹ 215 more rows  ## ## from large data frame ## if (FALSE) { # \\dontrun{ library(tidyverse) library(countrycode)  # download Abel and Cohen (2019) estimates f <- read_csv(\"https://ndownloader.figshare.com/files/38016762\", show_types = FALSE) f  # 1990-1995 flow estimates f %>%   filter(year0 == 1990) %>%   mutate(     orig_area = countrycode(sourcevar = orig, custom_dict = dict_ims,                             origin = \"iso3c\", destination = \"region\"),     dest_area = countrycode(sourcevar = dest, custom_dict = dict_ims,                             origin = \"iso3c\", destination = \"region\")   ) %>%   sum_expand(flow = \"da_pb_closed\", return_matrix = FALSE)  # by group (period) f %>%   mutate(     orig_area = countrycode(sourcevar = orig, custom_dict = dict_ims,                             origin = \"iso3c\", destination = \"region\"),     dest_area = countrycode(sourcevar = dest, custom_dict = dict_ims,                             origin = \"iso3c\", destination = \"region\")   ) %>%   group_by(year0) %>%   sum_expand(flow = \"da_pb_closed\", return_matrix = FALSE) } # }"},{"path":"/reference/sum_lump.html","id":null,"dir":"Reference","previous_headings":"","what":"Sum and lump together small flows into a ","title":"Sum and lump together small flows into a ","text":"Lump together regions/countries flows given threshold.","code":""},{"path":"/reference/sum_lump.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sum and lump together small flows into a ","text":"","code":"sum_lump(   m,   threshold = 1,   lump = \"flow\",   other_level = \"other\",   complete = FALSE,   fill = 0,   return_matrix = TRUE,   orig = \"orig\",   dest = \"dest\",   flow = \"flow\" )"},{"path":"/reference/sum_lump.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sum and lump together small flows into a ","text":"m matrix data frame origin-destination flows. matrix first second dimensions correspond origin destination respectively. data frame ensure correct column names passed orig, dest flow. threshold Numeric value used determine small flows, origins destinations grouped (lumped) together. lump Character string indicate apply threshold. Choose flow values, migration region /migration region. other_level Character string origin /destination label lumped values threshold. Default \"\". complete Logical value return tibble complete origin-destination combinations fill Numeric value fill small cells threshold complete = TRUE. Default zero. return_matrix Logical return matrix. Default FALSE. orig Character string origin column name (m data frame rather matrix) dest Character string destination column name (m data frame rather matrix) flow Character string flow column name (m data frame rather matrix)","code":""},{"path":"/reference/sum_lump.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sum and lump together small flows into a ","text":"tibble additional origins /destinations region based grouping together small values threshold argument lump argument indicate apply threshold.","code":""},{"path":"/reference/sum_lump.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sum and lump together small flows into a ","text":"lump argument can take values flow bilat apply threshold data values region migration, imm apply threshold incoming region region emi apply threshold outgoing region region.","code":""},{"path":"/reference/sum_lump.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sum and lump together small flows into a ","text":"","code":"r <- LETTERS[1:4] m <- matrix(data = c(0, 100, 30, 10, 50, 0, 50, 5, 10, 40, 0, 40, 20, 25, 20, 0),             nrow = 4, ncol = 4, dimnames = list(orig = r, dest = r), byrow = TRUE) m #>     dest #> orig  A   B  C  D #>    A  0 100 30 10 #>    B 50   0 50  5 #>    C 10  40  0 40 #>    D 20  25 20  0  # threshold on in and out region sum_lump(m, threshold = 100, lump = c(\"in\", \"out\")) #> Joining with `by = join_by(dest)` #> Joining with `by = join_by(orig)` #> # A tibble: 9 × 3 #>   orig  dest   flow #>   <chr> <chr> <dbl> #> 1 A     B       100 #> 2 A     C        30 #> 3 A     other    10 #> 4 B     B         0 #> 5 B     C        50 #> 6 B     other    55 #> 7 other B        65 #> 8 other C        20 #> 9 other other    70  # threshold on flows (default) sum_lump(m, threshold = 40) #> # A tibble: 6 × 3 #>   orig  dest   flow #>   <chr> <chr> <dbl> #> 1 A     B       100 #> 2 B     A        50 #> 3 B     C        50 #> 4 C     B        40 #> 5 C     D        40 #> 6 other other   120  # return a matrix (only possible when input is a matrix and # complete = TRUE) with small values replaced by zeros sum_lump(m, threshold = 50, complete = TRUE) #>        dest #> orig      A   B   C   D other #>   A       0 100   0   0     0 #>   B      50   0  50   0     0 #>   C       0   0   0   0     0 #>   D       0   0   0   0     0 #>   other   0   0   0   0   200  # return a data frame with small values replaced with zero sum_lump(m, threshold = 80, complete = TRUE, return_matrix = FALSE) #> # A tibble: 25 × 3 #>    orig  dest   flow #>    <chr> <chr> <dbl> #>  1 A     A         0 #>  2 A     B       100 #>  3 A     C         0 #>  4 A     D         0 #>  5 A     other     0 #>  6 B     A         0 #>  7 B     B         0 #>  8 B     C         0 #>  9 B     D         0 #> 10 B     other     0 #> # ℹ 15 more rows  if (FALSE) { # \\dontrun{ # data frame (tidy) format library(tidyverse)  # download Abel and Cohen (2019) estimates f <- read_csv(\"https://ndownloader.figshare.com/files/38016762\", show_types = FALSE) f  # large 1990-1995 flow estimates f %>%   filter(year0 == 1990) %>%   sum_lump(flow = \"da_pb_closed\", threshold = 1e5)  # large flow estimates for each year f %>%   group_by(year0) %>%   sum_lump(flow = \"da_pb_closed\", threshold = 1e5) } # }"},{"path":"/reference/sum_net.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate net migration from an origin-destination migration flow matrix. — sum_net","title":"Calculate net migration from an origin-destination migration flow matrix. — sum_net","text":"Sums regions flows obtain net migration sums.","code":""},{"path":"/reference/sum_net.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate net migration from an origin-destination migration flow matrix. — sum_net","text":"","code":"sum_net(m, region = 1:dim(m)[1])"},{"path":"/reference/sum_net.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate net migration from an origin-destination migration flow matrix. — sum_net","text":"m Matrix origin-destination flows, first second dimensions correspond origin destination respectively. region Integer value corresponding region net migration sum desired. return sums regions default.","code":""},{"path":"/reference/sum_net.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate net migration from an origin-destination migration flow matrix. — sum_net","text":"Returns numeric value sum single block.","code":""},{"path":"/reference/sum_net.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate net migration from an origin-destination migration flow matrix. — sum_net","text":"Guy J. Abel","code":""},{"path":"/reference/sum_net.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate net migration from an origin-destination migration flow matrix. — sum_net","text":"","code":"r <- LETTERS[1:4] m <- matrix(data = 1:16, nrow = 4, ncol = 4,             dimnames = list(orig = r, dest = r)) m #>     dest #> orig A B  C  D #>    A 1 5  9 13 #>    B 2 6 10 14 #>    C 3 7 11 15 #>    D 4 8 12 16 sum_net(m) #>   A   B   C   D  #> -18  -6   6  18"},{"path":"/reference/sum_od.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract a classic origin-destination migration flow matrix. — sum_od","title":"Extract a classic origin-destination migration flow matrix. — sum_od","text":"Extract classic origin-destination migration flow matrix detailed dis-aggregation flows stored (array). Primarily intended work output ffs_demo.","code":""},{"path":"/reference/sum_od.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract a classic origin-destination migration flow matrix. — sum_od","text":"","code":"sum_od(x = NULL, zero_diag = TRUE, add_margins = TRUE)"},{"path":"/reference/sum_od.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract a classic origin-destination migration flow matrix. — sum_od","text":"x Array origin-destination matrices, first second dimensions correspond origin destination respectively. Higher dimension(s) refer additional migrant characteristic(s). zero_diag Logical indicate set diagonal terms zero. Default TRUE. add_margins Logical indicate add row column immigration emigration totals. Default TRUE","code":""},{"path":"/reference/sum_od.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract a classic origin-destination migration flow matrix. — sum_od","text":"Matrix summing first second dimension. Set diagonals zero. Returns matrix object origin-destination flows","code":""},{"path":[]},{"path":"/reference/sum_region.html","id":null,"dir":"Reference","previous_headings":"","what":"Unilateral summaries of in-, out-, turnover and net-migration totals from an origin-destination migration flow matrix or data frame. — sum_region","title":"Unilateral summaries of in-, out-, turnover and net-migration totals from an origin-destination migration flow matrix or data frame. — sum_region","text":"Unilateral summaries -, -, turnover net-migration totals origin-destination migration flow matrix data frame. Alias sum_region() international data Alias sum_region() general naming Alias sum_unilat() explicit naming","code":""},{"path":"/reference/sum_region.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unilateral summaries of in-, out-, turnover and net-migration totals from an origin-destination migration flow matrix or data frame. — sum_region","text":"","code":"sum_region(   m,   drop_diagonal = TRUE,   orig = \"orig\",   dest = \"dest\",   flow = \"flow\",   international = FALSE,   include_net = TRUE,   na_rm = TRUE )  sum_country(   m,   drop_diagonal = TRUE,   orig = \"orig\",   dest = \"dest\",   flow = \"flow\",   include_net = TRUE,   international = TRUE,   na_rm = TRUE )  sum_unilat(   m,   drop_diagonal = TRUE,   orig = \"orig\",   dest = \"dest\",   flow = \"flow\",   include_net = TRUE,   international = TRUE,   na_rm = TRUE )  sum_unilateral(   m,   drop_diagonal = TRUE,   orig = \"orig\",   dest = \"dest\",   flow = \"flow\",   include_net = TRUE,   international = TRUE,   na_rm = TRUE )"},{"path":"/reference/sum_region.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unilateral summaries of in-, out-, turnover and net-migration totals from an origin-destination migration flow matrix or data frame. — sum_region","text":"m matrix data frame origin-destination flows. matrix first second dimensions correspond origin destination respectively. data frame ensure correct column names passed orig, dest flow. drop_diagonal Logical indicate dropping diagonal terms, origin destination , calculation totals. Default TRUE. orig Character string origin column name (m data frame rather matrix) dest Character string destination column name (m data frame rather matrix) flow Character string flow column name (m data frame rather matrix) international Logical indicate flows international. include_net Logical indicate inclusion net migration total column region, addition total - -flows. Default TRUE. na_rm Logical indicate remove NA values m calculating migration flow totals. Default set TRUE.","code":""},{"path":"/reference/sum_region.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unilateral summaries of in-, out-, turnover and net-migration totals from an origin-destination migration flow matrix or data frame. — sum_region","text":"tibble total -, - turnover flows region.","code":""},{"path":"/reference/sum_region.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unilateral summaries of in-, out-, turnover and net-migration totals from an origin-destination migration flow matrix or data frame. — sum_region","text":"","code":"# matrix r <- LETTERS[1:4] m <- matrix(data = c(0, 100, 30, 70, 50, 0, 45, 5, 60, 35, 0, 40, 20, 25, 20, 0),             nrow = 4, ncol = 4, dimnames = list(orig = r, dest = r), byrow = TRUE) m #>     dest #> orig  A   B  C  D #>    A  0 100 30 70 #>    B 50   0 45  5 #>    C 60  35  0 40 #>    D 20  25 20  0 sum_region(m) #> # A tibble: 4 × 5 #>   region out_mig in_mig  turn   net #>   <chr>    <dbl>  <dbl> <dbl> <dbl> #> 1 A          200    130   330   -70 #> 2 B          100    160   260    60 #> 3 C          135     95   230   -40 #> 4 D           65    115   180    50  if (FALSE) { # \\dontrun{ # data frame (tidy) format library(tidyverse)  # download Abel and Cohen (2019) estimates f <- read_csv(\"https://ndownloader.figshare.com/files/38016762\", show_col_types = FALSE) f  # single period f %>%   filter(year0 == 1990) %>%   sum_country(flow = \"da_pb_closed\")  # all periods using group_by f %>%   group_by(year0) %>%   sum_country(flow = \"da_pb_closed\") } # }"},{"path":"/reference/uar_1960.html","id":null,"dir":"Reference","previous_headings":"","what":"Lifetime migration data for Governorates of United Arab Republic in 1960 — uar_1960","title":"Lifetime migration data for Governorates of United Arab Republic in 1960 — uar_1960","text":"Lifetime migration (stock) bilateral data Governorates United Arab Republic","code":""},{"path":"/reference/uar_1960.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lifetime migration data for Governorates of United Arab Republic in 1960 — uar_1960","text":"","code":"uar_1960"},{"path":"/reference/uar_1960.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Lifetime migration data for Governorates of United Arab Republic in 1960 — uar_1960","text":"Matrix 11 rows columns orig Governorate birth carat Governorate enumeration","code":""},{"path":"/reference/uar_1960.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Lifetime migration data for Governorates of United Arab Republic in 1960 — uar_1960","text":"United Arab Republic, Department Statistics Census, 1960 Census Population (Cairo, July 1963), vol. II, General tables, table 14, p. 50. Published United Nations Department Economic Social Affairs Population Division. (1970). Methods measuring internal migration. United Nations Department Economic Social Affairs Population Division - 1970 - Methods measuring internal migration https://www.un.org/development/desa/pd/sites/www.un.org.development.desa.pd/files/files/documents/2020/Jan/manual_vi_methods_of_measuring_internal_migration.pdf","code":""},{"path":"/reference/umbrella.html","id":null,"dir":"Reference","previous_headings":"","what":"Umbrella colour scheme — umbrella","title":"Umbrella colour scheme — umbrella","text":"Vector hexadecimal codes umbrella rainbow colour scheme","code":""},{"path":"/reference/umbrella.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Umbrella colour scheme — umbrella","text":"","code":"umbrella"},{"path":"/reference/umbrella.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Umbrella colour scheme — umbrella","text":"object class character length 9.","code":""},{"path":"/reference/usa_1960.html","id":null,"dir":"Reference","previous_headings":"","what":"US population totals in 1950 and 1960 by place of birth, age, sex and race — usa_1960","title":"US population totals in 1950 and 1960 by place of birth, age, sex and race — usa_1960","text":"Population data place birth, age, sex race 1950 1960","code":""},{"path":"/reference/usa_1960.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"US population totals in 1950 and 1960 by place of birth, age, sex and race — usa_1960","text":"","code":"usa_1960"},{"path":"/reference/usa_1960.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"US population totals in 1950 and 1960 by place of birth, age, sex and race — usa_1960","text":"Data frame 288 rows 7 columns: birthplace Place birth (US Census area) race Race white non-white sex Sex male female age_1950 Age group 1950 age_1960 Age group 1960 pop_1950 Enumerated population 1950 pop_1960 Enumerated population 1960","code":""},{"path":"/reference/usa_1960.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"US population totals in 1950 and 1960 by place of birth, age, sex and race — usa_1960","text":"Data scraped Table D, pp. 183-191 Eldridge, H., & Kim, Y. (1968). estimation intercensal migration birth-residence statistics: study data United States, 1950 1960 (PSC Analytical Technical Report Series, Issue 7). https://repository.upenn.edu/entities/publication/2a11a5f7-3ddf-47f3-a47d-1de5254f4cc5","code":""},{"path":"/news/index.html","id":"migest-205","dir":"Changelog","previous_headings":"","what":"migest 2.0.5","title":"migest 2.0.5","text":"Added net_matrix_ipf(), net_matrix_optim(), net_matrix_lp() net_matrix_entropy() functions. Replaced orig_col, dest_col flow_col argument names , sum_unilat(), sum_region() sum_country() orig, dest flow. Allow orig, dest flow argument names , sum_bilateral, sum_region() sum_country() non-characters. Added sum_unilat() alias sum_region() sum_country() Replaced orig_col, dest_col flow_col argument names functions Added labels.pos.adjust = FALSE mig_chord() Default colour ordering mig_chord() based union(.$orig, .$dest) Include na_rm option sum_region() sum_country()","code":""},{"path":"/news/index.html","id":"migest-204","dir":"Changelog","previous_headings":"","what":"migest 2.0.4","title":"migest 2.0.4","text":"CRAN release: 2023-11-18 Direct demo users mig_chord() pkgdown site Fixed colour ordering mig_chord() order set Added nb_non_zero() deal negative native born population estimates World Bank data Changed function name rescale_nb() nb_scale_global() Changed function name match_pob_tot() match_birthplace_tot() Changed argument names ffs_demo(), ffs_diff() ffs_rates() intuitive values (stock_start instead s1, stock_end instead s2, births instead b, deaths instead d seed instead m Added code create dict_ims Added countries based older political geography dict_ims column data frame indicate UN IMS data. Added korea_gravity, combining korea_dist, korea_pop, korea_reg additional distance, contiguity, area economic measures. Removed korea_dist, korea_pop, korea_reg Updated examples index_*() functions changes Korean data","code":""},{"path":"/news/index.html","id":"migest-203","dir":"Changelog","previous_headings":"","what":"migest 2.0.3","title":"migest 2.0.3","text":"CRAN release: 2022-10-28 Dropped sum_turnover() sum_bilateral() Fixed axis upper limits mig_chord() Added label_squeeze option mig_chord() Added region_ac2022 region_wb column dict_ims Replaced ipf functions ffs_demo() sub-functions mipfp::Ipfp Added return option ffs_demo() output estimted flow array unless otherwise stated Added name_short column dict_ims Simplified sum_od() code directly work outputs ffs_demo() provide margin sums","code":""},{"path":"/news/index.html","id":"migest-202","dir":"Changelog","previous_headings":"","what":"migest 2.0.2","title":"migest 2.0.2","text":"CRAN release: 2021-12-02 Added method option birth_mat() Added sum_bilat() sum_bilateral() Added sum_country()","code":""},{"path":"/news/index.html","id":"migest-201","dir":"Changelog","previous_headings":"","what":"migest 2.0.1","title":"migest 2.0.1","text":"CRAN release: 2021-10-30 Added NEWS.md file track changes package. Added hex logo Added pkgdown Github actions working Added str_wrap_n() Added mig_chord() Added dict_ims Replace sum_turnover() sum_region() Replace counter() sum_bilateral()","code":""}]
